<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structCSTR" xml:lang="en-US">
<title>CSTR Struct Reference</title>
<indexterm><primary>CSTR</primary></indexterm>
<para>

<para>Custom dynamic string type. </para>
 
</para>
<para>
<computeroutput>#include &lt;cstr.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>size_t <link linkend="_structCSTR_1ab232b3d18c8c47775417d3ea87bb8624">cap</link></para>

<para>Total allocated capacity (including NULL terminator) </para>
</listitem>
            <listitem><para>char * <link linkend="_structCSTR_1adc16bec3dee2fe6501a372918d1766c7">data</link></para>

<para>Pointer to the character buffer Always NULL terminated if properly managed through the API. </para>
</listitem>
            <listitem><para>bool <link linkend="_structCSTR_1af96673309f99797d1c8a393d0f21323f">forceCap</link></para>

<para>If true, capacity is fixed and operations that exceed it return an error instead of reallocating the size. </para>
</listitem>
            <listitem><para>bool <link linkend="_structCSTR_1a3e40b8f4e913a6e2d49df1f8e16bd323">initialized</link></para>

<para>Tracks whether this <link linkend="_structCSTR">CSTR</link> has been initialized. </para>
</listitem>
            <listitem><para>size_t <link linkend="_structCSTR_1a4d4fd3c90e98dd67542e65b6b388980b">len</link></para>

<para>Current string length (not counting the NULL terminator) </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Custom dynamic string type. </para>



<para>The fields should typically be managed only through the cstr_* API Directly modifying them can lead to undefined behavior unless explicitly intended </para>
<para>
Definition at line <link linkend="_cstr_8h_source_1l00040">40</link> of file <link linkend="_cstr_8h_source">cstr.h</link>.</para>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_structCSTR_1ab232b3d18c8c47775417d3ea87bb8624"/><section>
    <title>cap</title>
<indexterm><primary>cap</primary><secondary>CSTR</secondary></indexterm>
<indexterm><primary>CSTR</primary><secondary>cap</secondary></indexterm>
<para><computeroutput>size_t CSTR::cap</computeroutput></para><para>

<para>Total allocated capacity (including NULL terminator) </para>
</para>
<para>
Definition at line <link linkend="_cstr_8h_source_1l00068">68</link> of file <link linkend="_cstr_8h_source">cstr.h</link>.</para>
</section>
<anchor xml:id="_structCSTR_1adc16bec3dee2fe6501a372918d1766c7"/><section>
    <title>data</title>
<indexterm><primary>data</primary><secondary>CSTR</secondary></indexterm>
<indexterm><primary>CSTR</primary><secondary>data</secondary></indexterm>
<para><computeroutput>char* CSTR::data</computeroutput></para><para>

<para>Pointer to the character buffer Always NULL terminated if properly managed through the API. </para>
</para>
<para>
Definition at line <link linkend="_cstr_8h_source_1l00052">52</link> of file <link linkend="_cstr_8h_source">cstr.h</link>.</para>
</section>
<anchor xml:id="_structCSTR_1af96673309f99797d1c8a393d0f21323f"/><section>
    <title>forceCap</title>
<indexterm><primary>forceCap</primary><secondary>CSTR</secondary></indexterm>
<indexterm><primary>CSTR</primary><secondary>forceCap</secondary></indexterm>
<para><computeroutput>bool CSTR::forceCap</computeroutput></para><para>

<para>If true, capacity is fixed and operations that exceed it return an error instead of reallocating the size. </para>
</para>
<para>
Definition at line <link linkend="_cstr_8h_source_1l00058">58</link> of file <link linkend="_cstr_8h_source">cstr.h</link>.</para>
</section>
<anchor xml:id="_structCSTR_1a3e40b8f4e913a6e2d49df1f8e16bd323"/><section>
    <title>initialized</title>
<indexterm><primary>initialized</primary><secondary>CSTR</secondary></indexterm>
<indexterm><primary>CSTR</primary><secondary>initialized</secondary></indexterm>
<para><computeroutput>bool CSTR::initialized</computeroutput></para><para>

<para>Tracks whether this <link linkend="_structCSTR">CSTR</link> has been initialized. </para>
</para>

<para><note><title>Note</title>

<para>Should only be set by internal or initialization functions </para>
</note>
</para>
<para>
Definition at line <link linkend="_cstr_8h_source_1l00046">46</link> of file <link linkend="_cstr_8h_source">cstr.h</link>.</para>
</section>
<anchor xml:id="_structCSTR_1a4d4fd3c90e98dd67542e65b6b388980b"/><section>
    <title>len</title>
<indexterm><primary>len</primary><secondary>CSTR</secondary></indexterm>
<indexterm><primary>CSTR</primary><secondary>len</secondary></indexterm>
<para><computeroutput>size_t CSTR::len</computeroutput></para><para>

<para>Current string length (not counting the NULL terminator) </para>
</para>
<para>
Definition at line <link linkend="_cstr_8h_source_1l00063">63</link> of file <link linkend="_cstr_8h_source">cstr.h</link>.</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
inc/cstr/<link linkend="_cstr_8h">cstr.h</link></section>
</section>
