<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="da/d9a/cstr_8h" kind="file" language="C++">
    <compoundname>cstr.h</compoundname>
    <innerclass refid="de/d5e/structCSTR" prot="public">CSTR</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="da/d9a/cstr_8h_1aa36f129519da357efafe1e2fb11df576" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int __cstr_setFormat</definition>
        <argsstring>(CSTR *_str, const char *_fmt,...)</argsstring>
        <name>__cstr_setFormat</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Internal helper to format and set the string content. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses a printf-style format string and variadic arguments to overwrite the content of a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref>. The function computes the required buffer size, reallocates if needed (unless forceCap is active), formats the string, and updates length/capacity.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic arguments corresponding to the format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>CSTR_SUCCESS on success</para>
</listitem><listitem><para>CSTR_FAIL if parameters are invalid, allocation fails, or vsnprintf reports an error</para>
</listitem><listitem><para>CSTR_FORCECAP_LIMIT if forceCap is enabled and the required size exceeds current capacity</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>Typically used in the other defined functions for <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> inner API </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="103" column="12" declfile="inc/cstr/cstr.h" declline="103" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1aa64fd1fa39e95f059301cde622fe1895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int __cstr_updateCap</definition>
        <argsstring>(CSTR *_str)</argsstring>
        <name>__cstr_updateCap</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <briefdescription>
<para>Update the capacity automatically IMPORTANT: This function won&apos;t do anything if macro <computeroutput>CSTR_DYNAMIC_CAPACITY</computeroutput> is NOT defined. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return if fail or success </para>
</simplesect>
<simplesect kind="note"><para>Typically used in the other defined functions for <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> inner API </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="80" column="5" declfile="inc/cstr/cstr.h" declline="80" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a7a74e1845b0b12ce83fee782b9106f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_add</definition>
        <argsstring>(CSTR *_str, const char *_suffix)</argsstring>
        <name>cstr_add</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_suffix</declname>
        </param>
        <briefdescription>
<para>Append a suffix to the end of a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated string to append </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS, CSTR_FAIL, or CSTR_FORCECAP_LIMIT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="146" column="5" declfile="inc/cstr/cstr.h" declline="146" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1acf036d9c3a58a17c081904e6c79d5317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * cstr_bool</definition>
        <argsstring>(const bool _bool)</argsstring>
        <name>cstr_bool</name>
        <param>
          <type>const bool</type>
          <declname>_bool</declname>
        </param>
        <briefdescription>
<para>Return &quot;true&quot; or &quot;false&quot; based on a boolean value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_bool</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&quot;true&quot; if _bool is true, otherwise &quot;false&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="316" column="12" declfile="inc/cstr/cstr.h" declline="316" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1af89d1a993ff85c0be3926ff1541d8c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_clear</definition>
        <argsstring>(CSTR *_str)</argsstring>
        <name>cstr_clear</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <briefdescription>
<para>Clear a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to an empty string without freeing memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS or CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="164" column="5" declfile="inc/cstr/cstr.h" declline="164" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a19f903d2ed994c92fea4c65903c3b552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cstr_comp</definition>
        <argsstring>(const CSTR _s1, const CSTR _s2)</argsstring>
        <name>cstr_comp</name>
        <param>
          <type>const <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref></type>
          <declname>_s1</declname>
        </param>
        <param>
          <type>const <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref></type>
          <declname>_s2</declname>
        </param>
        <briefdescription>
<para>Compare two <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> instances for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_s1</parametername>
</parameternamelist>
<parameterdescription>
<para>First <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> (by value) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_s2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> (by value) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if equal, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="308" column="6" declfile="inc/cstr/cstr.h" declline="308" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a409ae3278ea2df20ece65251e829075a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_destroy</definition>
        <argsstring>(CSTR *_str)</argsstring>
        <name>cstr_destroy</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <briefdescription>
<para>Destroy and clean up a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> and its allocated objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS on success, otherwise CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="128" column="5" declfile="inc/cstr/cstr.h" declline="128" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1aac10925de8ce0961faa123541f9e3bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cstr_empty</definition>
        <argsstring>(const CSTR *_str)</argsstring>
        <name>cstr_empty</name>
        <param>
          <type>const <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <briefdescription>
<para>Get if the string is empty Return true if: <computeroutput>.len</computeroutput> smaller or equal to 0 <computeroutput>.data</computeroutput> is empty (&quot;&quot;) <computeroutput>.initialized</computeroutput> is false <computeroutput>_str</computeroutput> is NULL If none of the requirements are met, means that it&apos;s not empty, hence, return false. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Is the string empty? Yes (true), No (false) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="329" column="6" declfile="inc/cstr/cstr.h" declline="329" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1afa6b390abaebf90c0ffe07c92662bdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cstr_endsWith</definition>
        <argsstring>(const CSTR _str, const char *_suffix)</argsstring>
        <name>cstr_endsWith</name>
        <param>
          <type>const <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref></type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_suffix</declname>
        </param>
        <briefdescription>
<para>Check if a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> ends with the given suffix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to check (by value) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>The suffix string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if it ends with suffix, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="299" column="6" declfile="inc/cstr/cstr.h" declline="299" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a629281b6e3cecf239e0c1d05cd242b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_erase</definition>
        <argsstring>(CSTR *_str, int _pos, size_t _len)</argsstring>
        <name>cstr_erase</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_len</declname>
        </param>
        <briefdescription>
<para>Erase a portion of the string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of characters to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS or CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="262" column="5" declfile="inc/cstr/cstr.h" declline="262" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1ababe5de017b72cf0fbc1c1f74bc22337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cstr_find</definition>
        <argsstring>(const CSTR *_str, const char *_find)</argsstring>
        <name>cstr_find</name>
        <param>
          <type>const <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_find</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of a substring. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_find</parametername>
</parameternamelist>
<parameterdescription>
<para>Substring to locate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of first match, or CSTR_NPOS if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="271" column="8" declfile="inc/cstr/cstr.h" declline="271" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1af211d3b88dcfbfa8d8e467c819017e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cstr_findFrom</definition>
        <argsstring>(const CSTR *_str, const char *_find, size_t pos)</argsstring>
        <name>cstr_findFrom</name>
        <param>
          <type>const <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_find</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Find a substring starting from a specific index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_find</parametername>
</parameternamelist>
<parameterdescription>
<para>Substring to locate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of match, or CSTR_NPOS if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="281" column="8" declfile="inc/cstr/cstr.h" declline="281" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a5e208d26ff6fcc88a7ddb77fd332bbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_fromDouble</definition>
        <argsstring>(CSTR *_str, double _val)</argsstring>
        <name>cstr_fromDouble</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>double</type>
          <declname>_val</declname>
        </param>
        <briefdescription>
<para>Create a numeric string from a double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="227" column="5" declfile="inc/cstr/cstr.h" declline="227" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a37ba4068bdf1af73b0781ffe9ea7f8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_fromFloat</definition>
        <argsstring>(CSTR *_str, float _val)</argsstring>
        <name>cstr_fromFloat</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>float</type>
          <declname>_val</declname>
        </param>
        <briefdescription>
<para>Create a numeric string from a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="222" column="5" declfile="inc/cstr/cstr.h" declline="222" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a3afbc750e95934020262efc1a0a4d11a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_fromHex</definition>
        <argsstring>(CSTR *_str, unsigned int _val)</argsstring>
        <name>cstr_fromHex</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>_val</declname>
        </param>
        <briefdescription>
<para>Create a hexadecimal string from an unsigned integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="232" column="5" declfile="inc/cstr/cstr.h" declline="232" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a536dc346ad93e3750e1842ea43bb4450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_fromInt</definition>
        <argsstring>(CSTR *_str, int _val)</argsstring>
        <name>cstr_fromInt</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_val</declname>
        </param>
        <briefdescription>
<para>Create a numeric string from an integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="212" column="5" declfile="inc/cstr/cstr.h" declline="212" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1ab5087cdbf0f78126f767966a4fd61cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_fromLong</definition>
        <argsstring>(CSTR *_str, long _val)</argsstring>
        <name>cstr_fromLong</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>long</type>
          <declname>_val</declname>
        </param>
        <briefdescription>
<para>Create a numeric string from a long. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="217" column="5" declfile="inc/cstr/cstr.h" declline="217" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1ac6b2cbbf55bc53365030b1549166f7c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref></type>
        <definition>CSTR cstr_init</definition>
        <argsstring>(void)</argsstring>
        <name>cstr_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize a new empty <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A new <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> instance. Check <computeroutput>.initialized</computeroutput> or if <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> is not NULL to confirm success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="111" column="6" declfile="inc/cstr/cstr.h" declline="111" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a94a452fa90f6788aca985a9afaa6ba36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_initCopy</definition>
        <argsstring>(CSTR *_dest, const char *_src)</argsstring>
        <name>cstr_initCopy</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_dest</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_src</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> with a copy of an original C-string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the destination <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_src</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated string to copy from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS on success, otherwise CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="120" column="5" declfile="inc/cstr/cstr.h" declline="120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a0ba51ccc14c1f17db5b453aa857c92eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_insert</definition>
        <argsstring>(CSTR *_str, const char *_data, size_t _pos)</argsstring>
        <name>cstr_insert</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_pos</declname>
        </param>
        <briefdescription>
<para>Insert a string at a specific position in a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL terminated string to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position at which to insert, 0-based </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS, CSTR_FAIL, or CSTR_FORCECAP_LIMIT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="190" column="5" declfile="inc/cstr/cstr.h" declline="190" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a1dba58127f74ebaa9244dc9bff79b065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_lower</definition>
        <argsstring>(CSTR *_str)</argsstring>
        <name>cstr_lower</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <briefdescription>
<para>Convert all characters in a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to lowercase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS or CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="180" column="5" declfile="inc/cstr/cstr.h" declline="180" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1ad5ffa3660e5c00c93763589cb4d55ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_replace</definition>
        <argsstring>(CSTR *_str, const char *_old, const char *_new)</argsstring>
        <name>cstr_replace</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_old</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_new</declname>
        </param>
        <briefdescription>
<para>Replace only the first occurrence of a substring. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_old</parametername>
</parameternamelist>
<parameterdescription>
<para>Substring to locate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_new</parametername>
</parameternamelist>
<parameterdescription>
<para>Replacement string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS or an error code (CSTR_FAIL, ...) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="242" column="5" declfile="inc/cstr/cstr.h" declline="242" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a260c899e712785b5e45f07c6b4d6a934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_replaceAll</definition>
        <argsstring>(CSTR *_str, const char *_old, const char *_new)</argsstring>
        <name>cstr_replaceAll</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_old</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_new</declname>
        </param>
        <briefdescription>
<para>Replace all occurrences of a substring. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_old</parametername>
</parameternamelist>
<parameterdescription>
<para>Substring to locate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_new</parametername>
</parameternamelist>
<parameterdescription>
<para>Replacement string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS or CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="252" column="5" declfile="inc/cstr/cstr.h" declline="252" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a184ac1e789dc883dbb3b61c2ab3155d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_reverse</definition>
        <argsstring>(CSTR *_str)</argsstring>
        <name>cstr_reverse</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <briefdescription>
<para>Reverse the content of a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS or CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="198" column="5" declfile="inc/cstr/cstr.h" declline="198" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a5869f4de55dbc9604a41377a98a5d8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_set</definition>
        <argsstring>(CSTR *_str, const char *_data)</argsstring>
        <name>cstr_set</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_data</declname>
        </param>
        <briefdescription>
<para>Set the content of a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to a new C-string in <computeroutput>.data</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Null terminated string to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS, CSTR_FAIL, or CSTR_FORCECAP_LIMIT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="137" column="5" declfile="inc/cstr/cstr.h" declline="137" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a3f8f5540a61c0814d0518cd2bad72eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_shrink</definition>
        <argsstring>(CSTR *_str, const size_t _len)</argsstring>
        <name>cstr_shrink</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>_len</declname>
        </param>
        <briefdescription>
<para>Clear the content of a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> and optionally shrink capacity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to shrink </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_len</parametername>
</parameternamelist>
<parameterdescription>
<para>New length (characters to keep) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS or CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="207" column="5" declfile="inc/cstr/cstr.h" declline="207" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a5d7d68335475e3e92ad7af71c1436f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cstr_startsWith</definition>
        <argsstring>(CSTR _str, const char *_prefix)</argsstring>
        <name>cstr_startsWith</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref></type>
          <declname>_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>_prefix</declname>
        </param>
        <briefdescription>
<para>Check if a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> begins with the given prefix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to check by value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefix string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if it starts with prefix, else return false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="290" column="6" declfile="inc/cstr/cstr.h" declline="290" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a48a4112d753f753d4d8725fc3e7c5a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_substr</definition>
        <argsstring>(CSTR *_str, size_t _start, size_t _len)</argsstring>
        <name>cstr_substr</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_len</declname>
        </param>
        <briefdescription>
<para>Extract a substring in place from a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting index of the substring </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the substring </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS or CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="156" column="5" declfile="inc/cstr/cstr.h" declline="156" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="da/d9a/cstr_8h_1a9a33ebbb1989f05327b1b5464de45b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cstr_upper</definition>
        <argsstring>(CSTR *_str)</argsstring>
        <name>cstr_upper</name>
        <param>
          <type><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> *</type>
          <declname>_str</declname>
        </param>
        <briefdescription>
<para>Convert all characters in a <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to uppercase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref> to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSTR_SUCCESS or CSTR_FAIL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/cstr/cstr.h" line="172" column="5" declfile="inc/cstr/cstr.h" declline="172" declcolumn="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>cstr.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d5/d5a/CSTRpredefines_8h" kindref="compound">CSTRpredefines.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__CSTR_OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>undef<sp/>__CSTR_OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(__CSTR_OK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__STDC_VERSION__<sp/>&gt;=<sp/>CSTR_DEFAULT_C_STD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CSTR_NPOS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CSTR_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CSTR_FAIL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CSTR_FORCECAP_LIMIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Dear<sp/>developer,<sp/>check<sp/>all<sp/>the<sp/>available<sp/>macros<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CSTR_RECOMMENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CSTR_DYNAMIC_CAPACITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CSTR_ENABLE_GET_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CSTR_ENABLE_GET_CONST_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CSTR_RECOMMENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Other<sp/>macros<sp/>that<sp/>are<sp/>not<sp/>recommended<sp/>but<sp/>available<sp/>for<sp/>flexibility<sp/>are:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CSTR_DEFINE_INTERNAL<sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Define<sp/>the<sp/>internal<sp/>files<sp/>inside<sp/>of<sp/>the<sp/>header<sp/>file<sp/>(cstr.h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Check<sp/>the<sp/>definitions<sp/>below<sp/>the<sp/>definition<sp/>of<sp/>the<sp/>CSTR<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CSTR_RECOMMENDED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enable<sp/>recommended<sp/>macros,<sp/>such<sp/>as<sp/>CSTR_DYNAMIC_CAPACITY,<sp/>CSTR_ENABLE_GET_RETURN,<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Custom<sp/>dynamic<sp/>string<sp/>type</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>The<sp/>fields<sp/>should<sp/>typically<sp/>be<sp/>managed<sp/>only<sp/>through<sp/>the<sp/>cstr_*<sp/>API</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>Directly<sp/>modifying<sp/>them<sp/>can<sp/>lead<sp/>to<sp/>undefined<sp/>behavior<sp/>unless<sp/>explicitly<sp/>intended</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="de/d5e/structCSTR" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Tracks<sp/>whether<sp/>this<sp/>CSTR<sp/>has<sp/>been<sp/>initialized</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@note<sp/>Should<sp/>only<sp/>be<sp/>set<sp/>by<sp/>internal<sp/>or<sp/>initialization<sp/>functions</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="de/d5e/structCSTR_1a3e40b8f4e913a6e2d49df1f8e16bd323" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR_1a3e40b8f4e913a6e2d49df1f8e16bd323" kindref="member">initialized</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Pointer<sp/>to<sp/>the<sp/>character<sp/>buffer</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Always<sp/>NULL<sp/>terminated<sp/>if<sp/>properly<sp/>managed<sp/>through<sp/>the<sp/>API</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="de/d5e/structCSTR_1adc16bec3dee2fe6501a372918d1766c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="de/d5e/structCSTR_1adc16bec3dee2fe6501a372918d1766c7" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>If<sp/>true,<sp/>capacity<sp/>is<sp/>fixed<sp/>and<sp/>operations<sp/>that<sp/>exceed</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>it<sp/>return<sp/>an<sp/>error<sp/>instead<sp/>of<sp/>reallocating<sp/>the<sp/>size</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="de/d5e/structCSTR_1af96673309f99797d1c8a393d0f21323f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR_1af96673309f99797d1c8a393d0f21323f" kindref="member">forceCap</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Current<sp/>string<sp/>length<sp/>(not<sp/>counting<sp/>the<sp/>NULL<sp/>terminator)</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="de/d5e/structCSTR_1a4d4fd3c90e98dd67542e65b6b388980b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR_1a4d4fd3c90e98dd67542e65b6b388980b" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Total<sp/>allocated<sp/>capacity<sp/>(including<sp/>NULL<sp/>terminator)</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="de/d5e/structCSTR_1ab232b3d18c8c47775417d3ea87bb8624" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR_1ab232b3d18c8c47775417d3ea87bb8624" kindref="member">cap</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}<sp/><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CSTR_DEFINE_INTERNAL</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Update<sp/>the<sp/>capacity<sp/>automatically</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>IMPORTANT:</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>won&apos;t<sp/>do<sp/>anything<sp/>if<sp/>macro<sp/>`CSTR_DYNAMIC_CAPACITY`<sp/>is<sp/>NOT<sp/>defined</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@return<sp/>Return<sp/>if<sp/>fail<sp/>or<sp/>success</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>@note<sp/>Typically<sp/>used<sp/>in<sp/>the<sp/>other<sp/>defined<sp/>functions<sp/>for<sp/>CSTR<sp/>inner<sp/>API</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="da/d9a/cstr_8h_1aa64fd1fa39e95f059301cde622fe1895" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1aa64fd1fa39e95f059301cde622fe1895" kindref="member">__cstr_updateCap</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Internal<sp/>helper<sp/>to<sp/>format<sp/>and<sp/>set<sp/>the<sp/>string<sp/>content.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>Uses<sp/>a<sp/>printf-style<sp/>format<sp/>string<sp/>and<sp/>variadic<sp/>arguments<sp/>to</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>overwrite<sp/>the<sp/>content<sp/>of<sp/>a<sp/>CSTR.<sp/>The<sp/>function<sp/>computes<sp/>the</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>required<sp/>buffer<sp/>size,<sp/>reallocates<sp/>if<sp/>needed<sp/>(unless<sp/>forceCap</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>is<sp/>active),<sp/>formats<sp/>the<sp/>string,<sp/>and<sp/>updates<sp/>length/capacity.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>modify.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>@param<sp/>_fmt<sp/>printf-style<sp/>format<sp/>string.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@param<sp/>...<sp/><sp/>Variadic<sp/>arguments<sp/>corresponding<sp/>to<sp/>the<sp/>format.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@return</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>CSTR_SUCCESS<sp/>on<sp/>success</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>CSTR_FAIL<sp/>if<sp/>parameters<sp/>are<sp/>invalid,<sp/>allocation<sp/>fails,</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>or<sp/>vsnprintf<sp/>reports<sp/>an<sp/>error</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>CSTR_FORCECAP_LIMIT<sp/>if<sp/>forceCap<sp/>is<sp/>enabled<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>required<sp/>size<sp/>exceeds<sp/>current<sp/>capacity</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>@note<sp/>Typically<sp/>used<sp/>in<sp/>the<sp/>other<sp/>defined<sp/>functions<sp/>for<sp/>CSTR<sp/>inner<sp/>API</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="da/d9a/cstr_8h_1aa36f129519da357efafe1e2fb11df576" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1aa36f129519da357efafe1e2fb11df576" kindref="member">__cstr_setFormat</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_fmt,<sp/>...);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(CSTR_DEFINE_INTERNAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Initialize<sp/>a<sp/>new<sp/>empty<sp/>CSTR</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@return<sp/>A<sp/>new<sp/>CSTR<sp/>instance.<sp/>Check<sp/>`.initialized`<sp/>or<sp/>if<sp/>CSTR<sp/>is<sp/>not<sp/>NULL<sp/>to<sp/>confirm<sp/>success</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="da/d9a/cstr_8h_1ac6b2cbbf55bc53365030b1549166f7c8" refkind="member"><highlight class="normal"><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/><ref refid="da/d9a/cstr_8h_1ac6b2cbbf55bc53365030b1549166f7c8" kindref="member">cstr_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Initialize<sp/>a<sp/>CSTR<sp/>with<sp/>a<sp/>copy<sp/>of<sp/>an<sp/>original<sp/>C-string</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>@param<sp/>_dest<sp/>Pointer<sp/>to<sp/>the<sp/>destination<sp/>CSTR</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>@param<sp/>_src<sp/>NULL<sp/>terminated<sp/>string<sp/>to<sp/>copy<sp/>from</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>on<sp/>success,<sp/>otherwise<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="da/d9a/cstr_8h_1a94a452fa90f6788aca985a9afaa6ba36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a94a452fa90f6788aca985a9afaa6ba36" kindref="member">cstr_initCopy</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_src);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="122"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destroy<sp/>and<sp/>clean<sp/>up<sp/>a<sp/>CSTR<sp/>and<sp/>its<sp/>allocated<sp/>objects</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>destroy</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>on<sp/>success,<sp/>otherwise<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="da/d9a/cstr_8h_1a409ae3278ea2df20ece65251e829075a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a409ae3278ea2df20ece65251e829075a" kindref="member">cstr_destroy</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Set<sp/>the<sp/>content<sp/>of<sp/>a<sp/>CSTR<sp/>to<sp/>a<sp/>new<sp/>C-string<sp/>in<sp/>`.data`</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>@param<sp/>_data<sp/>Null<sp/>terminated<sp/>string<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS,<sp/>CSTR_FAIL,<sp/>or<sp/>CSTR_FORCECAP_LIMIT</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="da/d9a/cstr_8h_1a5869f4de55dbc9604a41377a98a5d8d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a5869f4de55dbc9604a41377a98a5d8d1" kindref="member">cstr_set</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_data);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Append<sp/>a<sp/>suffix<sp/>to<sp/>the<sp/>end<sp/>of<sp/>a<sp/>CSTR</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@param<sp/>_suffix<sp/>NULL<sp/>terminated<sp/>string<sp/>to<sp/>append</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS,<sp/>CSTR_FAIL,<sp/>or<sp/>CSTR_FORCECAP_LIMIT</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="da/d9a/cstr_8h_1a7a74e1845b0b12ce83fee782b9106f13" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a7a74e1845b0b12ce83fee782b9106f13" kindref="member">cstr_add</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_suffix);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Extract<sp/>a<sp/>substring<sp/>in<sp/>place<sp/>from<sp/>a<sp/>CSTR</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>@param<sp/>_start<sp/>Starting<sp/>index<sp/>of<sp/>the<sp/>substring</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>@param<sp/>_len<sp/>Length<sp/>of<sp/>the<sp/>substring</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>or<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="da/d9a/cstr_8h_1a48a4112d753f753d4d8725fc3e7c5a33" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a48a4112d753f753d4d8725fc3e7c5a33" kindref="member">cstr_substr</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_start,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_len);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Clear<sp/>a<sp/>CSTR<sp/>to<sp/>an<sp/>empty<sp/>string<sp/>without<sp/>freeing<sp/>memory</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>clear</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>or<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="da/d9a/cstr_8h_1af89d1a993ff85c0be3926ff1541d8c57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1af89d1a993ff85c0be3926ff1541d8c57" kindref="member">cstr_clear</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Convert<sp/>all<sp/>characters<sp/>in<sp/>a<sp/>CSTR<sp/>to<sp/>uppercase</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>or<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="da/d9a/cstr_8h_1a9a33ebbb1989f05327b1b5464de45b31" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a9a33ebbb1989f05327b1b5464de45b31" kindref="member">cstr_upper</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Convert<sp/>all<sp/>characters<sp/>in<sp/>a<sp/>CSTR<sp/>to<sp/>lowercase</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>or<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="da/d9a/cstr_8h_1a1dba58127f74ebaa9244dc9bff79b065" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a1dba58127f74ebaa9244dc9bff79b065" kindref="member">cstr_lower</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Insert<sp/>a<sp/>string<sp/>at<sp/>a<sp/>specific<sp/>position<sp/>in<sp/>a<sp/>CSTR</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@param<sp/>_data<sp/>NULL<sp/>terminated<sp/>string<sp/>to<sp/>insert</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>@param<sp/>_pos<sp/>Position<sp/>at<sp/>which<sp/>to<sp/>insert,<sp/>0-based</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS,<sp/>CSTR_FAIL,<sp/>or<sp/>CSTR_FORCECAP_LIMIT</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="da/d9a/cstr_8h_1a0ba51ccc14c1f17db5b453aa857c92eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a0ba51ccc14c1f17db5b453aa857c92eb" kindref="member">cstr_insert</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_pos);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Reverse<sp/>the<sp/>content<sp/>of<sp/>a<sp/>CSTR<sp/>in<sp/>place</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>or<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="da/d9a/cstr_8h_1a184ac1e789dc883dbb3b61c2ab3155d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a184ac1e789dc883dbb3b61c2ab3155d8" kindref="member">cstr_reverse</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Clear<sp/>the<sp/>content<sp/>of<sp/>a<sp/>CSTR<sp/>and<sp/>optionally<sp/>shrink<sp/>capacity</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>shrink</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>@param<sp/>_len<sp/>New<sp/>length<sp/>(characters<sp/>to<sp/>keep)</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>or<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="da/d9a/cstr_8h_1a3f8f5540a61c0814d0518cd2bad72eb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a3f8f5540a61c0814d0518cd2bad72eb8" kindref="member">cstr_shrink</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_len);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Create<sp/>a<sp/>numeric<sp/>string<sp/>from<sp/>an<sp/>integer</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="da/d9a/cstr_8h_1a536dc346ad93e3750e1842ea43bb4450" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a536dc346ad93e3750e1842ea43bb4450" kindref="member">cstr_fromInt</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_val);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Create<sp/>a<sp/>numeric<sp/>string<sp/>from<sp/>a<sp/>long</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="da/d9a/cstr_8h_1ab5087cdbf0f78126f767966a4fd61cb2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1ab5087cdbf0f78126f767966a4fd61cb2" kindref="member">cstr_fromLong</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>_val);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Create<sp/>a<sp/>numeric<sp/>string<sp/>from<sp/>a<sp/>float</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="da/d9a/cstr_8h_1a37ba4068bdf1af73b0781ffe9ea7f8b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a37ba4068bdf1af73b0781ffe9ea7f8b8" kindref="member">cstr_fromFloat</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_val);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Create<sp/>a<sp/>numeric<sp/>string<sp/>from<sp/>a<sp/>double</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="da/d9a/cstr_8h_1a5e208d26ff6fcc88a7ddb77fd332bbe7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a5e208d26ff6fcc88a7ddb77fd332bbe7" kindref="member">cstr_fromDouble</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_val);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="229"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Create<sp/>a<sp/>hexadecimal<sp/>string<sp/>from<sp/>an<sp/>unsigned<sp/>integer</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="da/d9a/cstr_8h_1a3afbc750e95934020262efc1a0a4d11a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a3afbc750e95934020262efc1a0a4d11a" kindref="member">cstr_fromHex</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_val);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Replace<sp/>only<sp/>the<sp/>first<sp/>occurrence<sp/>of<sp/>a<sp/>substring</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@param<sp/>_old<sp/>Substring<sp/>to<sp/>locate</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>@param<sp/>_new<sp/>Replacement<sp/>string</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>or<sp/>an<sp/>error<sp/>code<sp/>(CSTR_FAIL,<sp/>...)</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="da/d9a/cstr_8h_1ad5ffa3660e5c00c93763589cb4d55ea8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1ad5ffa3660e5c00c93763589cb4d55ea8" kindref="member">cstr_replace</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_old,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_new);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Replace<sp/>all<sp/>occurrences<sp/>of<sp/>a<sp/>substring</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@param<sp/>_old<sp/>Substring<sp/>to<sp/>locate</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>@param<sp/>_new<sp/>Replacement<sp/>string</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>or<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="da/d9a/cstr_8h_1a260c899e712785b5e45f07c6b4d6a934" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a260c899e712785b5e45f07c6b4d6a934" kindref="member">cstr_replaceAll</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_old,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_new);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="254"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Erase<sp/>a<sp/>portion<sp/>of<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>@param<sp/>_pos<sp/>Starting<sp/>position</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@param<sp/>_len<sp/>Number<sp/>of<sp/>characters<sp/>to<sp/>remove</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSTR_SUCCESS<sp/>or<sp/>CSTR_FAIL</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="da/d9a/cstr_8h_1a629281b6e3cecf239e0c1d05cd242b35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a629281b6e3cecf239e0c1d05cd242b35" kindref="member">cstr_erase</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_pos,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_len);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Find<sp/>the<sp/>first<sp/>occurrence<sp/>of<sp/>a<sp/>substring</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>search</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>@param<sp/>_find<sp/>Substring<sp/>to<sp/>locate</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@return<sp/>Index<sp/>of<sp/>first<sp/>match,<sp/>or<sp/>CSTR_NPOS<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="da/d9a/cstr_8h_1ababe5de017b72cf0fbc1c1f74bc22337" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1ababe5de017b72cf0fbc1c1f74bc22337" kindref="member">cstr_find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_find);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Find<sp/>a<sp/>substring<sp/>starting<sp/>from<sp/>a<sp/>specific<sp/>index</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>Pointer<sp/>to<sp/>the<sp/>CSTR<sp/>to<sp/>search</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@param<sp/>_find<sp/>Substring<sp/>to<sp/>locate</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>@param<sp/>pos<sp/>Starting<sp/>index</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@return<sp/>Index<sp/>of<sp/>match,<sp/>or<sp/>CSTR_NPOS<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="da/d9a/cstr_8h_1af211d3b88dcfbfa8d8e467c819017e5d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1af211d3b88dcfbfa8d8e467c819017e5d" kindref="member">cstr_findFrom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_find,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Check<sp/>if<sp/>a<sp/>CSTR<sp/>begins<sp/>with<sp/>the<sp/>given<sp/>prefix</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>The<sp/>CSTR<sp/>to<sp/>check<sp/>by<sp/>value</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@param<sp/>_prefix<sp/>The<sp/>prefix<sp/>string</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>it<sp/>starts<sp/>with<sp/>prefix,<sp/>else<sp/>return<sp/>false</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="da/d9a/cstr_8h_1a5d7d68335475e3e92ad7af71c1436f01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a5d7d68335475e3e92ad7af71c1436f01" kindref="member">cstr_startsWith</ref>(<ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_prefix);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Check<sp/>if<sp/>a<sp/>CSTR<sp/>ends<sp/>with<sp/>the<sp/>given<sp/>suffix</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@param<sp/>_str<sp/>The<sp/>CSTR<sp/>to<sp/>check<sp/>(by<sp/>value)</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>@param<sp/>_suffix<sp/>The<sp/>suffix<sp/>string</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>it<sp/>ends<sp/>with<sp/>suffix,<sp/>false<sp/>otherwise</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="da/d9a/cstr_8h_1afa6b390abaebf90c0ffe07c92662bdcc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1afa6b390abaebf90c0ffe07c92662bdcc" kindref="member">cstr_endsWith</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_suffix);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Compare<sp/>two<sp/>CSTR<sp/>instances<sp/>for<sp/>equality</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@param<sp/>_s1<sp/>First<sp/>CSTR<sp/>(by<sp/>value)</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@param<sp/>_s2<sp/>Second<sp/>CSTR<sp/>(by<sp/>value)</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>equal,<sp/>false<sp/>otherwise</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="da/d9a/cstr_8h_1a19f903d2ed994c92fea4c65903c3b552" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1a19f903d2ed994c92fea4c65903c3b552" kindref="member">cstr_comp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>_s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>_s2);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="310"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Return<sp/>&quot;true&quot;<sp/>or<sp/>&quot;false&quot;<sp/>based<sp/>on<sp/>a<sp/>boolean<sp/>value</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@param<sp/>_bool<sp/>Boolean<sp/>value</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>@return<sp/>&quot;true&quot;<sp/>if<sp/>_bool<sp/>is<sp/>true,<sp/>otherwise<sp/>&quot;false&quot;.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="da/d9a/cstr_8h_1acf036d9c3a58a17c081904e6c79d5317" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="da/d9a/cstr_8h_1acf036d9c3a58a17c081904e6c79d5317" kindref="member">cstr_bool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_bool);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Get<sp/>if<sp/>the<sp/>string<sp/>is<sp/>empty<sp/></highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>Return<sp/>true<sp/>if:</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>`.len`<sp/>smaller<sp/>or<sp/>equal<sp/>to<sp/>0</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>`.data`<sp/>is<sp/>empty<sp/>(&quot;&quot;)</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>`.initialized`<sp/>is<sp/>false</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>`_str`<sp/>is<sp/>NULL</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>If<sp/>none<sp/>of<sp/>the<sp/>requirements<sp/>are<sp/>met,<sp/>means<sp/>that<sp/>it&apos;s<sp/>not<sp/>empty,<sp/>hence,<sp/>return<sp/>false</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@return<sp/>Is<sp/>the<sp/>string<sp/>empty?<sp/>Yes<sp/>(true),<sp/>No<sp/>(false)</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="da/d9a/cstr_8h_1aac10925de8ce0961faa123541f9e3bab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="da/d9a/cstr_8h_1aac10925de8ce0961faa123541f9e3bab" kindref="member">cstr_empty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d5e/structCSTR" kindref="compound">CSTR</ref><sp/>*_str);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CSTR_OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__CSTR_OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>CSTR_ENABLE_GET_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CSTR_GET_RETURN(_cstr,<sp/>_call,<sp/>...)<sp/>((_call(&amp;_cstr,<sp/><sp/>__VA_ARGS__)),<sp/>_cstr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CSTR_GET_RETURN(_cstr,<sp/>_call,<sp/>...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif<sp/></highlight><highlight class="comment">//<sp/>defined(CSTR_ENABLE_GET_RETURN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>CSTR_CONST_RETURN_USE_PTR_METHOD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CSTR_CONST_RETURN_PTR_METHOD<sp/>-&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CSTR_CONST_RETURN_PTR_METHOD<sp/>.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>CSTR_ENABLE_GET_CONST_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CSTR_GET_CONST_RETURN(_str,<sp/>_call,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>({<sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSTR<sp/>tmpS;<sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstr_initCopy(&amp;tmpS,<sp/>_str<sp/>CSTR_CONST_RETURN_PTR_METHOD<sp/>data);<sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_call(&amp;tmpS,<sp/>__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpS;<sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CSTR_GET_CONST_RETURN(_str,<sp/>_call,<sp/>...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif<sp/></highlight><highlight class="comment">//<sp/>defined(CSTR_ENABLE_GET_CONST_RETURN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__CSTR_OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>error<sp/>&quot;Must<sp/>use<sp/>C11<sp/>as<sp/>the<sp/>minimum<sp/>standard&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__STDC_VERSION__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="inc/cstr/cstr.h"/>
  </compounddef>
</doxygen>
