<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_VP__Parse_8cpp_source" xml:lang="en-US">
<title>VP_Parse.cpp</title>
<indexterm><primary>src/VP_Parse.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_VP__Parse_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;filesystem&gt;</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00006"/>00006 
<anchor xml:id="_VP__Parse_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_VP__Parse_8hpp">../inc/varparse.cpp/VP_Parse.hpp</link>&quot;</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00008"/>00008 
<anchor xml:id="_VP__Parse_8cpp_source_1l00009"/>00009 <emphasis role="keyword">namespace&#32;</emphasis>fs&#32;=&#32;std::filesystem;
<anchor xml:id="_VP__Parse_8cpp_source_1l00010"/>00010 
<anchor xml:id="_VP__Parse_8cpp_source_1l00011"/><link linkend="_VP__Parse_8cpp_1adb99666973bac16ee2e3ae6bd5cfb242">00011</link> <emphasis role="preprocessor">#define&#32;__VP_ERROR_THROW_DEFAULT_MSG&#32;\</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00012"/>00012 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;std::string(&quot;Parser(&quot;&#32;+&#32;this-&gt;id&#32;+&#32;&quot;):&#32;&quot;)</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00013"/>00013 
<anchor xml:id="_VP__Parse_8cpp_source_1l00014"/>00014 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacevp">vp</link>
<anchor xml:id="_VP__Parse_8cpp_source_1l00015"/>00015 {
<anchor xml:id="_VP__Parse_8cpp_source_1l00016"/><link linkend="_classvp_1_1Parser_1a46d7a7260cc6704bd09a757ad8015fbf">00016</link> &#32;&#32;&#32;&#32;<link linkend="_classvp_1_1Parser_1a46d7a7260cc6704bd09a757ad8015fbf">Parser::Parser</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;_id,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;_file,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;_extension)
<anchor xml:id="_VP__Parse_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classvp_1_1Parser_1a984f4a6ce9f5578af0edd6878b1f583b">id</link>(_id),&#32;<link linkend="_classvp_1_1Parser_1a0dba0d4012b3aa1ad16d58a89c1597ce">fpath</link>(_file),&#32;<link linkend="_classvp_1_1Parser_1a3a32b1c7ced72af69a654e2be9b05bab">extension</link>(_extension)
<anchor xml:id="_VP__Parse_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;{
<anchor xml:id="_VP__Parse_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!fs::exists(_file))
<anchor xml:id="_VP__Parse_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_VP__Parse_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;error&#32;=&#32;<link linkend="_VP__Parse_8cpp_1adb99666973bac16ee2e3ae6bd5cfb242">__VP_ERROR_THROW_DEFAULT_MSG</link>&#32;+&#32;_file&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;Does&#32;not&#32;exist&quot;</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00022"/>00022 
<anchor xml:id="_VP__Parse_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;error&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00024"/>00024 
<anchor xml:id="_VP__Parse_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classvp_1_1Parser_1ada8181e33a36ab0da77b9c8785ca9c8f">status</link>.error&#32;=&#32;error;
<anchor xml:id="_VP__Parse_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classvp_1_1Parser_1ada8181e33a36ab0da77b9c8785ca9c8f">status</link>.constructed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00027"/>00027 
<anchor xml:id="_VP__Parse_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00030"/>00030 
<anchor xml:id="_VP__Parse_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;extensionSubstr&#32;=&#32;this-&gt;<link linkend="_classvp_1_1Parser_1a0dba0d4012b3aa1ad16d58a89c1597ce">fpath</link>.substr(<link linkend="_classvp_1_1Parser_1a0dba0d4012b3aa1ad16d58a89c1597ce">fpath</link>.size()&#32;-&#32;_extension.size());
<anchor xml:id="_VP__Parse_8cpp_source_1l00032"/>00032 
<anchor xml:id="_VP__Parse_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(extensionSubstr&#32;!=&#32;_extension)
<anchor xml:id="_VP__Parse_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_VP__Parse_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;error&#32;=&#32;<link linkend="_VP__Parse_8cpp_1adb99666973bac16ee2e3ae6bd5cfb242">__VP_ERROR_THROW_DEFAULT_MSG</link>&#32;+&#32;_file&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;Does&#32;not&#32;have&#32;the&#32;required&#32;file&#32;extension,&#32;required&#32;is:&#32;&quot;</emphasis>&#32;+&#32;_extension;
<anchor xml:id="_VP__Parse_8cpp_source_1l00036"/>00036 
<anchor xml:id="_VP__Parse_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;error&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00038"/>00038 
<anchor xml:id="_VP__Parse_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classvp_1_1Parser_1ada8181e33a36ab0da77b9c8785ca9c8f">status</link>.error&#32;=&#32;error;
<anchor xml:id="_VP__Parse_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classvp_1_1Parser_1ada8181e33a36ab0da77b9c8785ca9c8f">status</link>.constructed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_VP__Parse_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00044"/>00044 
<anchor xml:id="_VP__Parse_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classvp_1_1Parser_1ada8181e33a36ab0da77b9c8785ca9c8f">status</link>.constructed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00047"/>00047 
<anchor xml:id="_VP__Parse_8cpp_source_1l00048"/><link linkend="_classvp_1_1Parser_1a765a0d08947ed756cd3bb75f03fd2909">00048</link> &#32;&#32;&#32;&#32;<link linkend="_structvp_1_1ParserReturn">ParserReturn</link>&#32;<link linkend="_classvp_1_1Parser_1a765a0d08947ed756cd3bb75f03fd2909">Parser::parse</link>()
<anchor xml:id="_VP__Parse_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;{
<anchor xml:id="_VP__Parse_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classvp_1_1Parser_1ab1ce18785fdc3d4014af72c8892a5456">parseRet</link>&#32;=&#32;this-&gt;<link linkend="_classvp_1_1Parser_1a73b347e24a79937ef18dcd8fb91e4583">__parse</link>();
<anchor xml:id="_VP__Parse_8cpp_source_1l00051"/>00051 
<anchor xml:id="_VP__Parse_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classvp_1_1Parser_1ab1ce18785fdc3d4014af72c8892a5456">parseRet</link>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00054"/>00054 
<anchor xml:id="_VP__Parse_8cpp_source_1l00055"/><link linkend="_classvp_1_1Parser_1a73b347e24a79937ef18dcd8fb91e4583">00055</link> &#32;&#32;&#32;&#32;<link linkend="_structvp_1_1ParserReturn">ParserReturn</link>&#32;<link linkend="_classvp_1_1Parser_1a73b347e24a79937ef18dcd8fb91e4583">Parser::__parse</link>()
<anchor xml:id="_VP__Parse_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;{
<anchor xml:id="_VP__Parse_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;output;
<anchor xml:id="_VP__Parse_8cpp_source_1l00058"/>00058 
<anchor xml:id="_VP__Parse_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;std::string,&#32;std::string&gt;&#32;conf;
<anchor xml:id="_VP__Parse_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;file(this-&gt;<link linkend="_classvp_1_1Parser_1a0dba0d4012b3aa1ad16d58a89c1597ce">fpath</link>);
<anchor xml:id="_VP__Parse_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="_VP__Parse_8cpp_source_1l00062"/>00062 
<anchor xml:id="_VP__Parse_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ssize_t&#32;lineNum&#32;=&#32;0;
<anchor xml:id="_VP__Parse_8cpp_source_1l00064"/>00064 
<anchor xml:id="_VP__Parse_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(file,&#32;line))
<anchor xml:id="_VP__Parse_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_VP__Parse_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineNum++;
<anchor xml:id="_VP__Parse_8cpp_source_1l00068"/>00068 
<anchor xml:id="_VP__Parse_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;if&#32;comment&#32;or&#32;empty&#32;line</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.empty()&#32;||&#32;line[0]&#32;==&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00071"/>00071 
<anchor xml:id="_VP__Parse_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istringstream&#32;iss(line);
<anchor xml:id="_VP__Parse_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;key,&#32;val;
<anchor xml:id="_VP__Parse_8cpp_source_1l00074"/>00074 
<anchor xml:id="_VP__Parse_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::getline(iss,&#32;key,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>)&#32;&amp;&amp;&#32;std::getline(iss,&#32;val))
<anchor xml:id="_VP__Parse_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_VP__Parse_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.erase(0,&#32;key.find_first_not_of(<emphasis role="stringliteral">&quot;&#32;\t&quot;</emphasis>));
<anchor xml:id="_VP__Parse_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.erase(key.find_last_not_of(<emphasis role="stringliteral">&quot;&#32;\t&quot;</emphasis>)&#32;+&#32;1);
<anchor xml:id="_VP__Parse_8cpp_source_1l00079"/>00079 
<anchor xml:id="_VP__Parse_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val.erase(0,&#32;val.find_first_not_of(<emphasis role="stringliteral">&quot;&#32;\t&quot;</emphasis>));
<anchor xml:id="_VP__Parse_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val.erase(val.find_last_not_of(<emphasis role="stringliteral">&quot;&#32;\t&quot;</emphasis>)&#32;+&#32;1);
<anchor xml:id="_VP__Parse_8cpp_source_1l00082"/>00082 
<anchor xml:id="_VP__Parse_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(conf.find(key)&#32;!=&#32;conf.end())
<anchor xml:id="_VP__Parse_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_VP__Parse_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output.emplace_back(std::string(<emphasis role="stringliteral">&quot;ERR:&#32;LINE:&#32;&quot;</emphasis>&#32;+&#32;std::to_string(lineNum)));
<anchor xml:id="_VP__Parse_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output.emplace_back(<emphasis role="stringliteral">&quot;Duplicate&#32;member&#32;:&#32;&quot;</emphasis>&#32;+&#32;line);
<anchor xml:id="_VP__Parse_8cpp_source_1l00087"/>00087 
<anchor xml:id="_VP__Parse_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;conf,&#32;output,&#32;<emphasis role="keyword">false</emphasis>&#32;};
<anchor xml:id="_VP__Parse_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00090"/>00090 
<anchor xml:id="_VP__Parse_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conf[key]&#32;=&#32;val;
<anchor xml:id="_VP__Parse_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00093"/>00093 
<anchor xml:id="_VP__Parse_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_VP__Parse_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output.emplace_back(std::string(<emphasis role="stringliteral">&quot;ERR:&#32;LINE:&#32;&quot;</emphasis>&#32;+&#32;std::to_string(lineNum)));
<anchor xml:id="_VP__Parse_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output.emplace_back(std::string(<emphasis role="stringliteral">&quot;No&#32;equality&#32;operator&#32;to&#32;set&#32;value&#32;for&#32;`&quot;</emphasis>&#32;+&#32;line&#32;+&#32;<emphasis role="stringliteral">&quot;`&quot;</emphasis>));
<anchor xml:id="_VP__Parse_8cpp_source_1l00098"/>00098 
<anchor xml:id="_VP__Parse_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;conf,&#32;output,&#32;<emphasis role="keyword">false</emphasis>&#32;};
<anchor xml:id="_VP__Parse_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00102"/>00102 
<anchor xml:id="_VP__Parse_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;conf,&#32;output,&#32;<emphasis role="keyword">true</emphasis>&#32;};
<anchor xml:id="_VP__Parse_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00105"/>00105 
<anchor xml:id="_VP__Parse_8cpp_source_1l00106"/><link linkend="_classvp_1_1Parser_1a4dd4f68395787602c1536fb695081087">00106</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classvp_1_1Parser_1a4dd4f68395787602c1536fb695081087">Parser::getVal</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;_key)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00107"/>00107 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
<anchor xml:id="_VP__Parse_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classvp_1_1Parser_1ab1ce18785fdc3d4014af72c8892a5456">parseRet</link>.config.find(_key)&#32;!=&#32;this-&gt;parseRet.config.end())
<anchor xml:id="_VP__Parse_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classvp_1_1Parser_1ab1ce18785fdc3d4014af72c8892a5456">parseRet</link>.config.at(_key);
<anchor xml:id="_VP__Parse_8cpp_source_1l00110"/>00110 
<anchor xml:id="_VP__Parse_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_VP__Parse_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00113"/>00113 
<anchor xml:id="_VP__Parse_8cpp_source_1l00114"/><link linkend="_classvp_1_1Parser_1a27ffd0fb917c5adbefcfce4ebf001033">00114</link> &#32;&#32;&#32;&#32;<link linkend="_structvp_1_1ParserStatus">ParserStatus</link>&#32;<link linkend="_classvp_1_1Parser_1a27ffd0fb917c5adbefcfce4ebf001033">Parser::checkStatus</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00115"/>00115 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classvp_1_1Parser_1ada8181e33a36ab0da77b9c8785ca9c8f">status</link>;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00116"/>00116 
<anchor xml:id="_VP__Parse_8cpp_source_1l00117"/><link linkend="_classvp_1_1Parser_1ad5246aed9edc845750b0207198f851b1">00117</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classvp_1_1Parser_1ad5246aed9edc845750b0207198f851b1">Parser::getID</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_VP__Parse_8cpp_source_1l00118"/>00118 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classvp_1_1Parser_1a984f4a6ce9f5578af0edd6878b1f583b">id</link>;&#32;}
<anchor xml:id="_VP__Parse_8cpp_source_1l00119"/>00119 }
</programlisting></section>
