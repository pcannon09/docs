.TH "inc/ciof/ciof.hpp" 3 "Version v1.0.0-build" "CIOF" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/ciof/ciof.hpp
.SH SYNOPSIS
.br
.PP
\fR#include 'CIOFpredefines\&.hpp'\fP
.br
\fR#include <string>\fP
.br
\fR#include 'ciof\&.ipp'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBciof::CIOFOutputConfig\fP"
.br
.RI "Set output configuration for \fBciof::impl::__out()\fP function and its wrappers\&. "
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBciof\fP"
.br
.ti -1c
.RI "namespace \fBciof::impl\fP"
.br
.RI "Implementation functions\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__CIOF_OK\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct ciof::CIOFOutputConfig \fBciof::CIOFOutputConfig\fP"
.br
.RI "Set output configuration for \fBciof::impl::__out()\fP function and its wrappers\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum class \fBciof::OutputStyle\fP { \fBciof::Bold\fP, \fBciof::Italic\fP, \fBciof::Underline\fP, \fBciof::Strikethrough\fP }"
.br
.RI "Set output style: Bold Italic Underline Strikethrough\&. "
.ti -1c
.RI "enum class \fBciof::OutputType\fP { \fBciof::Out\fP, \fBciof::Err\fP, \fBciof::Log\fP }"
.br
.RI "Set output type for \fBciof::impl::__out()\fP function and its helper functions Out : To Standard Output Err : To Standard Error Log : To Standard Log (Error, unbuffered) "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T> void \fBciof::impl::__out\fP (const \fBOutputType\fP &_outType, T _t)"
.br
.RI "Output the with its corresponding type either to: "
.ti -1c
.RI "template<typename T, typename \&.\&.\&. Args> void \fBciof::impl::__out\fP (const \fBOutputType\fP &_outType, T _t, Args \&.\&.\&. _args)"
.br
.RI "Output the with its corresponding type either to: "
.ti -1c
.RI "std::string \fBciof::colorSet\fP (int _color)"
.br
.RI "Set the colors from the default color palette from the terminal\&. "
.ti -1c
.RI "template<typename T> void \fBciof::echo\fP (T _t)"
.br
.RI "Echo to the standard output for \fR_t\fP "
.ti -1c
.RI "template<typename T, typename \&.\&.\&. Args> void \fBciof::echo\fP (T _t, Args \&.\&.\&. _args)"
.br
.RI "Echo to the standard output for \fR_t\fP "
.ti -1c
.RI "template<typename T> void \fBciof::echoError\fP (T _t)"
.br
.RI "Echo to the standard error for \fR_t\fP "
.ti -1c
.RI "template<typename T, typename \&.\&.\&. Args> void \fBciof::echoError\fP (T _t, Args \&.\&.\&. _args)"
.br
.RI "Echo to the standard log for \fR_t\fP "
.ti -1c
.RI "template<typename T> void \fBciof::echoLog\fP (T _t)"
.br
.RI "Echo to the standard log for \fR_t\fP "
.ti -1c
.RI "template<typename T, typename \&.\&.\&. Args> void \fBciof::echoLog\fP (T _t, Args \&.\&.\&. _args)"
.br
.RI "Echo to the standard log for \fR_t\fP "
.ti -1c
.RI "template<typename T, typename \&.\&.\&. Args> std::string \fBciof::format\fP (T _t, Args \&.\&.\&. _args)"
.br
.RI "Get everything as a string format\&. "
.ti -1c
.RI "void \fBciof::initANSI\fP ()"
.br
.RI "Initialize ANSI text option in Windows 10 or later NOTE: ONLY WORKS IN WINDOWS 10 OR LATER\&. "
.ti -1c
.RI "template<typename T> void \fBciof::input\fP (const std::string &_prompt, T *_var)"
.br
.RI "Get full input from the user with a prompt\&. "
.ti -1c
.RI "template<typename T> void \fBciof::input\fP (T *_var)"
.br
.RI "Get full input from the user\&. "
.ti -1c
.RI "template<typename T, typename \&.\&.\&. Args> std::string \fBciof::impl::parse\fP (T _fmt, Args \&.\&.\&. _args)"
.br
.RI "Parse the params for printing and echoing\&. "
.ti -1c
.RI "void \fBciof::print\fP ()"
.br
.RI "Print a new line\&. "
.ti -1c
.RI "template<typename T> void \fBciof::print\fP (T _t)"
.br
.RI "Print to the standard output for \fR_t\fP "
.ti -1c
.RI "template<typename T, typename \&.\&.\&. Args> void \fBciof::print\fP (T _t, Args \&.\&.\&. _args)"
.br
.RI "Print to the standard output for \fR_t\fP "
.ti -1c
.RI "template<typename T> void \fBciof::printError\fP (T _t)"
.br
.RI "Print to the standard error for \fR_t\fP "
.ti -1c
.RI "template<typename T, typename \&.\&.\&. Args> void \fBciof::printError\fP (T _t, Args \&.\&.\&. _args)"
.br
.RI "Print to the standard error for \fR_t\fP "
.ti -1c
.RI "template<typename T> void \fBciof::printLog\fP (T _t)"
.br
.RI "Print to the standard log for \fR_t\fP "
.ti -1c
.RI "template<typename T, typename \&.\&.\&. Args> void \fBciof::printLog\fP (T _t, Args \&.\&.\&. _args)"
.br
.RI "Print to the standard log for \fR_t\fP "
.ti -1c
.RI "std::string \fBciof::rgbSet\fP (unsigned int r, unsigned int g, unsigned int b)"
.br
.RI "Set the RGB color in the terminal\&. "
.ti -1c
.RI "std::string \fBciof::styleReset\fP ()"
.br
.RI "Reset all the styles and colors in the terminal\&. "
.ti -1c
.RI "std::string \fBciof::styleSet\fP (const \fBOutputStyle\fP &_style)"
.br
.RI "Set the styles according to the \fR\fBOutputStyle\fP\fP type\&. "
.ti -1c
.RI "template<typename T> std::string \fBciof::impl::toString\fP (const T &_val)"
.br
.RI "Convert to string safely\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBCIOFOutputConfig\fP \fBciof::outputConf\fP"
.br
.RI "Set default output configuration\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __CIOF_OK"

.PP
Definition at line \fB7\fP of file \fBciof\&.hpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CIOF from the source code\&.
