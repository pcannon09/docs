{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\info 
{\title {\comment Argx  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0.2-build \par
}}Argx}
{\comment Generated by doxygen 1.13.2.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Argx}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1.0.2-build\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
ARGX-C - 1.0.2-build\par \pard\plain 
{\tc\tcl1 \v ARGX-C - 1.0.2-build}
{\xe \v ARGX-C - 1.0.2-build}
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C Argument parser
\par}
{\tc\tcl2 \v C Argument parser}
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Made by: pcannon09
\par}
{\tc\tcl3 \v Made by: pcannon09}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\par}
\par}
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Requirements
\par}
{\tc\tcl2 \v Requirements}
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Compiler and C Standard Support
\par}
{\tc\tcl3 \v Compiler and C Standard Support}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{Argx Version   \cell }{Minimum C Standard   \cell }{GCC   \cell }{Clang   \cell }{MSVC    \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{1.0.2-build   \cell }{C99   \cell }{GCC 3.0+   \cell }{Clang 2.6+   \cell }{MSVC 2013+ (VC12)   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Specific information
\par}
{\tc\tcl3 \v Specific information}
{\b NOTE: For version 1.0.2-build} {
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
GCC has supported C99 since version 3.0 (with nearly full support from 4.5+).\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Clang has full C99 support from 2.6 onward.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
MSVC has full support with MSVC 2013 (VC12)\par}
\par
\par}
\par}
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IMPORTANT NOTES
\par}
{\tc\tcl2 \v IMPORTANT NOTES}
{\b This library has been tested in Arch Linux, please open an issue if you encounter a problem with other Operating Systems}  {\b Tested with Clang 19}  {\b If you encounter any other issues with other compilers, open an issue in github} \par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
For more information, please check the documentation at {\b {\f2 https://pcannon09.github.io/docs/pages/libs/argx/html/index.html}} \par}
\par
{\b NOTE: Based on the original Argx at {\f2 https://www.github.com/pcannon09/argx}}  \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Data Structure Index\par \pard\plain 
{\tc \v Data Structure Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Data Structures\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the data structures with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Argxc} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ArgxcError} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ArgxcErrorPair} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ArgxcOptions} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ArgxcParam} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b inc/{\b Argx.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b ARGXAddError.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b macros.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b types.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b Argx.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b ARGXAddError.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Data Structure Documentation{\tc \v Data Structure Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Argxc Struct Reference\par \pard\plain 
{\tc\tcl2 \v Argxc}
{\xe \v Argxc}
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Fields\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b id}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\b mainArgc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b mainArgs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b mainArgsCount}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcOptions} * {\b options}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b optionsCapacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b optionsCount}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 15} of file {\b Argx.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Field Documentation\par
\pard\plain 
{\xe \v id\:Argxc}
{\xe \v Argxc\:id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* Argxc::id}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 16} of file {\b Argx.c}.}\par
{
\ql
Referenced by {\b argxcCreate()}, {\b argxcCreateDefault()}, {\b argxcDestroy()}, and {\b argxcGetId()}.}\par
}
{\xe \v mainArgc\:Argxc}
{\xe \v Argxc\:mainArgc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int Argxc::mainArgc}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b Argx.c}.}\par
{
\ql
Referenced by {\b argxcCreate()}, {\b argxcCreateDefault()}, {\b argxcGetArgc()}, and {\b argxcGetParam()}.}\par
}
{\xe \v mainArgs\:Argxc}
{\xe \v Argxc\:mainArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char** Argxc::mainArgs}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b Argx.c}.}\par
{
\ql
Referenced by {\b argxcCreate()}, {\b argxcCreateDefault()}, {\b argxcDestroy()}, {\b argxcFindParam()}, {\b argxcGetMainArgs()}, and {\b argxcGetParam()}.}\par
}
{\xe \v mainArgsCount\:Argxc}
{\xe \v Argxc\:mainArgsCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Argxc::mainArgsCount}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 18} of file {\b Argx.c}.}\par
{
\ql
Referenced by {\b argxcCreate()}, {\b argxcCreateDefault()}, {\b argxcDestroy()}, {\b argxcFindParam()}, {\b argxcGetMainArgs()}, and {\b argxcGetParam()}.}\par
}
{\xe \v options\:Argxc}
{\xe \v Argxc\:options}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcOptions}* Argxc::options}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b Argx.c}.}\par
{
\ql
Referenced by {\b argxcAddOption()}, {\b argxcCreate()}, {\b argxcCreateDefault()}, {\b argxcCreateDocs()}, {\b argxcDestroy()}, {\b argxcFindParam()}, {\b argxcGetOptions()}, and {\b argxcGetParam()}.}\par
}
{\xe \v optionsCapacity\:Argxc}
{\xe \v Argxc\:optionsCapacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Argxc::optionsCapacity}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 22} of file {\b Argx.c}.}\par
{
\ql
Referenced by {\b argxcAddOption()}, {\b argxcCreate()}, and {\b argxcCreateDefault()}.}\par
}
{\xe \v optionsCount\:Argxc}
{\xe \v Argxc\:optionsCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t Argxc::optionsCount}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b Argx.c}.}\par
{
\ql
Referenced by {\b argxcAddOption()}, {\b argxcCreate()}, {\b argxcCreateDefault()}, {\b argxcCreateDocs()}, {\b argxcDestroy()}, {\b argxcFindParam()}, {\b argxcGetOptions()}, and {\b argxcGetParam()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b Argx.c}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ArgxcError Struct Reference\par \pard\plain 
{\tc\tcl2 \v ArgxcError}
{\xe \v ArgxcError}
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
\par
{
{\f2 #include <types.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Fields\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b code}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b error}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b help}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b type}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 15} of file {\b types.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Field Documentation\par
\pard\plain 
{\xe \v code\:ArgxcError}
{\xe \v ArgxcError\:code}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ArgxcError::code}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCreateError()}, {\b argxcCreateErrorSimple()}, and {\b argxcGetErrorCode()}.}\par
}
{\xe \v error\:ArgxcError}
{\xe \v ArgxcError\:error}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* ArgxcError::error}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCreateError()}, {\b argxcCreateErrorSimple()}, {\b argxcFreeError()}, {\b argxcGetErrorMessage()}, and {\b argxcGetErrorPair()}.}\par
}
{\xe \v help\:ArgxcError}
{\xe \v ArgxcError\:help}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* ArgxcError::help}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 18} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCreateError()}, {\b argxcCreateErrorSimple()}, {\b argxcFreeError()}, {\b argxcGetErrorHelp()}, and {\b argxcGetErrorPair()}.}\par
}
{\xe \v type\:ArgxcError}
{\xe \v ArgxcError\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* ArgxcError::type}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 16} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCreateError()}, {\b argxcCreateErrorSimple()}, and {\b argxcFreeError()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b types.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ArgxcErrorPair Struct Reference\par \pard\plain 
{\tc\tcl2 \v ArgxcErrorPair}
{\xe \v ArgxcErrorPair}
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
\par
{
{\f2 #include <ARGXAddError.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Fields\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b error}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b help}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 15} of file {\b ARGXAddError.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Field Documentation\par
\pard\plain 
{\xe \v error\:ArgxcErrorPair}
{\xe \v ArgxcErrorPair\:error}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* ArgxcErrorPair::error}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 16} of file {\b ARGXAddError.h}.}\par
{
\ql
Referenced by {\b argxcGetErrorPair()}.}\par
}
{\xe \v help\:ArgxcErrorPair}
{\xe \v ArgxcErrorPair\:help}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* ArgxcErrorPair::help}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b ARGXAddError.h}.}\par
{
\ql
Referenced by {\b argxcGetErrorPair()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b ARGXAddError.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ArgxcOptions Struct Reference\par \pard\plain 
{\tc\tcl2 \v ArgxcOptions}
{\xe \v ArgxcOptions}
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
\par
{
{\f2 #include <types.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Fields\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b hasAnySubParams}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b hasSubParams}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b id}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b info}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b param}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b sparam}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ArgxcOptions} * {\b subParams}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b subParamsCapacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b subParamsCount}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 25} of file {\b types.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Field Documentation\par
\pard\plain 
{\xe \v hasAnySubParams\:ArgxcOptions}
{\xe \v ArgxcOptions\:hasAnySubParams}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ArgxcOptions::hasAnySubParams}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCompareArgs()}, {\b argxcCreateOption()}, and {\b argxcGetParam()}.}\par
}
{\xe \v hasSubParams\:ArgxcOptions}
{\xe \v ArgxcOptions\:hasSubParams}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ArgxcOptions::hasSubParams}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 30} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCompareArgs()}, {\b argxcCreateDocs()}, {\b argxcCreateOption()}, and {\b argxcGetParam()}.}\par
}
{\xe \v id\:ArgxcOptions}
{\xe \v ArgxcOptions\:id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* ArgxcOptions::id}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 26} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCreateDocs()}, {\b argxcCreateOption()}, {\b argxcFindParam()}, {\b argxcFreeOption()}, and {\b argxcGetParam()}.}\par
}
{\xe \v info\:ArgxcOptions}
{\xe \v ArgxcOptions\:info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* ArgxcOptions::info}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 29} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCreateDocs()}, {\b argxcCreateOption()}, and {\b argxcFreeOption()}.}\par
}
{\xe \v param\:ArgxcOptions}
{\xe \v ArgxcOptions\:param}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* ArgxcOptions::param}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 27} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCompareArgs()}, {\b argxcCreateDocs()}, {\b argxcCreateOption()}, {\b argxcFindParam()}, {\b argxcFreeOption()}, and {\b argxcGetParam()}.}\par
}
{\xe \v sparam\:ArgxcOptions}
{\xe \v ArgxcOptions\:sparam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* ArgxcOptions::sparam}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcCompareArgs()}, {\b argxcCreateDocs()}, {\b argxcCreateOption()}, {\b argxcFindParam()}, {\b argxcFreeOption()}, and {\b argxcGetParam()}.}\par
}
{\xe \v subParams\:ArgxcOptions}
{\xe \v ArgxcOptions\:subParams}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\b ArgxcOptions}* ArgxcOptions::subParams}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcAddSubOption()}, {\b argxcCompareArgs()}, {\b argxcCreateDocs()}, {\b argxcCreateOption()}, {\b argxcFindParam()}, {\b argxcFreeOption()}, and {\b argxcGetParam()}.}\par
}
{\xe \v subParamsCapacity\:ArgxcOptions}
{\xe \v ArgxcOptions\:subParamsCapacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t ArgxcOptions::subParamsCapacity}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 34} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcAddSubOption()}, and {\b argxcFreeOption()}.}\par
}
{\xe \v subParamsCount\:ArgxcOptions}
{\xe \v ArgxcOptions\:subParamsCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t ArgxcOptions::subParamsCount}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 33} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcAddSubOption()}, {\b argxcCompareArgs()}, {\b argxcCreateDocs()}, {\b argxcCreateOption()}, {\b argxcFindParam()}, {\b argxcFreeOption()}, and {\b argxcGetParam()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b types.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ArgxcParam Struct Reference\par \pard\plain 
{\tc\tcl2 \v ArgxcParam}
{\xe \v ArgxcParam}
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
\par
{
{\f2 #include <types.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Fields\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b exists}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool * {\b subExists}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b subExistsCount}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 37} of file {\b types.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Field Documentation\par
\pard\plain 
{\xe \v exists\:ArgxcParam}
{\xe \v ArgxcParam\:exists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ArgxcParam::exists}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 38} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcGetParam()}.}\par
}
{\xe \v subExists\:ArgxcParam}
{\xe \v ArgxcParam\:subExists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool* ArgxcParam::subExists}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 39} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcFreeParam()}, {\b argxcGetParam()}, and {\b argxcGetSubParam()}.}\par
}
{\xe \v subExistsCount\:ArgxcParam}
{\xe \v ArgxcParam\:subExistsCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t ArgxcParam::subExistsCount}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b types.h}.}\par
{
\ql
Referenced by {\b argxcGetParam()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b types.h}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/Argx.h File Reference\par \pard\plain 
{\tc\tcl2 \v inc/Argx.h}
{\xe \v inc/Argx.h}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdbool.h>}\par
{\f2 #include "types.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcAddOption} ({\b Argxc} *argxc, {\b ArgxcOptions} option)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a new option to the {\b Argxc} instance. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcAddSubOption} ({\b ArgxcOptions} *parent, {\b ArgxcOptions} subOption)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a sub-option to a parent option. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b argxcCompareArgs} ({\b ArgxcOptions} *options, size_t optionsCount, char **argv, size_t argvCount)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare if the given argv matches a list of {\b ArgxcOptions}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Argxc} * {\b argxcCreate} (const char *id, int argc, char *argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new {\b Argxc} instance with a specified ID and command-line arguments. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Argxc} * {\b argxcCreateDefault} (void)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new {\b Argxc} instance with default values (empty ID and no arguments). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b argxcCreateDocs} ({\b Argxc} *argxc, {\b ArgxcStyle} style, const char *title, const char *mainInfo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generate documentation for the defined options. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcError} {\b argxcCreateError} (const char *type, const char *error, const char *help, int code)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create an {\b ArgxcError} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcOptions} {\b argxcCreateOption} (const char *id, const char *param, const char *sparam, const char *info, bool hasSubParams, bool hasAnySubParams)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new option. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcDestroy} ({\b Argxc} *argxc)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destroy an {\b Argxc} instance and free all associated memory. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b argxcFindParam} ({\b Argxc} *argxc, const char *id)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Find the index of a parameter by ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcFreeError} ({\b ArgxcError} *error)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcError} struct. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcFreeOption} ({\b ArgxcOptions} *option)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcOptions} struct. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcFreeParam} ({\b ArgxcParam} *param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcParam} struct. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcFreeStringArray} (char **array, size_t count)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free a string array returned from {\b Argxc} (e.g., argv array). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b argxcGetArgc} ({\b Argxc} *argxc)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the number of command-line arguments passed. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b argxcGetId} ({\b Argxc} *argxc)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the identifier of the {\b Argxc} instance. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b argxcGetMainArgs} ({\b Argxc} *argxc, size_t *count)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the raw command-line arguments passed to {\b Argxc}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcOptions} * {\b argxcGetOptions} ({\b Argxc} *argxc, size_t *count)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get all top-level options defined for the {\b Argxc} instance. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcParam} {\b argxcGetParam} ({\b Argxc} *argxc, const char *id)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieve a parameter by ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b argxcGetSubParam} ({\b Argxc} *argxc, const {\b ArgxcParam} *param, const char *id)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieve a sub-parameter from a given parameter by ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b argxcParamExists} ({\b Argxc} *argxc, const char *id)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if a parameter with the given ID exists. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v argxcAddOption\:Argx.h}
{\xe \v Argx.h\:argxcAddOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcAddOption ({\b Argxc} * argxc, {\b ArgxcOptions} option)}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a new option to the {\b Argxc} instance. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i option} \cell }{The option to add. \cell }
{\row }
}
}{
Definition at line {\b 124} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00125 \{\par
00126     {\cf19 if} (!argxc) {\cf19 return};\par
00127 \par
00128     {\cf19 if} (argxc->optionsCount >= argxc->optionsCapacity)\par
00129     \{\par
00130         argxc->optionsCapacity *= 2;\par
00131         argxc->options = realloc(argxc->options, argxc->optionsCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00132         {\cf19 if} (!argxc->options) {\cf19 return};\par
00133     \}\par
00134 \par
00135     argxc->options[argxc->optionsCount++] = option;\par
00136 \}\par
}
{
\ql
References {\b Argxc::options}, {\b Argxc::optionsCapacity}, and {\b Argxc::optionsCount}.}\par
}
{\xe \v argxcAddSubOption\:Argx.h}
{\xe \v Argx.h\:argxcAddSubOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcAddSubOption ({\b ArgxcOptions} * parent, {\b ArgxcOptions} subOption)}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a sub-option to a parent option. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i parent} \cell }{Pointer to the parent option. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i subOption} \cell }{Sub-option to add under the parent. \cell }
{\row }
}
}{
Definition at line {\b 138} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00139 \{\par
00140     {\cf19 if} (!parent) {\cf19 return};\par
00141 \par
00142     {\cf19 if} (parent->subParamsCount >= parent->subParamsCapacity)\par
00143     \{\par
00144         {\cf18 size_t} newCapacity = parent->subParamsCapacity == 0 ? 2 : parent->subParamsCapacity * 2;\par
00145         ArgxcOptions *newSubParams = realloc(parent->subParams, newCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00146         {\cf19 if} (!newSubParams) {\cf19 return};\par
00147 \par
00148         parent->subParams = newSubParams;\par
00149         parent->subParamsCapacity = newCapacity;\par
00150     \}\par
00151 \par
00152     parent->subParams[parent->subParamsCount++] = subOption;\par
00153 \}\par
}
{
\ql
References {\b ArgxcOptions::subParams}, {\b ArgxcOptions::subParamsCapacity}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcCompareArgs\:Argx.h}
{\xe \v Argx.h\:argxcCompareArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argxcCompareArgs ({\b ArgxcOptions} * options, size_t optionsCount, char ** argv, size_t argvCount)}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare if the given argv matches a list of {\b ArgxcOptions}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i options} \cell }{Array of {\b ArgxcOptions}. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i optionsCount} \cell }{Number of options. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{Array of argument strings. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argvCount} \cell }{Number of argument strings. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if argv matches the options, false otherwise. \par
}}}{
Definition at line {\b 499} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00500 \{\par
00501     {\cf19 if} (!options || !argv) {\cf19 return} {\cf17 false};\par
00502 \par
00503     {\cf19 for} ({\cf18 size_t} i = 1; i < argvCount; i++)\par
00504     \{\par
00505         {\cf17 const} {\cf18 char} *arg = argv[i];\par
00506 \par
00507         {\cf18 bool} found = {\cf17 false};\par
00508         {\cf18 bool} hasSubParams = {\cf17 false};\par
00509         {\cf18 bool} hasAnySubParams = {\cf17 false};\par
00510         ArgxcOptions *matchedOption = NULL;\par
00511 \par
00512         {\cf20 // Find the matching option}\par
00513         {\cf19 for} ({\cf18 size_t} j = 0; j < optionsCount; j++)\par
00514         \{\par
00515             {\cf19 if} ((options[j].sparam && strcmp(options[j].sparam, arg) == 0) ||\par
00516                     (options[j].param && strcmp(options[j].param, arg) == 0))\par
00517             \{\par
00518                 found = {\cf17 true};\par
00519                 hasSubParams = options[j].hasSubParams;\par
00520                 hasAnySubParams = options[j].hasAnySubParams;\par
00521                 matchedOption = &options[j];\par
00522                 {\cf19 break};\par
00523             \}\par
00524         \}\par
00525 \par
00526         {\cf19 if} (!found) {\cf19 return} {\cf17 false};\par
00527 \par
00528         {\cf19 if} (hasSubParams || hasAnySubParams)\par
00529         \{\par
00530             {\cf20 // Check if there's a next argument}\par
00531             {\cf19 if} (i + 1 < argvCount)\par
00532             \{\par
00533                 {\cf17 const} {\cf18 char} *nextArg = argv[i + 1];\par
00534 \par
00535                 {\cf20 // Check if next argument is a sub-parameter}\par
00536                 {\cf18 bool} isSubParam = {\cf17 false};\par
00537 \par
00538                 {\cf19 if} (nextArg && strlen(nextArg) > 0 && nextArg[0] != {\cf23 '-'})\par
00539                 \{\par
00540                     {\cf20 // Validate if it's a valid sub-parameter}\par
00541                     {\cf19 for} ({\cf18 size_t} k = 0; k < matchedOption->subParamsCount; k++)\par
00542                     \{\par
00543                         {\cf19 if} ((matchedOption->subParams[k].param && strcmp(matchedOption->subParams[k].param, nextArg) == 0) ||\par
00544                                 (matchedOption->subParams[k].sparam && strcmp(matchedOption->subParams[k].sparam, nextArg) == 0))\par
00545                         \{\par
00546                             isSubParam = {\cf17 true};\par
00547                             {\cf19 break};\par
00548                         \}\par
00549                     \}\par
00550 \par
00551                     {\cf19 if} (isSubParam)\par
00552                     \{\par
00553                         i++; {\cf20 // Skip the sub-parameter}\par
00554                     \} {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams)\par
00555                     \{\par
00556                         {\cf19 return} {\cf17 false};\par
00557                     \}\par
00558                 \} {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams)\par
00559                 \{\par
00560                     {\cf19 return} {\cf17 false};\par
00561                 \}\par
00562             \}\par
00563         \}\par
00564     \}\par
00565 \par
00566     {\cf19 return} {\cf17 true};\par
00567 \}\par
}
{
\ql
References {\b ArgxcOptions::hasAnySubParams}, {\b ArgxcOptions::hasSubParams}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcCreate\:Argx.h}
{\xe \v Argx.h\:argxcCreate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Argxc} * argxcCreate (const char * id, int argc, char * argv[])}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new {\b Argxc} instance with a specified ID and command-line arguments. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Identifier for the parser instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{Number of command-line arguments. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{Array of command-line argument strings. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Argxc* Pointer to the created {\b Argxc} instance. \par
}}}{
Definition at line {\b 64} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00065 \{\par
00066     Argxc *argxc = malloc({\cf17 sizeof}(Argxc));\par
00067     {\cf19 if} (!argxc) {\cf19 return} NULL;\par
00068 \par
00069     argxc->id = stringDuplicate({\cf18 id});\par
00070     argxc->mainArgc = argc;\par
00071     argxc->mainArgsCount = argc;\par
00072     argxc->mainArgs = malloc(argc * {\cf17 sizeof}({\cf18 char}*));\par
00073     argxc->optionsCount = 0;\par
00074     argxc->optionsCapacity = 10;\par
00075     argxc->options = malloc(argxc->optionsCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00076 \par
00077     {\cf19 if} (!argxc->mainArgs || !argxc->options)\par
00078     \{\par
00079         argxcDestroy(argxc);\par
00080         {\cf19 return} NULL;\par
00081     \}\par
00082 \par
00083     {\cf19 for} ({\cf18 int} i = 0; i < argc; i++)\par
00084     \{\par
00085         argxc->mainArgs[i] = stringDuplicate(argv[i]);\par
00086     \}\par
00087 \par
00088     {\cf19 return} argxc;\par
00089 \}\par
}
{
\ql
References {\b argxcDestroy()}, {\b Argxc::id}, {\b Argxc::mainArgc}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, {\b Argxc::optionsCapacity}, {\b Argxc::optionsCount}, and {\b stringDuplicate()}.}\par
}
{\xe \v argxcCreateDefault\:Argx.h}
{\xe \v Argx.h\:argxcCreateDefault}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Argxc} * argxcCreateDefault (void )}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new {\b Argxc} instance with default values (empty ID and no arguments). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Argxc* Pointer to the default {\b Argxc} instance. \par
}}}{
Definition at line {\b 91} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00092 \{\par
00093     Argxc *argxc = malloc({\cf17 sizeof}(Argxc));\par
00094     {\cf19 if} (!argxc) {\cf19 return} NULL;\par
00095 \par
00096     argxc->id = NULL;\par
00097     argxc->mainArgs = NULL;\par
00098     argxc->mainArgsCount = 0;\par
00099     argxc->mainArgc = 0;\par
00100     argxc->optionsCount = 0;\par
00101     argxc->optionsCapacity = 10;\par
00102     argxc->options = malloc(argxc->optionsCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00103 \par
00104     {\cf19 if} (!argxc->options)\par
00105     \{\par
00106         free(argxc); argxc = NULL;\par
00107         {\cf19 return} NULL;\par
00108     \}\par
00109 \par
00110     {\cf19 return} argxc;\par
00111 \}\par
}
{
\ql
References {\b Argxc::id}, {\b Argxc::mainArgc}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, {\b Argxc::optionsCapacity}, and {\b Argxc::optionsCount}.}\par
}
{\xe \v argxcCreateDocs\:Argx.h}
{\xe \v Argx.h\:argxcCreateDocs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * argxcCreateDocs ({\b Argxc} * argxc, {\b ArgxcStyle} style, const char * title, const char * mainInfo)}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generate documentation for the defined options. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i style} \cell }{Documentation output style. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i title} \cell }{Title of the documentation. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mainInfo} \cell }{Additional info to be displayed in the documentation. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
char* Documentation string (must be freed by caller). \par
}}}{
Definition at line {\b 375} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00376 \{\par
00377     {\cf19 if} (!argxc) {\cf19 return} NULL;\par
00378 \par
00379     {\cf18 size_t} bufferSize = 4096;\par
00380     {\cf18 char} *contentStr = malloc(bufferSize);\par
00381     {\cf19 if} (!contentStr) {\cf19 return} NULL;\par
00382 \par
00383     contentStr[0] = {\cf23 '\\0'};\par
00384 \par
00385     {\cf19 if} (style == ARGX_STYLE_PROFESSIONAL)\par
00386     \{\par
00387         {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00388         \{\par
00389             ArgxcOptions *opt = &argxc->options[i];\par
00390 \par
00391             {\cf20 // Main option header line}\par
00392             {\cf18 char} temp[512];\par
00393             snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "ID: %s\\n"}, opt->id ? opt->id : {\cf22 ""});\par
00394             strcat(contentStr, temp);\par
00395 \par
00396             snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "[ %s | %s"}, \par
00397                     opt->sparam ? opt->sparam : {\cf22 ""}, \par
00398                     opt->param ? opt->param : {\cf22 ""});\par
00399             strcat(contentStr, temp);\par
00400 \par
00401             {\cf19 if} (opt->hasSubParams && opt->subParamsCount > 0)\par
00402             \{\par
00403                 strcat(contentStr, {\cf22 " [ "});\par
00404 \par
00405                 {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00406                 \{\par
00407                     strcat(contentStr, opt->subParams[j].param ? opt->subParams[j].param : {\cf22 ""});\par
00408 \par
00409                     {\cf19 if} (j < opt->subParamsCount - 1)\par
00410                     \{\par
00411                         strcat(contentStr, {\cf22 " | "});\par
00412                     \} {\cf19 else} {\cf19 if} (j <= opt->subParamsCount)\par
00413                     \{\par
00414                         strcat(contentStr, {\cf22 " "});\par
00415                     \}\par
00416                 \}\par
00417 \par
00418                 strcat(contentStr, {\cf22 "] ] "});\par
00419             \} {\cf19 else} \{\par
00420                 strcat(contentStr, {\cf22 " ] "});\par
00421             \}\par
00422 \par
00423             strcat(contentStr, opt->info ? opt->info : {\cf22 ""});\par
00424             strcat(contentStr, {\cf22 "\\n"});\par
00425 \par
00426             {\cf20 // Print all sub-options}\par
00427             {\cf19 if} (opt->hasSubParams && opt->subParamsCount > 0)\par
00428             \{\par
00429                 {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00430                 \{\par
00431                     ArgxcOptions *sub = &opt->subParams[j];\par
00432 \par
00433                     {\cf20 // Create spacing for alignment}\par
00434                     {\cf18 size_t} paramLen = opt->param ? strlen(opt->param) : 0;\par
00435                     {\cf19 for} ({\cf18 size_t} k = 0; k < paramLen; k++)\par
00436                     \{\par
00437                         strcat(contentStr, {\cf22 " "});\par
00438                     \}\par
00439 \par
00440                     snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "  [ %s | %s ] %s\\n"},\par
00441                             sub->sparam ? sub->sparam : {\cf22 ""},\par
00442                             sub->param ? sub->param : {\cf22 ""},\par
00443                             sub->info ? sub->info : {\cf22 ""});\par
00444                     strcat(contentStr, temp);\par
00445                 \}\par
00446             \}\par
00447         \}\par
00448     \} {\cf19 else} {\cf19 if} (style == ARGX_STYLE_SIMPLE)\par
00449     \{\par
00450         {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00451         \{\par
00452             ArgxcOptions *opt = &argxc->options[i];\par
00453 \par
00454             {\cf18 char} temp[256];\par
00455             snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "%s, %s - %s\\n"},\par
00456                     opt->sparam ? opt->sparam : {\cf22 ""},\par
00457                     opt->param ? opt->param : {\cf22 ""},\par
00458                     opt->info ? opt->info : {\cf22 ""});\par
00459             strcat(contentStr, temp);\par
00460 \par
00461             {\cf19 if} (opt->hasSubParams && opt->subParamsCount > 0)\par
00462             \{\par
00463                 {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00464                 \{\par
00465                     ArgxcOptions *sub = &opt->subParams[j];\par
00466 \par
00467                     snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "  %s, %s - %s\\n"},\par
00468                             sub->sparam ? sub->sparam : {\cf22 ""},\par
00469                             sub->param ? sub->param : {\cf22 ""},\par
00470                             sub->info ? sub->info : {\cf22 ""});\par
00471                     strcat(contentStr, temp);\par
00472                 \}\par
00473             \}\par
00474         \}\par
00475     \}\par
00476 \par
00477     {\cf20 // Combine title, mainInfo, and content}\par
00478     {\cf18 size_t} titleLen = title ? strlen(title) : 0;\par
00479     {\cf18 size_t} mainInfoLen = mainInfo ? strlen(mainInfo) : 0;\par
00480     {\cf18 size_t} contentLen = strlen(contentStr);\par
00481     {\cf18 size_t} totalLen = titleLen + mainInfoLen + contentLen + 10; {\cf20 // Extra space for newlines}\par
00482 \par
00483     {\cf18 char} *result = malloc(totalLen);\par
00484     {\cf19 if} (!result)\par
00485     \{\par
00486         free(contentStr); contentStr = NULL;\par
00487         {\cf19 return} NULL;\par
00488     \}\par
00489 \par
00490     snprintf(result, totalLen, {\cf22 "%s\\n%s\\n%s"},\par
00491             title ? title : {\cf22 ""},\par
00492             mainInfo ? mainInfo : {\cf22 ""},\par
00493             contentStr);\par
00494 \par
00495     free(contentStr); contentStr = NULL;\par
00496     {\cf19 return} result;\par
00497 \}\par
}
{
\ql
References {\b ARGX_STYLE_PROFESSIONAL}, {\b ARGX_STYLE_SIMPLE}, {\b ArgxcOptions::hasSubParams}, {\b ArgxcOptions::id}, {\b ArgxcOptions::info}, {\b Argxc::options}, {\b Argxc::optionsCount}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcCreateError\:Argx.h}
{\xe \v Argx.h\:argxcCreateError}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcError} argxcCreateError (const char * type, const char * error, const char * help, int code)}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create an {\b ArgxcError} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Type/category of the error. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i error} \cell }{Error message. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i help} \cell }{Help message for resolving the error. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i code} \cell }{Exit code or error code. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b ArgxcError} The created error struct. \par
}}}{
Definition at line {\b 667} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00668 \{\par
00669     ArgxcError err = \{0\};\par
00670 \par
00671     err.type = stringDuplicate(type);\par
00672     err.error = stringDuplicate(error);\par
00673     err.help = stringDuplicate(help);\par
00674     err.code = code;\par
00675 \par
00676     {\cf19 return} err;\par
00677 \}\par
}
{
\ql
References {\b ArgxcError::code}, {\b ArgxcError::error}, {\b ArgxcError::help}, {\b stringDuplicate()}, and {\b ArgxcError::type}.}\par
}
{\xe \v argxcCreateOption\:Argx.h}
{\xe \v Argx.h\:argxcCreateOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcOptions} argxcCreateOption (const char * id, const char * param, const char * sparam, const char * info, bool hasSubParams, bool hasAnySubParams)}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new option. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Option identifier. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i param} \cell }{Parameter name (e.g., \'96param). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sparam} \cell }{Short form (e.g., -p). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i info} \cell }{Description of the option. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hasSubParams} \cell }{Whether the option has sub-parameters. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hasAnySubParams} \cell }{Whether the option accepts any sub-parameters. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b ArgxcOptions} The created option. \par
}}}{
Definition at line {\b 607} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00609 \{\par
00610     ArgxcOptions option = \{0\};\par
00611 \par
00612     option.id = stringDuplicate({\cf18 id});\par
00613     option.param = stringDuplicate(param);\par
00614     option.sparam = stringDuplicate(sparam);\par
00615     option.info = stringDuplicate(info);\par
00616     option.hasSubParams = hasSubParams;\par
00617     option.hasAnySubParams = hasAnySubParams;\par
00618     option.subParams = NULL;\par
00619     option.subParamsCount = 0;\par
00620 \par
00621     {\cf19 return} option;\par
00622 \}\par
}
{
\ql
References {\b ArgxcOptions::hasAnySubParams}, {\b ArgxcOptions::hasSubParams}, {\b ArgxcOptions::id}, {\b ArgxcOptions::info}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b stringDuplicate()}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcDestroy\:Argx.h}
{\xe \v Argx.h\:argxcDestroy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcDestroy ({\b Argxc} * argxc)}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destroy an {\b Argxc} instance and free all associated memory. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance to destroy. \cell }
{\row }
}
}{
Definition at line {\b 113} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00114 \{\par
00115     {\cf19 if} (!argxc) {\cf19 return};\par
00116 \par
00117     free(argxc->id); argxc->id = NULL;\par
00118     {\cf19 if} (argxc->mainArgs) freeStringArray(argxc->mainArgs, argxc->mainArgsCount);\par
00119     {\cf19 if} (argxc->options) freeOptionsArray(argxc->options, argxc->optionsCount);\par
00120     free(argxc); argxc = NULL;\par
00121 \}\par
}
{
\ql
References {\b freeOptionsArray()}, {\b freeStringArray()}, {\b Argxc::id}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, and {\b Argxc::optionsCount}.}\par
{
\ql
Referenced by {\b argxcCreate()}.}\par
}
{\xe \v argxcFindParam\:Argx.h}
{\xe \v Argx.h\:argxcFindParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argxcFindParam ({\b Argxc} * argxc, const char * id)}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Find the index of a parameter by ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The identifier of the parameter to find. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Index of the parameter, or -1 if not found. \par
}}}{
Definition at line {\b 155} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00156 \{\par
00157     {\cf19 if} (!argxc || !{\cf18 id}) {\cf19 return} -1;\par
00158 \par
00159     {\cf20 // First check if it's a main parameter}\par
00160     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00161     \{\par
00162         {\cf19 if} (argxc->options[i].id && strcmp(argxc->options[i].id, {\cf18 id}) == 0)\par
00163         \{\par
00164             {\cf20 // Check if this main parameter exists in arguments}\par
00165             {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00166             \{\par
00167                 {\cf19 if} ((argxc->options[i].param && strcmp(argxc->mainArgs[j], argxc->options[i].param) == 0) ||\par
00168                         (argxc->options[i].sparam && strcmp(argxc->mainArgs[j], argxc->options[i].sparam) == 0))\par
00169                 \{\par
00170                     {\cf19 return} ({\cf18 int})i;\par
00171                 \}\par
00172             \}\par
00173         \}\par
00174     \}\par
00175 \par
00176     {\cf20 // Then look for sub-parameters}\par
00177     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00178     \{\par
00179         ArgxcOptions *opt = &argxc->options[i];\par
00180 \par
00181         {\cf20 // Check if the parent option exists in the arguments}\par
00182         {\cf18 bool} parentExists = {\cf17 false};\par
00183         {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00184         \{\par
00185             {\cf19 if} ((opt->param && strcmp(argxc->mainArgs[j], opt->param) == 0) ||\par
00186                     (opt->sparam && strcmp(argxc->mainArgs[j], opt->sparam) == 0))\par
00187             \{\par
00188                 parentExists = {\cf17 true};\par
00189                 {\cf19 break};\par
00190             \}\par
00191         \}\par
00192 \par
00193         {\cf19 if} (parentExists)\par
00194         \{\par
00195             {\cf20 // Find the index of the requested sub-parameter}\par
00196             {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00197             \{\par
00198                 {\cf19 if} (opt->subParams[j].id && strcmp(opt->subParams[j].id, {\cf18 id}) == 0)\par
00199                 \{\par
00200                     {\cf19 return} ({\cf18 int})j;\par
00201                 \}\par
00202             \}\par
00203         \}\par
00204     \}\par
00205 \par
00206     {\cf19 return} -1; {\cf20 // Not found}\par
00207 \}\par
}
{
\ql
References {\b ArgxcOptions::id}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, {\b Argxc::optionsCount}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
{
\ql
Referenced by {\b argxcGetSubParam()}, and {\b argxcParamExists()}.}\par
}
{\xe \v argxcFreeError\:Argx.h}
{\xe \v Argx.h\:argxcFreeError}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcFreeError ({\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcError} struct. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i error} \cell }{Pointer to the error to free. \cell }
{\row }
}
}{
Definition at line {\b 679} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00680 \{\par
00681     {\cf19 if} (!error) {\cf19 return};\par
00682 \par
00683     free(error->type); error->type = NULL;\par
00684     free(error->error); error->error = NULL;\par
00685     free(error->help); error->help = NULL;\par
00686     memset(error, 0, {\cf17 sizeof}(ArgxcError));\par
00687 \}\par
}
{
\ql
References {\b ArgxcError::error}, {\b ArgxcError::help}, and {\b ArgxcError::type}.}\par
}
{\xe \v argxcFreeOption\:Argx.h}
{\xe \v Argx.h\:argxcFreeOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcFreeOption ({\b ArgxcOptions} * option)}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcOptions} struct. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i option} \cell }{Pointer to the option to free. \cell }
{\row }
}
}{
Definition at line {\b 624} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00625 \{\par
00626     {\cf19 if} (!option) {\cf19 return};\par
00627 \par
00628     {\cf19 if} (option->id)\par
00629     \{ free(option->id); option->id = NULL; \}\par
00630     {\cf19 if} (option->param)\par
00631     \{ free(option->param); option->param = NULL; \}\par
00632     {\cf19 if} (option->sparam)\par
00633     \{ free(option->sparam); option->sparam = NULL; \}\par
00634     {\cf19 if} (option->info)\par
00635     \{ free(option->info); option->info = NULL; \}\par
00636 \par
00637     {\cf19 if} (option->subParams)\par
00638     \{\par
00639         {\cf19 for} ({\cf18 size_t} i = 0; i < option->subParamsCount; i++)\par
00640         \{\par
00641             argxcFreeOption(&option->subParams[i]);\par
00642         \}\par
00643 \par
00644         free(option->subParams); \par
00645         option->subParams = NULL;\par
00646         option->subParamsCapacity = 0;\par
00647         option->subParamsCount = 0;\par
00648     \}\par
00649 \par
00650     memset(option, 0, {\cf17 sizeof}(ArgxcOptions));\par
00651 \}\par
}
{
\ql
References {\b argxcFreeOption()}, {\b ArgxcOptions::id}, {\b ArgxcOptions::info}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcOptions::subParams}, {\b ArgxcOptions::subParamsCapacity}, and {\b ArgxcOptions::subParamsCount}.}\par
{
\ql
Referenced by {\b argxcFreeOption()}, and {\b freeOptionsArray()}.}\par
}
{\xe \v argxcFreeParam\:Argx.h}
{\xe \v Argx.h\:argxcFreeParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcFreeParam ({\b ArgxcParam} * param)}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcParam} struct. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i param} \cell }{Pointer to the parameter to free. \cell }
{\row }
}
}{
Definition at line {\b 653} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00654 \{\par
00655     {\cf19 if} (!param) {\cf19 return};\par
00656 \par
00657     free(param->subExists); param->subExists = NULL;\par
00658     memset(param, 0, {\cf17 sizeof}(ArgxcParam));\par
00659 \}\par
}
{
\ql
References {\b ArgxcParam::subExists}.}\par
}
{\xe \v argxcFreeStringArray\:Argx.h}
{\xe \v Argx.h\:argxcFreeStringArray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcFreeStringArray (char ** array, size_t count)}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free a string array returned from {\b Argxc} (e.g., argv array). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i array} \cell }{The array to free. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i count} \cell }{Number of elements in the array. \cell }
{\row }
}
}{
Definition at line {\b 661} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00662 \{\par
00663     freeStringArray(array, count);\par
00664 \}\par
}
{
\ql
References {\b freeStringArray()}.}\par
}
{\xe \v argxcGetArgc\:Argx.h}
{\xe \v Argx.h\:argxcGetArgc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argxcGetArgc ({\b Argxc} * argxc)}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the number of command-line arguments passed. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Number of arguments. \par
}}}{
Definition at line {\b 588} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00589 \{\par
00590     {\cf19 return} argxc ? argxc->mainArgc : 0;\par
00591 \}\par
}
{
\ql
References {\b Argxc::mainArgc}.}\par
}
{\xe \v argxcGetId\:Argx.h}
{\xe \v Argx.h\:argxcGetId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * argxcGetId ({\b Argxc} * argxc)}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the identifier of the {\b Argxc} instance. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
const char* The ID string. \par
}}}{
Definition at line {\b 601} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00602 \{\par
00603     {\cf19 return} argxc ? argxc->id : NULL;\par
00604 \}\par
}
{
\ql
References {\b Argxc::id}.}\par
}
{\xe \v argxcGetMainArgs\:Argx.h}
{\xe \v Argx.h\:argxcGetMainArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char ** argxcGetMainArgs ({\b Argxc} * argxc, size_t * count)}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the raw command-line arguments passed to {\b Argxc}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i count} \cell }{Output: number of arguments returned. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
char** Array of argument strings. \par
}}}{
Definition at line {\b 570} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00571 \{\par
00572     {\cf19 if} (!argxc || !count) {\cf19 return} NULL;\par
00573 \par
00574     *count = argxc->mainArgsCount;\par
00575 \par
00576     {\cf20 // Create a copy of the array}\par
00577     {\cf18 char} **copy = malloc(argxc->mainArgsCount * {\cf17 sizeof}({\cf18 char}*));\par
00578     {\cf19 if} (!copy) {\cf19 return} NULL;\par
00579 \par
00580     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->mainArgsCount; i++)\par
00581     \{\par
00582         copy[i] = stringDuplicate(argxc->mainArgs[i]);\par
00583     \}\par
00584 \par
00585     {\cf19 return} copy;\par
00586 \}\par
}
{
\ql
References {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, and {\b stringDuplicate()}.}\par
}
{\xe \v argxcGetOptions\:Argx.h}
{\xe \v Argx.h\:argxcGetOptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcOptions} * argxcGetOptions ({\b Argxc} * argxc, size_t * count)}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get all top-level options defined for the {\b Argxc} instance. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i count} \cell }{Output: number of options returned. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
ArgxcOptions* Array of options. \par
}}}{
Definition at line {\b 593} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00594 \{\par
00595     {\cf19 if} (!argxc || !count) {\cf19 return} NULL;\par
00596 \par
00597     *count = argxc->optionsCount;\par
00598     {\cf19 return} argxc->options; {\cf20 // Return direct reference (be careful with modification)}\par
00599 \}\par
}
{
\ql
References {\b Argxc::options}, and {\b Argxc::optionsCount}.}\par
}
{\xe \v argxcGetParam\:Argx.h}
{\xe \v Argx.h\:argxcGetParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcParam} argxcGetParam ({\b Argxc} * argxc, const char * id)}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieve a parameter by ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The identifier of the parameter to retrieve. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b ArgxcParam} The parameter object. \par
}}}{
Definition at line {\b 214} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00215 \{\par
00216     ArgxcParam result = \{{\cf17 false}, NULL, 0\};\par
00217 \par
00218     {\cf19 if} (!argxc || !{\cf18 id} || argxc->mainArgc <= 1)\par
00219     \{\par
00220         {\cf19 return} result;\par
00221     \}\par
00222 \par
00223     {\cf20 // First, check if this is a top-level option}\par
00224     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00225     \{\par
00226         ArgxcOptions *opt = &argxc->options[i];\par
00227 \par
00228         {\cf19 if} (opt->id && strcmp(opt->id, {\cf18 id}) == 0)\par
00229         \{\par
00230             {\cf20 // Find the position of the main option in arguments}\par
00231             {\cf18 int} mainOptionPos = -1;\par
00232 \par
00233             {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00234             \{\par
00235                 {\cf19 if} ((opt->param && strcmp(argxc->mainArgs[j], opt->param) == 0) ||\par
00236                         (opt->sparam && strcmp(argxc->mainArgs[j], opt->sparam) == 0))\par
00237                 \{\par
00238                     result.exists = {\cf17 true};\par
00239                     mainOptionPos = j;\par
00240                     {\cf19 break};\par
00241                 \}\par
00242             \}\par
00243 \par
00244             {\cf19 if} (result.exists)\par
00245             \{\par
00246                 {\cf19 if} (opt->hasSubParams || opt->hasAnySubParams)\par
00247                 \{\par
00248                     {\cf20 // Allocate memory for sub-parameter existence array}\par
00249                     result.subExistsCount = opt->subParamsCount;\par
00250                     result.subExists = malloc(result.subExistsCount * {\cf17 sizeof}({\cf18 bool}));\par
00251 \par
00252                     {\cf19 if} (result.subExists)\par
00253                     \{\par
00254                         {\cf20 // Check each sub-parameter}\par
00255                         {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00256                         \{\par
00257                             {\cf18 bool} subMatched = {\cf17 false};\par
00258                             ArgxcOptions *sub = &opt->subParams[j];\par
00259 \par
00260                             {\cf20 // Look for sub-parameters after the main option}\par
00261                             {\cf19 for} ({\cf18 size_t} k = mainOptionPos + 1; k < argxc->mainArgsCount; k++)\par
00262                             \{\par
00263                                 {\cf19 if} ((sub->param && strcmp(argxc->mainArgs[k], sub->param) == 0) ||\par
00264                                         (sub->sparam && strcmp(argxc->mainArgs[k], sub->sparam) == 0))\par
00265                                 \{\par
00266                                     subMatched = {\cf17 true};\par
00267                                     {\cf19 break};\par
00268                                 \}\par
00269                             \}\par
00270 \par
00271                             result.subExists[j] = subMatched;\par
00272                         \}\par
00273                     \}\par
00274                 \}\par
00275 \par
00276                 {\cf19 return} result;\par
00277             \}\par
00278         \}\par
00279     \}\par
00280 \par
00281     {\cf20 // If not found as top-level, check if it's a sub-parameter}\par
00282     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00283     \{\par
00284         ArgxcOptions *opt = &argxc->options[i];\par
00285 \par
00286         {\cf20 // Find if the parent option exists and get its position}\par
00287         {\cf18 int} parentPos = -1;\par
00288 \par
00289         {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00290         \{\par
00291             {\cf19 if} ((opt->param && strcmp(argxc->mainArgs[j], opt->param) == 0) ||\par
00292                     (opt->sparam && strcmp(argxc->mainArgs[j], opt->sparam) == 0))\par
00293             \{\par
00294                 parentPos = j;\par
00295                 {\cf19 break};\par
00296             \}\par
00297         \}\par
00298 \par
00299         {\cf19 if} (parentPos >= 0 && (opt->hasSubParams || opt->hasAnySubParams))\par
00300         \{\par
00301             {\cf20 // Check if the requested sub-parameter exists after the parent}\par
00302             {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00303             \{\par
00304                 ArgxcOptions *sub = &opt->subParams[j];\par
00305 \par
00306                 {\cf19 if} (sub->id && strcmp(sub->id, {\cf18 id}) == 0)\par
00307                 \{\par
00308                     {\cf19 for} ({\cf18 size_t} k = parentPos + 1; k < argxc->mainArgsCount; k++)\par
00309                     \{\par
00310                         {\cf19 if} ((sub->param && strcmp(argxc->mainArgs[k], sub->param) == 0) ||\par
00311                                 (sub->sparam && strcmp(argxc->mainArgs[k], sub->sparam) == 0))\par
00312                         \{\par
00313                             result.exists = {\cf17 true};\par
00314                             {\cf19 break};\par
00315                         \}\par
00316                     \}\par
00317 \par
00318                     {\cf19 if} (!result.exists && ({\cf18 size_t})(parentPos + 1) < argxc->mainArgsCount)\par
00319                     \{\par
00320                         {\cf18 char} *nextArg = argxc->mainArgs[parentPos + 1];\par
00321 \par
00322                         {\cf19 if} ((sub->param && strcmp(nextArg, sub->param) == 0) ||\par
00323                                 (sub->sparam && strcmp(nextArg, sub->sparam) == 0))\par
00324                         \{\par
00325                             result.exists = {\cf17 true};\par
00326                         \}\par
00327                     \}\par
00328 \par
00329                     {\cf20 // Handle any sub-sub-parameters if they exist}\par
00330                     {\cf19 if} (result.exists && (sub->hasSubParams || sub->hasAnySubParams))\par
00331                     \{\par
00332                         result.subExistsCount = sub->subParamsCount;\par
00333                         result.subExists = malloc(result.subExistsCount * {\cf17 sizeof}({\cf18 bool}));\par
00334 \par
00335                         {\cf19 if} (result.subExists)\par
00336                         \{\par
00337                             {\cf19 for} ({\cf18 size_t} k = 0; k < sub->subParamsCount; k++)\par
00338                             \{\par
00339                                 {\cf18 bool} subsubMatched = {\cf17 false};\par
00340                                 ArgxcOptions *subsub = &sub->subParams[k];\par
00341 \par
00342                                 {\cf19 for} ({\cf18 size_t} l = 0; l < argxc->mainArgsCount; l++)\par
00343                                 \{\par
00344                                     {\cf19 if} ((subsub->param && strcmp(argxc->mainArgs[l], subsub->param) == 0) ||\par
00345                                             (subsub->sparam && strcmp(argxc->mainArgs[l], subsub->sparam) == 0))\par
00346                                     \{\par
00347                                         subsubMatched = {\cf17 true};\par
00348                                         {\cf19 break};\par
00349                                     \}\par
00350                                 \}\par
00351 \par
00352                                 result.subExists[k] = subsubMatched;\par
00353                             \}\par
00354                         \}\par
00355                     \}\par
00356 \par
00357                     {\cf19 return} result;\par
00358                 \}\par
00359             \}\par
00360         \}\par
00361     \}\par
00362 \par
00363     {\cf19 return} result;\par
00364 \}\par
}
{
\ql
References {\b ArgxcParam::exists}, {\b ArgxcOptions::hasAnySubParams}, {\b ArgxcOptions::hasSubParams}, {\b ArgxcOptions::id}, {\b Argxc::mainArgc}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, {\b Argxc::optionsCount}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcParam::subExists}, {\b ArgxcParam::subExistsCount}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcGetSubParam\:Argx.h}
{\xe \v Argx.h\:argxcGetSubParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argxcGetSubParam ({\b Argxc} * argxc, const {\b ArgxcParam} * param, const char * id)}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieve a sub-parameter from a given parameter by ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i param} \cell }{Pointer to the parent parameter. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The identifier of the sub-parameter. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if the sub-parameter exists, false otherwise. \par
}}}{
Definition at line {\b 366} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00367 \{\par
00368     {\cf19 if} (!argxc || !param || !{\cf18 id}) {\cf19 return} {\cf17 false};\par
00369 \par
00370     {\cf18 int} index = argxcFindParam(argxc, {\cf18 id});\par
00371     {\cf19 return} argxcParamExists(argxc, {\cf18 id}) && param->subExists && index >= 0 && \par
00372         (size_t)index < param->subExistsCount && param->subExists[index];\par
00373 \}\par
}
{
\ql
References {\b argxcFindParam()}, {\b argxcParamExists()}, and {\b ArgxcParam::subExists}.}\par
}
{\xe \v argxcParamExists\:Argx.h}
{\xe \v Argx.h\:argxcParamExists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argxcParamExists ({\b Argxc} * argxc, const char * id)}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if a parameter with the given ID exists. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The identifier of the parameter. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if the parameter exists, false otherwise. \par
}}}{
Definition at line {\b 209} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00210 \{\par
00211     {\cf19 return} argxcFindParam(argxc, {\cf18 id}) >= 0;\par
00212 \}\par
}
{
\ql
References {\b argxcFindParam()}.}\par
{
\ql
Referenced by {\b argxcGetSubParam()}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Argx.h\par \pard\plain 
{\tc\tcl2 \v inc/Argx.h}
{\xe \v inc/Argx.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf21 #include <stdbool.h>}\par
00004 \par
00005 {\cf21 #include "types.h"}\par
00006 \par
00007 {\cf21 #ifdef __cplusplus}\par
00008 {\cf17 extern} {\cf22 "C"} \{\par
00009 {\cf21 #endif}\par
00010 {\cf20 }\par
00011 {\cf20     /**}\par
00012 {\cf20      * @brief Create a new Argxc instance with a specified ID and command-line arguments.}\par
00013 {\cf20      *}\par
00014 {\cf20      * @param id Identifier for the parser instance.}\par
00015 {\cf20      * @param argc Number of command-line arguments.}\par
00016 {\cf20      * @param argv Array of command-line argument strings.}\par
00017 {\cf20      * @return Argxc* Pointer to the created Argxc instance.}\par
00018 {\cf20      */}\par
00019     Argxc* argxcCreate({\cf17 const} {\cf18 char} *{\cf18 id}, {\cf18 int} argc, {\cf18 char} *argv[]);\par
00020 {\cf20 }\par
00021 {\cf20     /**}\par
00022 {\cf20      * @brief Create a new Argxc instance with default values (empty ID and no arguments).}\par
00023 {\cf20      *}\par
00024 {\cf20      * @return Argxc* Pointer to the default Argxc instance.}\par
00025 {\cf20      */}\par
00026     Argxc* argxcCreateDefault({\cf18 void});\par
00027 {\cf20 }\par
00028 {\cf20     /**}\par
00029 {\cf20      * @brief Destroy an Argxc instance and free all associated memory.}\par
00030 {\cf20      *}\par
00031 {\cf20      * @param argxc Pointer to the Argxc instance to destroy.}\par
00032 {\cf20      */}\par
00033     {\cf18 void} argxcDestroy(Argxc *argxc);\par
00034 {\cf20 }\par
00035 {\cf20     /**}\par
00036 {\cf20      * @brief Add a new option to the Argxc instance.}\par
00037 {\cf20      *}\par
00038 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00039 {\cf20      * @param option The option to add.}\par
00040 {\cf20      */}\par
00041     {\cf18 void} argxcAddOption(Argxc *argxc, ArgxcOptions option);\par
00042 {\cf20 }\par
00043 {\cf20     /**}\par
00044 {\cf20      * @brief Add a sub-option to a parent option.}\par
00045 {\cf20      *}\par
00046 {\cf20      * @param parent Pointer to the parent option.}\par
00047 {\cf20      * @param subOption Sub-option to add under the parent.}\par
00048 {\cf20      */}\par
00049     {\cf18 void} argxcAddSubOption(ArgxcOptions *parent, ArgxcOptions subOption);\par
00050 {\cf20 }\par
00051 {\cf20     /**}\par
00052 {\cf20      * @brief Find the index of a parameter by ID.}\par
00053 {\cf20      *}\par
00054 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00055 {\cf20      * @param id The identifier of the parameter to find.}\par
00056 {\cf20      * @return int Index of the parameter, or -1 if not found.}\par
00057 {\cf20      */}\par
00058     {\cf18 int} argxcFindParam(Argxc *argxc, {\cf17 const} {\cf18 char} *{\cf18 id});\par
00059 {\cf20 }\par
00060 {\cf20     /**}\par
00061 {\cf20      * @brief Retrieve a parameter by ID.}\par
00062 {\cf20      *}\par
00063 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00064 {\cf20      * @param id The identifier of the parameter to retrieve.}\par
00065 {\cf20      * @return ArgxcParam The parameter object.}\par
00066 {\cf20      */}\par
00067     ArgxcParam argxcGetParam(Argxc *argxc, {\cf17 const} {\cf18 char} *{\cf18 id});\par
00068 {\cf20 }\par
00069 {\cf20     /**}\par
00070 {\cf20      * @brief Check if a parameter with the given ID exists.}\par
00071 {\cf20      *}\par
00072 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00073 {\cf20      * @param id The identifier of the parameter.}\par
00074 {\cf20      * @return true if the parameter exists, false otherwise.}\par
00075 {\cf20      */}\par
00076     {\cf18 bool} argxcParamExists(Argxc *argxc, {\cf17 const} {\cf18 char} *{\cf18 id});\par
00077 {\cf20 }\par
00078 {\cf20     /**}\par
00079 {\cf20      * @brief Retrieve a sub-parameter from a given parameter by ID.}\par
00080 {\cf20      *}\par
00081 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00082 {\cf20      * @param param Pointer to the parent parameter.}\par
00083 {\cf20      * @param id The identifier of the sub-parameter.}\par
00084 {\cf20      * @return true if the sub-parameter exists, false otherwise.}\par
00085 {\cf20      */}\par
00086     {\cf18 bool} argxcGetSubParam(Argxc *argxc, {\cf17 const} ArgxcParam *param, {\cf17 const} {\cf18 char} *{\cf18 id});\par
00087 {\cf20 }\par
00088 {\cf20     /**}\par
00089 {\cf20      * @brief Compare if the given argv matches a list of ArgxcOptions.}\par
00090 {\cf20      *}\par
00091 {\cf20      * @param options Array of ArgxcOptions.}\par
00092 {\cf20      * @param optionsCount Number of options.}\par
00093 {\cf20      * @param argv Array of argument strings.}\par
00094 {\cf20      * @param argvCount Number of argument strings.}\par
00095 {\cf20      * @return true if argv matches the options, false otherwise.}\par
00096 {\cf20      */}\par
00097     {\cf18 bool} argxcCompareArgs(ArgxcOptions *options, {\cf18 size_t} optionsCount, {\cf18 char} **argv, {\cf18 size_t} argvCount);\par
00098 {\cf20 }\par
00099 {\cf20     /**}\par
00100 {\cf20      * @brief Generate documentation for the defined options.}\par
00101 {\cf20      *}\par
00102 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00103 {\cf20      * @param style Documentation output style.}\par
00104 {\cf20      * @param title Title of the documentation.}\par
00105 {\cf20      * @param mainInfo Additional info to be displayed in the documentation.}\par
00106 {\cf20      * @return char* Documentation string (must be freed by caller).}\par
00107 {\cf20      */}\par
00108     {\cf18 char} *argxcCreateDocs(Argxc *argxc, ArgxcStyle style, {\cf17 const} {\cf18 char} *title, {\cf17 const} {\cf18 char} *mainInfo);\par
00109 {\cf20 }\par
00110 {\cf20     /**}\par
00111 {\cf20      * @brief Get the raw command-line arguments passed to Argxc.}\par
00112 {\cf20      *}\par
00113 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00114 {\cf20      * @param count Output: number of arguments returned.}\par
00115 {\cf20      * @return char** Array of argument strings.}\par
00116 {\cf20      */}\par
00117     {\cf18 char} **argxcGetMainArgs(Argxc *argxc, {\cf18 size_t} *count);\par
00118 {\cf20 }\par
00119 {\cf20     /**}\par
00120 {\cf20      * @brief Get the number of command-line arguments passed.}\par
00121 {\cf20      *}\par
00122 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00123 {\cf20      * @return int Number of arguments.}\par
00124 {\cf20      */}\par
00125     {\cf18 int} argxcGetArgc(Argxc *argxc);\par
00126 {\cf20 }\par
00127 {\cf20     /**}\par
00128 {\cf20      * @brief Get all top-level options defined for the Argxc instance.}\par
00129 {\cf20      *}\par
00130 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00131 {\cf20      * @param count Output: number of options returned.}\par
00132 {\cf20      * @return ArgxcOptions* Array of options.}\par
00133 {\cf20      */}\par
00134     ArgxcOptions *argxcGetOptions(Argxc *argxc, {\cf18 size_t} *count);\par
00135 {\cf20 }\par
00136 {\cf20     /**}\par
00137 {\cf20      * @brief Get the identifier of the Argxc instance.}\par
00138 {\cf20      *}\par
00139 {\cf20      * @param argxc Pointer to the Argxc instance.}\par
00140 {\cf20      * @return const char* The ID string.}\par
00141 {\cf20      */}\par
00142     {\cf17 const} {\cf18 char} *argxcGetId(Argxc *argxc);\par
00143 {\cf20 }\par
00144 {\cf20     /**}\par
00145 {\cf20      * @brief Create a new option.}\par
00146 {\cf20      *}\par
00147 {\cf20      * @param id Option identifier.}\par
00148 {\cf20      * @param param Parameter name (e.g., --param).}\par
00149 {\cf20      * @param sparam Short form (e.g., -p).}\par
00150 {\cf20      * @param info Description of the option.}\par
00151 {\cf20      * @param hasSubParams Whether the option has sub-parameters.}\par
00152 {\cf20      * @param hasAnySubParams Whether the option accepts any sub-parameters.}\par
00153 {\cf20      * @return ArgxcOptions The created option.}\par
00154 {\cf20      */}\par
00155     ArgxcOptions argxcCreateOption({\cf17 const} {\cf18 char} *{\cf18 id}, {\cf17 const} {\cf18 char} *param, {\cf17 const} {\cf18 char} *sparam, \par
00156             {\cf17 const} {\cf18 char} *info, {\cf18 bool} hasSubParams, {\cf18 bool} hasAnySubParams);\par
00157 {\cf20 }\par
00158 {\cf20     /**}\par
00159 {\cf20      * @brief Free resources associated with an ArgxcOptions struct.}\par
00160 {\cf20      *}\par
00161 {\cf20      * @param option Pointer to the option to free.}\par
00162 {\cf20      */}\par
00163     {\cf18 void} argxcFreeOption(ArgxcOptions *option);\par
00164 {\cf20 }\par
00165 {\cf20     /**}\par
00166 {\cf20      * @brief Free resources associated with an ArgxcParam struct.}\par
00167 {\cf20      *}\par
00168 {\cf20      * @param param Pointer to the parameter to free.}\par
00169 {\cf20      */}\par
00170     {\cf18 void} argxcFreeParam(ArgxcParam *param);\par
00171 {\cf20 }\par
00172 {\cf20     /**}\par
00173 {\cf20      * @brief Free a string array returned from Argxc (e.g., argv array).}\par
00174 {\cf20      *}\par
00175 {\cf20      * @param array The array to free.}\par
00176 {\cf20      * @param count Number of elements in the array.}\par
00177 {\cf20      */}\par
00178     {\cf18 void} argxcFreeStringArray({\cf18 char} **array, {\cf18 size_t} count);\par
00179 {\cf20 }\par
00180 {\cf20     /**}\par
00181 {\cf20      * @brief Create an ArgxcError object.}\par
00182 {\cf20      *}\par
00183 {\cf20      * @param type Type/category of the error.}\par
00184 {\cf20      * @param error Error message.}\par
00185 {\cf20      * @param help Help message for resolving the error.}\par
00186 {\cf20      * @param code Exit code or error code.}\par
00187 {\cf20      * @return ArgxcError The created error struct.}\par
00188 {\cf20      */}\par
00189     ArgxcError argxcCreateError({\cf17 const} {\cf18 char} *type, {\cf17 const} {\cf18 char} *error, {\cf17 const} {\cf18 char} *help, {\cf18 int} code);\par
00190 {\cf20 }\par
00191 {\cf20     /**}\par
00192 {\cf20      * @brief Free resources associated with an ArgxcError struct.}\par
00193 {\cf20      *}\par
00194 {\cf20      * @param error Pointer to the error to free.}\par
00195 {\cf20      */}\par
00196     {\cf18 void} argxcFreeError(ArgxcError *error);\par
00197 \par
00198 {\cf21 #ifdef __cplusplus}\par
00199 \}\par
00200 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/ARGXAddError.h File Reference\par \pard\plain 
{\tc\tcl2 \v inc/ARGXAddError.h}
{\xe \v inc/ARGXAddError.h}
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "types.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Structures\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ArgxcErrorPair}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcError} {\b argxcCreateErrorSimple} (const char *msg, const char *help)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b argxcGetErrorCode} (const {\b ArgxcError} *error)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b argxcGetErrorHelp} (const {\b ArgxcError} *error)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b argxcGetErrorMessage} (const {\b ArgxcError} *error)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcErrorPair} {\b argxcGetErrorPair} (const {\b ArgxcError} *error)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v argxcCreateErrorSimple\:ARGXAddError.h}
{\xe \v ARGXAddError.h\:argxcCreateErrorSimple}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcError} argxcCreateErrorSimple (const char * msg, const char * help)}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00020 \{\par
00021     ArgxcError error = \{0\};\par
00022 \par
00023     error.type = stringDuplicate({\cf22 "error"});\par
00024     error.error = stringDuplicate(msg);\par
00025     error.help = stringDuplicate(help);\par
00026     error.code = 1; {\cf20 // Default error code}\par
00027 \par
00028     {\cf19 return} error;\par
00029 \}\par
}
{
\ql
References {\b ArgxcError::code}, {\b ArgxcError::error}, {\b ArgxcError::help}, {\b stringDuplicate()}, and {\b ArgxcError::type}.}\par
}
{\xe \v argxcGetErrorCode\:ARGXAddError.h}
{\xe \v ARGXAddError.h\:argxcGetErrorCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argxcGetErrorCode (const {\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00042 \{\par
00043     {\cf19 return} error ? error->code : 0;\par
00044 \}\par
}
{
\ql
References {\b ArgxcError::code}.}\par
}
{\xe \v argxcGetErrorHelp\:ARGXAddError.h}
{\xe \v ARGXAddError.h\:argxcGetErrorHelp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * argxcGetErrorHelp (const {\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00037 \{\par
00038     {\cf19 return} error ? error->help : NULL;\par
00039 \}\par
}
{
\ql
References {\b ArgxcError::help}.}\par
}
{\xe \v argxcGetErrorMessage\:ARGXAddError.h}
{\xe \v ARGXAddError.h\:argxcGetErrorMessage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * argxcGetErrorMessage (const {\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00032 \{\par
00033     {\cf19 return} error ? error->error : NULL;\par
00034 \}\par
}
{
\ql
References {\b ArgxcError::error}.}\par
}
{\xe \v argxcGetErrorPair\:ARGXAddError.h}
{\xe \v ARGXAddError.h\:argxcGetErrorPair}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcErrorPair} argxcGetErrorPair (const {\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00047 \{\par
00048     ArgxcErrorPair pair = \{NULL, NULL\};\par
00049 \par
00050     {\cf19 if} (error)\par
00051     \{\par
00052         pair.error = error->error;\par
00053         pair.help = error->help;\par
00054     \}\par
00055 \par
00056     {\cf19 return} pair;\par
00057 \}\par
}
{
\ql
References {\b ArgxcError::error}, {\b ArgxcErrorPair::error}, {\b ArgxcError::help}, and {\b ArgxcErrorPair::help}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ARGXAddError.h\par \pard\plain 
{\tc\tcl2 \v inc/ARGXAddError.h}
{\xe \v inc/ARGXAddError.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf21 #include "types.h"}\par
00004 \par
00005 {\cf21 #ifdef __cplusplus}\par
00006 {\cf17 extern} {\cf22 "C"} \{\par
00007 {\cf21 #endif}\par
00008 \par
00009     {\cf20 // Error creation and management}\par
00010     ArgxcError argxcCreateErrorSimple({\cf17 const} {\cf18 char} *msg, {\cf17 const} {\cf18 char} *help);\par
00011     {\cf17 const} {\cf18 char}* argxcGetErrorMessage({\cf17 const} ArgxcError *error);\par
00012     {\cf17 const} {\cf18 char}* argxcGetErrorHelp({\cf17 const} ArgxcError *error);\par
00013     {\cf18 int} argxcGetErrorCode({\cf17 const} ArgxcError *error);\par
00014 \par
00015     {\cf17 typedef} {\cf17 struct }\{\par
00016         {\cf17 const} {\cf18 char} *error;\par
00017         {\cf17 const} {\cf18 char} *help;\par
00018     \} ArgxcErrorPair;\par
00019 \par
00020     ArgxcErrorPair argxcGetErrorPair({\cf17 const} ArgxcError *error);\par
00021 \par
00022 {\cf21 #ifdef __cplusplus}\par
00023 \}\par
00024 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/macros.h File Reference\par \pard\plain 
{\tc\tcl2 \v inc/macros.h}
{\xe \v inc/macros.h}
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_DEV}\~ false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_STRINGIFY}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_TOSTRING}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION}\~ (({\b ARGX_VERSION_MAJOR}<<16)|({\b ARGX_VERSION_MINOR}<<8)|({\b ARGX_VERSION_PATCH})|({\b ARGX_VERSION_STATE} << 24))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_CHECK}({\b ARGX_VERSION_MAJOR},  {\b ARGX_VERSION_MINOR},  {\b ARGX_VERSION_PATCH},  {\b ARGX_VERSION_STATE})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_MAJOR}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_MINOR}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_PATCH}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_STATE}\~ "build"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_STD}\~ 20250606\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ARGX_DEV\:macros.h}
{\xe \v macros.h\:ARGX_DEV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_DEV\~ false}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b macros.h}.}\par
}
{\xe \v ARGX_STRINGIFY\:macros.h}
{\xe \v macros.h\:ARGX_STRINGIFY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_STRINGIFY( x)}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #x}\par
}
{
Definition at line {\b 24} of file {\b macros.h}.}\par
}
{\xe \v ARGX_TOSTRING\:macros.h}
{\xe \v macros.h\:ARGX_TOSTRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_TOSTRING( x)}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ARGX_STRINGIFY(x)\par
}
{
Definition at line {\b 25} of file {\b macros.h}.}\par
}
{\xe \v ARGX_VERSION\:macros.h}
{\xe \v macros.h\:ARGX_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION\~ (({\b ARGX_VERSION_MAJOR}<<16)|({\b ARGX_VERSION_MINOR}<<8)|({\b ARGX_VERSION_PATCH})|({\b ARGX_VERSION_STATE} << 24))}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 16} of file {\b macros.h}.}\par
}
{\xe \v ARGX_VERSION_CHECK\:macros.h}
{\xe \v macros.h\:ARGX_VERSION_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_CHECK( {\b ARGX_VERSION_MAJOR},  {\b ARGX_VERSION_MINOR},  {\b ARGX_VERSION_PATCH},  {\b ARGX_VERSION_STATE})}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     (((ARGX_VERSION_MAJOR)<<16)|((ARGX_VERSION_MINOR)<<8)|(ARGX_VERSION_PATCH)|((ARGX_VERSION_STATE) << 24))\par
}
{
Definition at line {\b 17} of file {\b macros.h}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00017 {\cf21 #define ARGX_VERSION_CHECK(ARGX_VERSION_MAJOR, ARGX_VERSION_MINOR, ARGX_VERSION_PATCH, ARGX_VERSION_STATE) \\}\par
00018 {\cf21     (((ARGX_VERSION_MAJOR)<<16)|((ARGX_VERSION_MINOR)<<8)|(ARGX_VERSION_PATCH)|((ARGX_VERSION_STATE) << 24))}\par
}
}
{\xe \v ARGX_VERSION_MAJOR\:macros.h}
{\xe \v macros.h\:ARGX_VERSION_MAJOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_MAJOR\~ 1}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 4} of file {\b macros.h}.}\par
}
{\xe \v ARGX_VERSION_MINOR\:macros.h}
{\xe \v macros.h\:ARGX_VERSION_MINOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_MINOR\~ 0}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b macros.h}.}\par
}
{\xe \v ARGX_VERSION_PATCH\:macros.h}
{\xe \v macros.h\:ARGX_VERSION_PATCH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_PATCH\~ 2}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 6} of file {\b macros.h}.}\par
}
{\xe \v ARGX_VERSION_STATE\:macros.h}
{\xe \v macros.h\:ARGX_VERSION_STATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_STATE\~ "build"}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 14} of file {\b macros.h}.}\par
}
{\xe \v ARGX_VERSION_STD\:macros.h}
{\xe \v macros.h\:ARGX_VERSION_STD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_STD\~ 20250606}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b macros.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
macros.h\par \pard\plain 
{\tc\tcl2 \v inc/macros.h}
{\xe \v inc/macros.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf20 // Versioning}\par
00004 {\cf21 #define ARGX_VERSION_MAJOR            1}\par
00005 {\cf21 #define ARGX_VERSION_MINOR            0}\par
00006 {\cf21 #define ARGX_VERSION_PATCH            2}\par
00007 {\cf21 #define ARGX_VERSION_STD              20250606}\par
00008 \par
00009 {\cf20 // Version states:}\par
00010 {\cf20 // * dev                    0}\par
00011 {\cf20 // * beta                   1}\par
00012 {\cf20 // * snap                   2}\par
00013 {\cf20 // * build (AKA: Release)   3}\par
00014 {\cf21 #define ARGX_VERSION_STATE           "build"}\par
00015 \par
00016 {\cf21 #define ARGX_VERSION                ((ARGX_VERSION_MAJOR<<16)|(ARGX_VERSION_MINOR<<8)|(ARGX_VERSION_PATCH)|(ARGX_VERSION_STATE << 24))}\par
00017 {\cf21 #define ARGX_VERSION_CHECK(ARGX_VERSION_MAJOR, ARGX_VERSION_MINOR, ARGX_VERSION_PATCH, ARGX_VERSION_STATE) \\}\par
00018 {\cf21     (((ARGX_VERSION_MAJOR)<<16)|((ARGX_VERSION_MINOR)<<8)|(ARGX_VERSION_PATCH)|((ARGX_VERSION_STATE) << 24))}\par
00019 \par
00020 {\cf20 // DEV or PROD}\par
00021 {\cf21 #define ARGX_DEV false}\par
00022 \par
00023 {\cf20 // Macro utils}\par
00024 {\cf21 #define ARGX_STRINGIFY(x) #x}\par
00025 {\cf21 #define ARGX_TOSTRING(x) ARGX_STRINGIFY(x)}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/types.h File Reference\par \pard\plain 
{\tc\tcl2 \v inc/types.h}
{\xe \v inc/types.h}
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdbool.h>}\par
{\f2 #include <stddef.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Structures\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ArgxcError}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ArgxcOptions}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ArgxcParam}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct Argxc {\b Argxc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct ArgxcOptions {\b ArgxcOptions}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b ArgxcStyle} \{ {\b ARGX_STYLE_PROFESSIONAL}
, {\b ARGX_STYLE_SIMPLE}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v Argxc\:types.h}
{\xe \v types.h\:Argxc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct Argxc Argxc}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b types.h}.}\par
}
{\xe \v ArgxcOptions\:types.h}
{\xe \v types.h\:ArgxcOptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct ArgxcOptions ArgxcOptions}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v ArgxcStyle\:types.h}
{\xe \v types.h\:ArgxcStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b ArgxcStyle}}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v ARGX_STYLE_PROFESSIONAL\:types.h}
{\xe \v types.h\:ARGX_STYLE_PROFESSIONAL}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid ARGX_STYLE_PROFESSIONAL{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
\cell }{\cell }{\row }
{\xe \v ARGX_STYLE_SIMPLE\:types.h}
{\xe \v types.h\:ARGX_STYLE_SIMPLE}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid ARGX_STYLE_SIMPLE{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
\cell }{\cell }{\row }
}
\par
{
Definition at line {\b 10} of file {\b types.h}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00010                  \{\par
00011         ARGX_STYLE_PROFESSIONAL,\par
00012         ARGX_STYLE_SIMPLE\par
00013     \} ArgxcStyle;\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
types.h\par \pard\plain 
{\tc\tcl2 \v inc/types.h}
{\xe \v inc/types.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf21 #include <stdbool.h>}\par
00004 {\cf21 #include <stddef.h>}\par
00005 \par
00006 {\cf21 #ifdef __cplusplus}\par
00007 {\cf17 extern} {\cf22 "C"} \{\par
00008 {\cf21 #endif}\par
00009 \par
00010     {\cf17 typedef} {\cf17 enum} \{\par
00011         ARGX_STYLE_PROFESSIONAL,\par
00012         ARGX_STYLE_SIMPLE\par
00013     \} ArgxcStyle;\par
00014 \par
00015     {\cf17 typedef} {\cf17 struct }\{\par
00016         {\cf18 char} *type;\par
00017         {\cf18 char} *error;\par
00018         {\cf18 char} *help;\par
00019         {\cf18 int} code;\par
00020     \} ArgxcError;\par
00021 \par
00022     {\cf20 // Forward declaration}\par
00023     {\cf17 struct }ArgxcOptions;\par
00024 \par
00025     {\cf17 typedef} {\cf17 struct }ArgxcOptions \{\par
00026         {\cf18 char} *id;              {\cf20 // ID of the option}\par
00027         {\cf18 char} *param;           {\cf20 // Long parameter (e.g., --help)}\par
00028         {\cf18 char} *sparam;          {\cf20 // Short parameter (e.g., -h)}\par
00029         {\cf18 char} *info;            {\cf20 // Description}\par
00030         {\cf18 bool} hasSubParams;\par
00031         {\cf18 bool} hasAnySubParams;\par
00032         {\cf17 struct }ArgxcOptions *subParams;\par
00033         {\cf18 size_t} subParamsCount;\par
00034         {\cf18 size_t} subParamsCapacity;\par
00035     \} ArgxcOptions;\par
00036 \par
00037     {\cf17 typedef} {\cf17 struct }\{\par
00038         {\cf18 bool} exists;\par
00039         {\cf18 bool} *subExists;\par
00040         {\cf18 size_t} subExistsCount;\par
00041     \} ArgxcParam;\par
00042 \par
00043     {\cf20 // Opaque handle for Argxc instance}\par
00044     {\cf17 typedef} {\cf17 struct }Argxc Argxc;\par
00045 \par
00046 {\cf21 #ifdef __cplusplus}\par
00047 \}\par
00048 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md File Reference\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Argx.c File Reference\par \pard\plain 
{\tc\tcl2 \v src/Argx.c}
{\xe \v src/Argx.c}
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdlib.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <stdbool.h>}\par
{\f2 #include "../inc/Argx.h"}\par
{\f2 #include "../inc/types.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Data Structures\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Argxc}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcAddOption} ({\b Argxc} *argxc, {\b ArgxcOptions} option)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a new option to the {\b Argxc} instance. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcAddSubOption} ({\b ArgxcOptions} *parent, {\b ArgxcOptions} subOption)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a sub-option to a parent option. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b argxcCompareArgs} ({\b ArgxcOptions} *options, size_t optionsCount, char **argv, size_t argvCount)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare if the given argv matches a list of {\b ArgxcOptions}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Argxc} * {\b argxcCreate} (const char *id, int argc, char *argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new {\b Argxc} instance with a specified ID and command-line arguments. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Argxc} * {\b argxcCreateDefault} (void)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new {\b Argxc} instance with default values (empty ID and no arguments). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b argxcCreateDocs} ({\b Argxc} *argxc, {\b ArgxcStyle} style, const char *title, const char *mainInfo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generate documentation for the defined options. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcError} {\b argxcCreateError} (const char *type, const char *error, const char *help, int code)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create an {\b ArgxcError} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcOptions} {\b argxcCreateOption} (const char *id, const char *param, const char *sparam, const char *info, bool hasSubParams, bool hasAnySubParams)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new option. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcDestroy} ({\b Argxc} *argxc)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destroy an {\b Argxc} instance and free all associated memory. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b argxcFindParam} ({\b Argxc} *argxc, const char *id)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Find the index of a parameter by ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcFreeError} ({\b ArgxcError} *error)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcError} struct. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcFreeOption} ({\b ArgxcOptions} *option)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcOptions} struct. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcFreeParam} ({\b ArgxcParam} *param)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcParam} struct. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b argxcFreeStringArray} (char **array, size_t count)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free a string array returned from {\b Argxc} (e.g., argv array). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b argxcGetArgc} ({\b Argxc} *argxc)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the number of command-line arguments passed. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b argxcGetId} ({\b Argxc} *argxc)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the identifier of the {\b Argxc} instance. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b argxcGetMainArgs} ({\b Argxc} *argxc, size_t *count)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the raw command-line arguments passed to {\b Argxc}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcOptions} * {\b argxcGetOptions} ({\b Argxc} *argxc, size_t *count)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get all top-level options defined for the {\b Argxc} instance. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcParam} {\b argxcGetParam} ({\b Argxc} *argxc, const char *id)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieve a parameter by ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b argxcGetSubParam} ({\b Argxc} *argxc, const {\b ArgxcParam} *param, const char *id)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieve a sub-parameter from a given parameter by ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b argxcParamExists} ({\b Argxc} *argxc, const char *id)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if a parameter with the given ID exists. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b freeOptionsArray} ({\b ArgxcOptions} *options, size_t count)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b freeStringArray} (char **array, size_t count)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static char * {\b stringDuplicate} (const char *str)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v argxcAddOption\:Argx.c}
{\xe \v Argx.c\:argxcAddOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcAddOption ({\b Argxc} * argxc, {\b ArgxcOptions} option)}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a new option to the {\b Argxc} instance. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i option} \cell }{The option to add. \cell }
{\row }
}
}{
Definition at line {\b 124} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00125 \{\par
00126     {\cf19 if} (!argxc) {\cf19 return};\par
00127 \par
00128     {\cf19 if} (argxc->optionsCount >= argxc->optionsCapacity)\par
00129     \{\par
00130         argxc->optionsCapacity *= 2;\par
00131         argxc->options = realloc(argxc->options, argxc->optionsCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00132         {\cf19 if} (!argxc->options) {\cf19 return};\par
00133     \}\par
00134 \par
00135     argxc->options[argxc->optionsCount++] = option;\par
00136 \}\par
}
{
\ql
References {\b Argxc::options}, {\b Argxc::optionsCapacity}, and {\b Argxc::optionsCount}.}\par
}
{\xe \v argxcAddSubOption\:Argx.c}
{\xe \v Argx.c\:argxcAddSubOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcAddSubOption ({\b ArgxcOptions} * parent, {\b ArgxcOptions} subOption)}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a sub-option to a parent option. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i parent} \cell }{Pointer to the parent option. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i subOption} \cell }{Sub-option to add under the parent. \cell }
{\row }
}
}{
Definition at line {\b 138} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00139 \{\par
00140     {\cf19 if} (!parent) {\cf19 return};\par
00141 \par
00142     {\cf19 if} (parent->subParamsCount >= parent->subParamsCapacity)\par
00143     \{\par
00144         {\cf18 size_t} newCapacity = parent->subParamsCapacity == 0 ? 2 : parent->subParamsCapacity * 2;\par
00145         ArgxcOptions *newSubParams = realloc(parent->subParams, newCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00146         {\cf19 if} (!newSubParams) {\cf19 return};\par
00147 \par
00148         parent->subParams = newSubParams;\par
00149         parent->subParamsCapacity = newCapacity;\par
00150     \}\par
00151 \par
00152     parent->subParams[parent->subParamsCount++] = subOption;\par
00153 \}\par
}
{
\ql
References {\b ArgxcOptions::subParams}, {\b ArgxcOptions::subParamsCapacity}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcCompareArgs\:Argx.c}
{\xe \v Argx.c\:argxcCompareArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argxcCompareArgs ({\b ArgxcOptions} * options, size_t optionsCount, char ** argv, size_t argvCount)}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare if the given argv matches a list of {\b ArgxcOptions}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i options} \cell }{Array of {\b ArgxcOptions}. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i optionsCount} \cell }{Number of options. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{Array of argument strings. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argvCount} \cell }{Number of argument strings. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if argv matches the options, false otherwise. \par
}}}{
Definition at line {\b 499} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00500 \{\par
00501     {\cf19 if} (!options || !argv) {\cf19 return} {\cf17 false};\par
00502 \par
00503     {\cf19 for} ({\cf18 size_t} i = 1; i < argvCount; i++)\par
00504     \{\par
00505         {\cf17 const} {\cf18 char} *arg = argv[i];\par
00506 \par
00507         {\cf18 bool} found = {\cf17 false};\par
00508         {\cf18 bool} hasSubParams = {\cf17 false};\par
00509         {\cf18 bool} hasAnySubParams = {\cf17 false};\par
00510         ArgxcOptions *matchedOption = NULL;\par
00511 \par
00512         {\cf20 // Find the matching option}\par
00513         {\cf19 for} ({\cf18 size_t} j = 0; j < optionsCount; j++)\par
00514         \{\par
00515             {\cf19 if} ((options[j].sparam && strcmp(options[j].sparam, arg) == 0) ||\par
00516                     (options[j].param && strcmp(options[j].param, arg) == 0))\par
00517             \{\par
00518                 found = {\cf17 true};\par
00519                 hasSubParams = options[j].hasSubParams;\par
00520                 hasAnySubParams = options[j].hasAnySubParams;\par
00521                 matchedOption = &options[j];\par
00522                 {\cf19 break};\par
00523             \}\par
00524         \}\par
00525 \par
00526         {\cf19 if} (!found) {\cf19 return} {\cf17 false};\par
00527 \par
00528         {\cf19 if} (hasSubParams || hasAnySubParams)\par
00529         \{\par
00530             {\cf20 // Check if there's a next argument}\par
00531             {\cf19 if} (i + 1 < argvCount)\par
00532             \{\par
00533                 {\cf17 const} {\cf18 char} *nextArg = argv[i + 1];\par
00534 \par
00535                 {\cf20 // Check if next argument is a sub-parameter}\par
00536                 {\cf18 bool} isSubParam = {\cf17 false};\par
00537 \par
00538                 {\cf19 if} (nextArg && strlen(nextArg) > 0 && nextArg[0] != {\cf23 '-'})\par
00539                 \{\par
00540                     {\cf20 // Validate if it's a valid sub-parameter}\par
00541                     {\cf19 for} ({\cf18 size_t} k = 0; k < matchedOption->subParamsCount; k++)\par
00542                     \{\par
00543                         {\cf19 if} ((matchedOption->subParams[k].param && strcmp(matchedOption->subParams[k].param, nextArg) == 0) ||\par
00544                                 (matchedOption->subParams[k].sparam && strcmp(matchedOption->subParams[k].sparam, nextArg) == 0))\par
00545                         \{\par
00546                             isSubParam = {\cf17 true};\par
00547                             {\cf19 break};\par
00548                         \}\par
00549                     \}\par
00550 \par
00551                     {\cf19 if} (isSubParam)\par
00552                     \{\par
00553                         i++; {\cf20 // Skip the sub-parameter}\par
00554                     \} {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams)\par
00555                     \{\par
00556                         {\cf19 return} {\cf17 false};\par
00557                     \}\par
00558                 \} {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams)\par
00559                 \{\par
00560                     {\cf19 return} {\cf17 false};\par
00561                 \}\par
00562             \}\par
00563         \}\par
00564     \}\par
00565 \par
00566     {\cf19 return} {\cf17 true};\par
00567 \}\par
}
{
\ql
References {\b ArgxcOptions::hasAnySubParams}, {\b ArgxcOptions::hasSubParams}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcCreate\:Argx.c}
{\xe \v Argx.c\:argxcCreate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Argxc} * argxcCreate (const char * id, int argc, char * argv[])}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new {\b Argxc} instance with a specified ID and command-line arguments. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Identifier for the parser instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{Number of command-line arguments. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{Array of command-line argument strings. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Argxc* Pointer to the created {\b Argxc} instance. \par
}}}{
Definition at line {\b 64} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00065 \{\par
00066     Argxc *argxc = malloc({\cf17 sizeof}(Argxc));\par
00067     {\cf19 if} (!argxc) {\cf19 return} NULL;\par
00068 \par
00069     argxc->id = stringDuplicate({\cf18 id});\par
00070     argxc->mainArgc = argc;\par
00071     argxc->mainArgsCount = argc;\par
00072     argxc->mainArgs = malloc(argc * {\cf17 sizeof}({\cf18 char}*));\par
00073     argxc->optionsCount = 0;\par
00074     argxc->optionsCapacity = 10;\par
00075     argxc->options = malloc(argxc->optionsCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00076 \par
00077     {\cf19 if} (!argxc->mainArgs || !argxc->options)\par
00078     \{\par
00079         argxcDestroy(argxc);\par
00080         {\cf19 return} NULL;\par
00081     \}\par
00082 \par
00083     {\cf19 for} ({\cf18 int} i = 0; i < argc; i++)\par
00084     \{\par
00085         argxc->mainArgs[i] = stringDuplicate(argv[i]);\par
00086     \}\par
00087 \par
00088     {\cf19 return} argxc;\par
00089 \}\par
}
{
\ql
References {\b argxcDestroy()}, {\b Argxc::id}, {\b Argxc::mainArgc}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, {\b Argxc::optionsCapacity}, {\b Argxc::optionsCount}, and {\b stringDuplicate()}.}\par
}
{\xe \v argxcCreateDefault\:Argx.c}
{\xe \v Argx.c\:argxcCreateDefault}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Argxc} * argxcCreateDefault (void )}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new {\b Argxc} instance with default values (empty ID and no arguments). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Argxc* Pointer to the default {\b Argxc} instance. \par
}}}{
Definition at line {\b 91} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00092 \{\par
00093     Argxc *argxc = malloc({\cf17 sizeof}(Argxc));\par
00094     {\cf19 if} (!argxc) {\cf19 return} NULL;\par
00095 \par
00096     argxc->id = NULL;\par
00097     argxc->mainArgs = NULL;\par
00098     argxc->mainArgsCount = 0;\par
00099     argxc->mainArgc = 0;\par
00100     argxc->optionsCount = 0;\par
00101     argxc->optionsCapacity = 10;\par
00102     argxc->options = malloc(argxc->optionsCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00103 \par
00104     {\cf19 if} (!argxc->options)\par
00105     \{\par
00106         free(argxc); argxc = NULL;\par
00107         {\cf19 return} NULL;\par
00108     \}\par
00109 \par
00110     {\cf19 return} argxc;\par
00111 \}\par
}
{
\ql
References {\b Argxc::id}, {\b Argxc::mainArgc}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, {\b Argxc::optionsCapacity}, and {\b Argxc::optionsCount}.}\par
}
{\xe \v argxcCreateDocs\:Argx.c}
{\xe \v Argx.c\:argxcCreateDocs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * argxcCreateDocs ({\b Argxc} * argxc, {\b ArgxcStyle} style, const char * title, const char * mainInfo)}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generate documentation for the defined options. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i style} \cell }{Documentation output style. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i title} \cell }{Title of the documentation. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mainInfo} \cell }{Additional info to be displayed in the documentation. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
char* Documentation string (must be freed by caller). \par
}}}{
Definition at line {\b 375} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00376 \{\par
00377     {\cf19 if} (!argxc) {\cf19 return} NULL;\par
00378 \par
00379     {\cf18 size_t} bufferSize = 4096;\par
00380     {\cf18 char} *contentStr = malloc(bufferSize);\par
00381     {\cf19 if} (!contentStr) {\cf19 return} NULL;\par
00382 \par
00383     contentStr[0] = {\cf23 '\\0'};\par
00384 \par
00385     {\cf19 if} (style == ARGX_STYLE_PROFESSIONAL)\par
00386     \{\par
00387         {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00388         \{\par
00389             ArgxcOptions *opt = &argxc->options[i];\par
00390 \par
00391             {\cf20 // Main option header line}\par
00392             {\cf18 char} temp[512];\par
00393             snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "ID: %s\\n"}, opt->id ? opt->id : {\cf22 ""});\par
00394             strcat(contentStr, temp);\par
00395 \par
00396             snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "[ %s | %s"}, \par
00397                     opt->sparam ? opt->sparam : {\cf22 ""}, \par
00398                     opt->param ? opt->param : {\cf22 ""});\par
00399             strcat(contentStr, temp);\par
00400 \par
00401             {\cf19 if} (opt->hasSubParams && opt->subParamsCount > 0)\par
00402             \{\par
00403                 strcat(contentStr, {\cf22 " [ "});\par
00404 \par
00405                 {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00406                 \{\par
00407                     strcat(contentStr, opt->subParams[j].param ? opt->subParams[j].param : {\cf22 ""});\par
00408 \par
00409                     {\cf19 if} (j < opt->subParamsCount - 1)\par
00410                     \{\par
00411                         strcat(contentStr, {\cf22 " | "});\par
00412                     \} {\cf19 else} {\cf19 if} (j <= opt->subParamsCount)\par
00413                     \{\par
00414                         strcat(contentStr, {\cf22 " "});\par
00415                     \}\par
00416                 \}\par
00417 \par
00418                 strcat(contentStr, {\cf22 "] ] "});\par
00419             \} {\cf19 else} \{\par
00420                 strcat(contentStr, {\cf22 " ] "});\par
00421             \}\par
00422 \par
00423             strcat(contentStr, opt->info ? opt->info : {\cf22 ""});\par
00424             strcat(contentStr, {\cf22 "\\n"});\par
00425 \par
00426             {\cf20 // Print all sub-options}\par
00427             {\cf19 if} (opt->hasSubParams && opt->subParamsCount > 0)\par
00428             \{\par
00429                 {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00430                 \{\par
00431                     ArgxcOptions *sub = &opt->subParams[j];\par
00432 \par
00433                     {\cf20 // Create spacing for alignment}\par
00434                     {\cf18 size_t} paramLen = opt->param ? strlen(opt->param) : 0;\par
00435                     {\cf19 for} ({\cf18 size_t} k = 0; k < paramLen; k++)\par
00436                     \{\par
00437                         strcat(contentStr, {\cf22 " "});\par
00438                     \}\par
00439 \par
00440                     snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "  [ %s | %s ] %s\\n"},\par
00441                             sub->sparam ? sub->sparam : {\cf22 ""},\par
00442                             sub->param ? sub->param : {\cf22 ""},\par
00443                             sub->info ? sub->info : {\cf22 ""});\par
00444                     strcat(contentStr, temp);\par
00445                 \}\par
00446             \}\par
00447         \}\par
00448     \} {\cf19 else} {\cf19 if} (style == ARGX_STYLE_SIMPLE)\par
00449     \{\par
00450         {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00451         \{\par
00452             ArgxcOptions *opt = &argxc->options[i];\par
00453 \par
00454             {\cf18 char} temp[256];\par
00455             snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "%s, %s - %s\\n"},\par
00456                     opt->sparam ? opt->sparam : {\cf22 ""},\par
00457                     opt->param ? opt->param : {\cf22 ""},\par
00458                     opt->info ? opt->info : {\cf22 ""});\par
00459             strcat(contentStr, temp);\par
00460 \par
00461             {\cf19 if} (opt->hasSubParams && opt->subParamsCount > 0)\par
00462             \{\par
00463                 {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00464                 \{\par
00465                     ArgxcOptions *sub = &opt->subParams[j];\par
00466 \par
00467                     snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "  %s, %s - %s\\n"},\par
00468                             sub->sparam ? sub->sparam : {\cf22 ""},\par
00469                             sub->param ? sub->param : {\cf22 ""},\par
00470                             sub->info ? sub->info : {\cf22 ""});\par
00471                     strcat(contentStr, temp);\par
00472                 \}\par
00473             \}\par
00474         \}\par
00475     \}\par
00476 \par
00477     {\cf20 // Combine title, mainInfo, and content}\par
00478     {\cf18 size_t} titleLen = title ? strlen(title) : 0;\par
00479     {\cf18 size_t} mainInfoLen = mainInfo ? strlen(mainInfo) : 0;\par
00480     {\cf18 size_t} contentLen = strlen(contentStr);\par
00481     {\cf18 size_t} totalLen = titleLen + mainInfoLen + contentLen + 10; {\cf20 // Extra space for newlines}\par
00482 \par
00483     {\cf18 char} *result = malloc(totalLen);\par
00484     {\cf19 if} (!result)\par
00485     \{\par
00486         free(contentStr); contentStr = NULL;\par
00487         {\cf19 return} NULL;\par
00488     \}\par
00489 \par
00490     snprintf(result, totalLen, {\cf22 "%s\\n%s\\n%s"},\par
00491             title ? title : {\cf22 ""},\par
00492             mainInfo ? mainInfo : {\cf22 ""},\par
00493             contentStr);\par
00494 \par
00495     free(contentStr); contentStr = NULL;\par
00496     {\cf19 return} result;\par
00497 \}\par
}
{
\ql
References {\b ARGX_STYLE_PROFESSIONAL}, {\b ARGX_STYLE_SIMPLE}, {\b ArgxcOptions::hasSubParams}, {\b ArgxcOptions::id}, {\b ArgxcOptions::info}, {\b Argxc::options}, {\b Argxc::optionsCount}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcCreateError\:Argx.c}
{\xe \v Argx.c\:argxcCreateError}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcError} argxcCreateError (const char * type, const char * error, const char * help, int code)}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create an {\b ArgxcError} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{Type/category of the error. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i error} \cell }{Error message. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i help} \cell }{Help message for resolving the error. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i code} \cell }{Exit code or error code. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b ArgxcError} The created error struct. \par
}}}{
Definition at line {\b 667} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00668 \{\par
00669     ArgxcError err = \{0\};\par
00670 \par
00671     err.type = stringDuplicate(type);\par
00672     err.error = stringDuplicate(error);\par
00673     err.help = stringDuplicate(help);\par
00674     err.code = code;\par
00675 \par
00676     {\cf19 return} err;\par
00677 \}\par
}
{
\ql
References {\b ArgxcError::code}, {\b ArgxcError::error}, {\b ArgxcError::help}, {\b stringDuplicate()}, and {\b ArgxcError::type}.}\par
}
{\xe \v argxcCreateOption\:Argx.c}
{\xe \v Argx.c\:argxcCreateOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcOptions} argxcCreateOption (const char * id, const char * param, const char * sparam, const char * info, bool hasSubParams, bool hasAnySubParams)}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create a new option. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Option identifier. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i param} \cell }{Parameter name (e.g., \'96param). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sparam} \cell }{Short form (e.g., -p). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i info} \cell }{Description of the option. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hasSubParams} \cell }{Whether the option has sub-parameters. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hasAnySubParams} \cell }{Whether the option accepts any sub-parameters. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b ArgxcOptions} The created option. \par
}}}{
Definition at line {\b 607} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00609 \{\par
00610     ArgxcOptions option = \{0\};\par
00611 \par
00612     option.id = stringDuplicate({\cf18 id});\par
00613     option.param = stringDuplicate(param);\par
00614     option.sparam = stringDuplicate(sparam);\par
00615     option.info = stringDuplicate(info);\par
00616     option.hasSubParams = hasSubParams;\par
00617     option.hasAnySubParams = hasAnySubParams;\par
00618     option.subParams = NULL;\par
00619     option.subParamsCount = 0;\par
00620 \par
00621     {\cf19 return} option;\par
00622 \}\par
}
{
\ql
References {\b ArgxcOptions::hasAnySubParams}, {\b ArgxcOptions::hasSubParams}, {\b ArgxcOptions::id}, {\b ArgxcOptions::info}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b stringDuplicate()}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcDestroy\:Argx.c}
{\xe \v Argx.c\:argxcDestroy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcDestroy ({\b Argxc} * argxc)}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destroy an {\b Argxc} instance and free all associated memory. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance to destroy. \cell }
{\row }
}
}{
Definition at line {\b 113} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00114 \{\par
00115     {\cf19 if} (!argxc) {\cf19 return};\par
00116 \par
00117     free(argxc->id); argxc->id = NULL;\par
00118     {\cf19 if} (argxc->mainArgs) freeStringArray(argxc->mainArgs, argxc->mainArgsCount);\par
00119     {\cf19 if} (argxc->options) freeOptionsArray(argxc->options, argxc->optionsCount);\par
00120     free(argxc); argxc = NULL;\par
00121 \}\par
}
{
\ql
References {\b freeOptionsArray()}, {\b freeStringArray()}, {\b Argxc::id}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, and {\b Argxc::optionsCount}.}\par
{
\ql
Referenced by {\b argxcCreate()}.}\par
}
{\xe \v argxcFindParam\:Argx.c}
{\xe \v Argx.c\:argxcFindParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argxcFindParam ({\b Argxc} * argxc, const char * id)}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Find the index of a parameter by ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The identifier of the parameter to find. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Index of the parameter, or -1 if not found. \par
}}}{
Definition at line {\b 155} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00156 \{\par
00157     {\cf19 if} (!argxc || !{\cf18 id}) {\cf19 return} -1;\par
00158 \par
00159     {\cf20 // First check if it's a main parameter}\par
00160     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00161     \{\par
00162         {\cf19 if} (argxc->options[i].id && strcmp(argxc->options[i].id, {\cf18 id}) == 0)\par
00163         \{\par
00164             {\cf20 // Check if this main parameter exists in arguments}\par
00165             {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00166             \{\par
00167                 {\cf19 if} ((argxc->options[i].param && strcmp(argxc->mainArgs[j], argxc->options[i].param) == 0) ||\par
00168                         (argxc->options[i].sparam && strcmp(argxc->mainArgs[j], argxc->options[i].sparam) == 0))\par
00169                 \{\par
00170                     {\cf19 return} ({\cf18 int})i;\par
00171                 \}\par
00172             \}\par
00173         \}\par
00174     \}\par
00175 \par
00176     {\cf20 // Then look for sub-parameters}\par
00177     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00178     \{\par
00179         ArgxcOptions *opt = &argxc->options[i];\par
00180 \par
00181         {\cf20 // Check if the parent option exists in the arguments}\par
00182         {\cf18 bool} parentExists = {\cf17 false};\par
00183         {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00184         \{\par
00185             {\cf19 if} ((opt->param && strcmp(argxc->mainArgs[j], opt->param) == 0) ||\par
00186                     (opt->sparam && strcmp(argxc->mainArgs[j], opt->sparam) == 0))\par
00187             \{\par
00188                 parentExists = {\cf17 true};\par
00189                 {\cf19 break};\par
00190             \}\par
00191         \}\par
00192 \par
00193         {\cf19 if} (parentExists)\par
00194         \{\par
00195             {\cf20 // Find the index of the requested sub-parameter}\par
00196             {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00197             \{\par
00198                 {\cf19 if} (opt->subParams[j].id && strcmp(opt->subParams[j].id, {\cf18 id}) == 0)\par
00199                 \{\par
00200                     {\cf19 return} ({\cf18 int})j;\par
00201                 \}\par
00202             \}\par
00203         \}\par
00204     \}\par
00205 \par
00206     {\cf19 return} -1; {\cf20 // Not found}\par
00207 \}\par
}
{
\ql
References {\b ArgxcOptions::id}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, {\b Argxc::optionsCount}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
{
\ql
Referenced by {\b argxcGetSubParam()}, and {\b argxcParamExists()}.}\par
}
{\xe \v argxcFreeError\:Argx.c}
{\xe \v Argx.c\:argxcFreeError}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcFreeError ({\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcError} struct. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i error} \cell }{Pointer to the error to free. \cell }
{\row }
}
}{
Definition at line {\b 679} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00680 \{\par
00681     {\cf19 if} (!error) {\cf19 return};\par
00682 \par
00683     free(error->type); error->type = NULL;\par
00684     free(error->error); error->error = NULL;\par
00685     free(error->help); error->help = NULL;\par
00686     memset(error, 0, {\cf17 sizeof}(ArgxcError));\par
00687 \}\par
}
{
\ql
References {\b ArgxcError::error}, {\b ArgxcError::help}, and {\b ArgxcError::type}.}\par
}
{\xe \v argxcFreeOption\:Argx.c}
{\xe \v Argx.c\:argxcFreeOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcFreeOption ({\b ArgxcOptions} * option)}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcOptions} struct. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i option} \cell }{Pointer to the option to free. \cell }
{\row }
}
}{
Definition at line {\b 624} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00625 \{\par
00626     {\cf19 if} (!option) {\cf19 return};\par
00627 \par
00628     {\cf19 if} (option->id)\par
00629     \{ free(option->id); option->id = NULL; \}\par
00630     {\cf19 if} (option->param)\par
00631     \{ free(option->param); option->param = NULL; \}\par
00632     {\cf19 if} (option->sparam)\par
00633     \{ free(option->sparam); option->sparam = NULL; \}\par
00634     {\cf19 if} (option->info)\par
00635     \{ free(option->info); option->info = NULL; \}\par
00636 \par
00637     {\cf19 if} (option->subParams)\par
00638     \{\par
00639         {\cf19 for} ({\cf18 size_t} i = 0; i < option->subParamsCount; i++)\par
00640         \{\par
00641             argxcFreeOption(&option->subParams[i]);\par
00642         \}\par
00643 \par
00644         free(option->subParams); \par
00645         option->subParams = NULL;\par
00646         option->subParamsCapacity = 0;\par
00647         option->subParamsCount = 0;\par
00648     \}\par
00649 \par
00650     memset(option, 0, {\cf17 sizeof}(ArgxcOptions));\par
00651 \}\par
}
{
\ql
References {\b argxcFreeOption()}, {\b ArgxcOptions::id}, {\b ArgxcOptions::info}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcOptions::subParams}, {\b ArgxcOptions::subParamsCapacity}, and {\b ArgxcOptions::subParamsCount}.}\par
{
\ql
Referenced by {\b argxcFreeOption()}, and {\b freeOptionsArray()}.}\par
}
{\xe \v argxcFreeParam\:Argx.c}
{\xe \v Argx.c\:argxcFreeParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcFreeParam ({\b ArgxcParam} * param)}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free resources associated with an {\b ArgxcParam} struct. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i param} \cell }{Pointer to the parameter to free. \cell }
{\row }
}
}{
Definition at line {\b 653} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00654 \{\par
00655     {\cf19 if} (!param) {\cf19 return};\par
00656 \par
00657     free(param->subExists); param->subExists = NULL;\par
00658     memset(param, 0, {\cf17 sizeof}(ArgxcParam));\par
00659 \}\par
}
{
\ql
References {\b ArgxcParam::subExists}.}\par
}
{\xe \v argxcFreeStringArray\:Argx.c}
{\xe \v Argx.c\:argxcFreeStringArray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argxcFreeStringArray (char ** array, size_t count)}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Free a string array returned from {\b Argxc} (e.g., argv array). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i array} \cell }{The array to free. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i count} \cell }{Number of elements in the array. \cell }
{\row }
}
}{
Definition at line {\b 661} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00662 \{\par
00663     freeStringArray(array, count);\par
00664 \}\par
}
{
\ql
References {\b freeStringArray()}.}\par
}
{\xe \v argxcGetArgc\:Argx.c}
{\xe \v Argx.c\:argxcGetArgc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argxcGetArgc ({\b Argxc} * argxc)}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the number of command-line arguments passed. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Number of arguments. \par
}}}{
Definition at line {\b 588} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00589 \{\par
00590     {\cf19 return} argxc ? argxc->mainArgc : 0;\par
00591 \}\par
}
{
\ql
References {\b Argxc::mainArgc}.}\par
}
{\xe \v argxcGetId\:Argx.c}
{\xe \v Argx.c\:argxcGetId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * argxcGetId ({\b Argxc} * argxc)}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the identifier of the {\b Argxc} instance. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
const char* The ID string. \par
}}}{
Definition at line {\b 601} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00602 \{\par
00603     {\cf19 return} argxc ? argxc->id : NULL;\par
00604 \}\par
}
{
\ql
References {\b Argxc::id}.}\par
}
{\xe \v argxcGetMainArgs\:Argx.c}
{\xe \v Argx.c\:argxcGetMainArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char ** argxcGetMainArgs ({\b Argxc} * argxc, size_t * count)}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the raw command-line arguments passed to {\b Argxc}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i count} \cell }{Output: number of arguments returned. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
char** Array of argument strings. \par
}}}{
Definition at line {\b 570} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00571 \{\par
00572     {\cf19 if} (!argxc || !count) {\cf19 return} NULL;\par
00573 \par
00574     *count = argxc->mainArgsCount;\par
00575 \par
00576     {\cf20 // Create a copy of the array}\par
00577     {\cf18 char} **copy = malloc(argxc->mainArgsCount * {\cf17 sizeof}({\cf18 char}*));\par
00578     {\cf19 if} (!copy) {\cf19 return} NULL;\par
00579 \par
00580     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->mainArgsCount; i++)\par
00581     \{\par
00582         copy[i] = stringDuplicate(argxc->mainArgs[i]);\par
00583     \}\par
00584 \par
00585     {\cf19 return} copy;\par
00586 \}\par
}
{
\ql
References {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, and {\b stringDuplicate()}.}\par
}
{\xe \v argxcGetOptions\:Argx.c}
{\xe \v Argx.c\:argxcGetOptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcOptions} * argxcGetOptions ({\b Argxc} * argxc, size_t * count)}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get all top-level options defined for the {\b Argxc} instance. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i count} \cell }{Output: number of options returned. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
ArgxcOptions* Array of options. \par
}}}{
Definition at line {\b 593} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00594 \{\par
00595     {\cf19 if} (!argxc || !count) {\cf19 return} NULL;\par
00596 \par
00597     *count = argxc->optionsCount;\par
00598     {\cf19 return} argxc->options; {\cf20 // Return direct reference (be careful with modification)}\par
00599 \}\par
}
{
\ql
References {\b Argxc::options}, and {\b Argxc::optionsCount}.}\par
}
{\xe \v argxcGetParam\:Argx.c}
{\xe \v Argx.c\:argxcGetParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcParam} argxcGetParam ({\b Argxc} * argxc, const char * id)}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieve a parameter by ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The identifier of the parameter to retrieve. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b ArgxcParam} The parameter object. \par
}}}{
Definition at line {\b 214} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00215 \{\par
00216     ArgxcParam result = \{{\cf17 false}, NULL, 0\};\par
00217 \par
00218     {\cf19 if} (!argxc || !{\cf18 id} || argxc->mainArgc <= 1)\par
00219     \{\par
00220         {\cf19 return} result;\par
00221     \}\par
00222 \par
00223     {\cf20 // First, check if this is a top-level option}\par
00224     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00225     \{\par
00226         ArgxcOptions *opt = &argxc->options[i];\par
00227 \par
00228         {\cf19 if} (opt->id && strcmp(opt->id, {\cf18 id}) == 0)\par
00229         \{\par
00230             {\cf20 // Find the position of the main option in arguments}\par
00231             {\cf18 int} mainOptionPos = -1;\par
00232 \par
00233             {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00234             \{\par
00235                 {\cf19 if} ((opt->param && strcmp(argxc->mainArgs[j], opt->param) == 0) ||\par
00236                         (opt->sparam && strcmp(argxc->mainArgs[j], opt->sparam) == 0))\par
00237                 \{\par
00238                     result.exists = {\cf17 true};\par
00239                     mainOptionPos = j;\par
00240                     {\cf19 break};\par
00241                 \}\par
00242             \}\par
00243 \par
00244             {\cf19 if} (result.exists)\par
00245             \{\par
00246                 {\cf19 if} (opt->hasSubParams || opt->hasAnySubParams)\par
00247                 \{\par
00248                     {\cf20 // Allocate memory for sub-parameter existence array}\par
00249                     result.subExistsCount = opt->subParamsCount;\par
00250                     result.subExists = malloc(result.subExistsCount * {\cf17 sizeof}({\cf18 bool}));\par
00251 \par
00252                     {\cf19 if} (result.subExists)\par
00253                     \{\par
00254                         {\cf20 // Check each sub-parameter}\par
00255                         {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00256                         \{\par
00257                             {\cf18 bool} subMatched = {\cf17 false};\par
00258                             ArgxcOptions *sub = &opt->subParams[j];\par
00259 \par
00260                             {\cf20 // Look for sub-parameters after the main option}\par
00261                             {\cf19 for} ({\cf18 size_t} k = mainOptionPos + 1; k < argxc->mainArgsCount; k++)\par
00262                             \{\par
00263                                 {\cf19 if} ((sub->param && strcmp(argxc->mainArgs[k], sub->param) == 0) ||\par
00264                                         (sub->sparam && strcmp(argxc->mainArgs[k], sub->sparam) == 0))\par
00265                                 \{\par
00266                                     subMatched = {\cf17 true};\par
00267                                     {\cf19 break};\par
00268                                 \}\par
00269                             \}\par
00270 \par
00271                             result.subExists[j] = subMatched;\par
00272                         \}\par
00273                     \}\par
00274                 \}\par
00275 \par
00276                 {\cf19 return} result;\par
00277             \}\par
00278         \}\par
00279     \}\par
00280 \par
00281     {\cf20 // If not found as top-level, check if it's a sub-parameter}\par
00282     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00283     \{\par
00284         ArgxcOptions *opt = &argxc->options[i];\par
00285 \par
00286         {\cf20 // Find if the parent option exists and get its position}\par
00287         {\cf18 int} parentPos = -1;\par
00288 \par
00289         {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00290         \{\par
00291             {\cf19 if} ((opt->param && strcmp(argxc->mainArgs[j], opt->param) == 0) ||\par
00292                     (opt->sparam && strcmp(argxc->mainArgs[j], opt->sparam) == 0))\par
00293             \{\par
00294                 parentPos = j;\par
00295                 {\cf19 break};\par
00296             \}\par
00297         \}\par
00298 \par
00299         {\cf19 if} (parentPos >= 0 && (opt->hasSubParams || opt->hasAnySubParams))\par
00300         \{\par
00301             {\cf20 // Check if the requested sub-parameter exists after the parent}\par
00302             {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00303             \{\par
00304                 ArgxcOptions *sub = &opt->subParams[j];\par
00305 \par
00306                 {\cf19 if} (sub->id && strcmp(sub->id, {\cf18 id}) == 0)\par
00307                 \{\par
00308                     {\cf19 for} ({\cf18 size_t} k = parentPos + 1; k < argxc->mainArgsCount; k++)\par
00309                     \{\par
00310                         {\cf19 if} ((sub->param && strcmp(argxc->mainArgs[k], sub->param) == 0) ||\par
00311                                 (sub->sparam && strcmp(argxc->mainArgs[k], sub->sparam) == 0))\par
00312                         \{\par
00313                             result.exists = {\cf17 true};\par
00314                             {\cf19 break};\par
00315                         \}\par
00316                     \}\par
00317 \par
00318                     {\cf19 if} (!result.exists && ({\cf18 size_t})(parentPos + 1) < argxc->mainArgsCount)\par
00319                     \{\par
00320                         {\cf18 char} *nextArg = argxc->mainArgs[parentPos + 1];\par
00321 \par
00322                         {\cf19 if} ((sub->param && strcmp(nextArg, sub->param) == 0) ||\par
00323                                 (sub->sparam && strcmp(nextArg, sub->sparam) == 0))\par
00324                         \{\par
00325                             result.exists = {\cf17 true};\par
00326                         \}\par
00327                     \}\par
00328 \par
00329                     {\cf20 // Handle any sub-sub-parameters if they exist}\par
00330                     {\cf19 if} (result.exists && (sub->hasSubParams || sub->hasAnySubParams))\par
00331                     \{\par
00332                         result.subExistsCount = sub->subParamsCount;\par
00333                         result.subExists = malloc(result.subExistsCount * {\cf17 sizeof}({\cf18 bool}));\par
00334 \par
00335                         {\cf19 if} (result.subExists)\par
00336                         \{\par
00337                             {\cf19 for} ({\cf18 size_t} k = 0; k < sub->subParamsCount; k++)\par
00338                             \{\par
00339                                 {\cf18 bool} subsubMatched = {\cf17 false};\par
00340                                 ArgxcOptions *subsub = &sub->subParams[k];\par
00341 \par
00342                                 {\cf19 for} ({\cf18 size_t} l = 0; l < argxc->mainArgsCount; l++)\par
00343                                 \{\par
00344                                     {\cf19 if} ((subsub->param && strcmp(argxc->mainArgs[l], subsub->param) == 0) ||\par
00345                                             (subsub->sparam && strcmp(argxc->mainArgs[l], subsub->sparam) == 0))\par
00346                                     \{\par
00347                                         subsubMatched = {\cf17 true};\par
00348                                         {\cf19 break};\par
00349                                     \}\par
00350                                 \}\par
00351 \par
00352                                 result.subExists[k] = subsubMatched;\par
00353                             \}\par
00354                         \}\par
00355                     \}\par
00356 \par
00357                     {\cf19 return} result;\par
00358                 \}\par
00359             \}\par
00360         \}\par
00361     \}\par
00362 \par
00363     {\cf19 return} result;\par
00364 \}\par
}
{
\ql
References {\b ArgxcParam::exists}, {\b ArgxcOptions::hasAnySubParams}, {\b ArgxcOptions::hasSubParams}, {\b ArgxcOptions::id}, {\b Argxc::mainArgc}, {\b Argxc::mainArgs}, {\b Argxc::mainArgsCount}, {\b Argxc::options}, {\b Argxc::optionsCount}, {\b ArgxcOptions::param}, {\b ArgxcOptions::sparam}, {\b ArgxcParam::subExists}, {\b ArgxcParam::subExistsCount}, {\b ArgxcOptions::subParams}, and {\b ArgxcOptions::subParamsCount}.}\par
}
{\xe \v argxcGetSubParam\:Argx.c}
{\xe \v Argx.c\:argxcGetSubParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argxcGetSubParam ({\b Argxc} * argxc, const {\b ArgxcParam} * param, const char * id)}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieve a sub-parameter from a given parameter by ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i param} \cell }{Pointer to the parent parameter. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The identifier of the sub-parameter. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if the sub-parameter exists, false otherwise. \par
}}}{
Definition at line {\b 366} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00367 \{\par
00368     {\cf19 if} (!argxc || !param || !{\cf18 id}) {\cf19 return} {\cf17 false};\par
00369 \par
00370     {\cf18 int} index = argxcFindParam(argxc, {\cf18 id});\par
00371     {\cf19 return} argxcParamExists(argxc, {\cf18 id}) && param->subExists && index >= 0 && \par
00372         (size_t)index < param->subExistsCount && param->subExists[index];\par
00373 \}\par
}
{
\ql
References {\b argxcFindParam()}, {\b argxcParamExists()}, and {\b ArgxcParam::subExists}.}\par
}
{\xe \v argxcParamExists\:Argx.c}
{\xe \v Argx.c\:argxcParamExists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argxcParamExists ({\b Argxc} * argxc, const char * id)}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if a parameter with the given ID exists. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argxc} \cell }{Pointer to the {\b Argxc} instance. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The identifier of the parameter. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if the parameter exists, false otherwise. \par
}}}{
Definition at line {\b 209} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00210 \{\par
00211     {\cf19 return} argxcFindParam(argxc, {\cf18 id}) >= 0;\par
00212 \}\par
}
{
\ql
References {\b argxcFindParam()}.}\par
{
\ql
Referenced by {\b argxcGetSubParam()}.}\par
}
{\xe \v freeOptionsArray\:Argx.c}
{\xe \v Argx.c\:freeOptionsArray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static void freeOptionsArray ({\b ArgxcOptions} * options, size_t count){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 50} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00051 \{\par
00052     {\cf19 if} (!options) {\cf19 return};\par
00053 \par
00054     {\cf19 for} ({\cf18 size_t} i = 0; i < count; i++)\par
00055     \{\par
00056         {\cf19 if} (&options[i]) argxcFreeOption(&options[i]);\par
00057     \}\par
00058 \par
00059     {\cf19 if} (options)\par
00060     \{ free(options); options = NULL; \}\par
00061 \}\par
}
{
\ql
References {\b argxcFreeOption()}.}\par
{
\ql
Referenced by {\b argxcDestroy()}.}\par
}
{\xe \v freeStringArray\:Argx.c}
{\xe \v Argx.c\:freeStringArray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static void freeStringArray (char ** array, size_t count){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 38} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00039 \{\par
00040     {\cf19 if} (!array) {\cf19 return};\par
00041     {\cf19 for} ({\cf18 size_t} i = 0; i < count; i++)\par
00042     \{\par
00043         {\cf19 if} (array[i]) free(array[i]);\par
00044     \}\par
00045 \par
00046     {\cf19 if} (array)\par
00047     \{ free(array); array = NULL; \}\par
00048 \}\par
}
{
\ql
Referenced by {\b argxcDestroy()}, and {\b argxcFreeStringArray()}.}\par
}
{\xe \v stringDuplicate\:Argx.c}
{\xe \v Argx.c\:stringDuplicate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static char * stringDuplicate (const char * str){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 26} of file {\b Argx.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00027 \{\par
00028     {\cf19 if} (!str) {\cf19 return} NULL;\par
00029     {\cf18 size_t} len = strlen(str) + 1;\par
00030     {\cf18 char} *dup = malloc(len);\par
00031     {\cf19 if} (dup)\par
00032     \{\par
00033         memcpy(dup, str, len);\par
00034     \}\par
00035     {\cf19 return} dup;\par
00036 \}\par
}
{
\ql
Referenced by {\b argxcCreate()}, {\b argxcCreateError()}, {\b argxcCreateOption()}, and {\b argxcGetMainArgs()}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Argx.c\par \pard\plain 
{\tc\tcl2 \v src/Argx.c}
{\xe \v src/Argx.c}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* src/argxc.c}\par
00002 {\cf20  * Owned and created by: pcannon09}\par
00003 {\cf20  * Converted to C API}\par
00004 {\cf20  */}\par
00005 \par
00006 {\cf21 #include <stdlib.h>}\par
00007 {\cf21 #include <string.h>}\par
00008 {\cf21 #include <stdio.h>}\par
00009 {\cf21 #include <stdbool.h>}\par
00010 \par
00011 {\cf21 #include "../inc/Argx.h"}\par
00012 {\cf21 #include "../inc/types.h"}\par
00013 \par
00014 {\cf20 // Internal structure definition}\par
00015 {\cf17 struct }Argxc \{\par
00016     {\cf18 char} *id;\par
00017     {\cf18 char} **mainArgs;\par
00018     {\cf18 size_t} mainArgsCount;\par
00019     {\cf18 unsigned} {\cf18 int} mainArgc;\par
00020     ArgxcOptions *options;\par
00021     {\cf18 size_t} optionsCount;\par
00022     {\cf18 size_t} optionsCapacity;\par
00023 \};\par
00024 \par
00025 {\cf20 // Static helper functions}\par
00026 {\cf17 static} {\cf18 char} *stringDuplicate({\cf17 const} {\cf18 char} *str)\par
00027 \{\par
00028     {\cf19 if} (!str) {\cf19 return} NULL;\par
00029     {\cf18 size_t} len = strlen(str) + 1;\par
00030     {\cf18 char} *dup = malloc(len);\par
00031     {\cf19 if} (dup)\par
00032     \{\par
00033         memcpy(dup, str, len);\par
00034     \}\par
00035     {\cf19 return} dup;\par
00036 \}\par
00037 \par
00038 {\cf17 static} {\cf18 void} freeStringArray({\cf18 char} **array, {\cf18 size_t} count)\par
00039 \{\par
00040     {\cf19 if} (!array) {\cf19 return};\par
00041     {\cf19 for} ({\cf18 size_t} i = 0; i < count; i++)\par
00042     \{\par
00043         {\cf19 if} (array[i]) free(array[i]);\par
00044     \}\par
00045 \par
00046     {\cf19 if} (array)\par
00047     \{ free(array); array = NULL; \}\par
00048 \}\par
00049 \par
00050 {\cf17 static} {\cf18 void} freeOptionsArray(ArgxcOptions *options, {\cf18 size_t} count)\par
00051 \{\par
00052     {\cf19 if} (!options) {\cf19 return};\par
00053 \par
00054     {\cf19 for} ({\cf18 size_t} i = 0; i < count; i++)\par
00055     \{\par
00056         {\cf19 if} (&options[i]) argxcFreeOption(&options[i]);\par
00057     \}\par
00058 \par
00059     {\cf19 if} (options)\par
00060     \{ free(options); options = NULL; \}\par
00061 \}\par
00062 \par
00063 {\cf20 // Constructor/Destructor implementations}\par
00064 Argxc *argxcCreate({\cf17 const} {\cf18 char} *{\cf18 id}, {\cf18 int} argc, {\cf18 char} *argv[])\par
00065 \{\par
00066     Argxc *argxc = malloc({\cf17 sizeof}(Argxc));\par
00067     {\cf19 if} (!argxc) {\cf19 return} NULL;\par
00068 \par
00069     argxc->id = stringDuplicate({\cf18 id});\par
00070     argxc->mainArgc = argc;\par
00071     argxc->mainArgsCount = argc;\par
00072     argxc->mainArgs = malloc(argc * {\cf17 sizeof}({\cf18 char}*));\par
00073     argxc->optionsCount = 0;\par
00074     argxc->optionsCapacity = 10;\par
00075     argxc->options = malloc(argxc->optionsCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00076 \par
00077     {\cf19 if} (!argxc->mainArgs || !argxc->options)\par
00078     \{\par
00079         argxcDestroy(argxc);\par
00080         {\cf19 return} NULL;\par
00081     \}\par
00082 \par
00083     {\cf19 for} ({\cf18 int} i = 0; i < argc; i++)\par
00084     \{\par
00085         argxc->mainArgs[i] = stringDuplicate(argv[i]);\par
00086     \}\par
00087 \par
00088     {\cf19 return} argxc;\par
00089 \}\par
00090 \par
00091 Argxc *argxcCreateDefault({\cf18 void})\par
00092 \{\par
00093     Argxc *argxc = malloc({\cf17 sizeof}(Argxc));\par
00094     {\cf19 if} (!argxc) {\cf19 return} NULL;\par
00095 \par
00096     argxc->id = NULL;\par
00097     argxc->mainArgs = NULL;\par
00098     argxc->mainArgsCount = 0;\par
00099     argxc->mainArgc = 0;\par
00100     argxc->optionsCount = 0;\par
00101     argxc->optionsCapacity = 10;\par
00102     argxc->options = malloc(argxc->optionsCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00103 \par
00104     {\cf19 if} (!argxc->options)\par
00105     \{\par
00106         free(argxc); argxc = NULL;\par
00107         {\cf19 return} NULL;\par
00108     \}\par
00109 \par
00110     {\cf19 return} argxc;\par
00111 \}\par
00112 \par
00113 {\cf18 void} argxcDestroy(Argxc *argxc)\par
00114 \{\par
00115     {\cf19 if} (!argxc) {\cf19 return};\par
00116 \par
00117     free(argxc->id); argxc->id = NULL;\par
00118     {\cf19 if} (argxc->mainArgs) freeStringArray(argxc->mainArgs, argxc->mainArgsCount);\par
00119     {\cf19 if} (argxc->options) freeOptionsArray(argxc->options, argxc->optionsCount);\par
00120     free(argxc); argxc = NULL;\par
00121 \}\par
00122 \par
00123 {\cf20 // Core functionality implementations}\par
00124 {\cf18 void} argxcAddOption(Argxc *argxc, ArgxcOptions option)\par
00125 \{\par
00126     {\cf19 if} (!argxc) {\cf19 return};\par
00127 \par
00128     {\cf19 if} (argxc->optionsCount >= argxc->optionsCapacity)\par
00129     \{\par
00130         argxc->optionsCapacity *= 2;\par
00131         argxc->options = realloc(argxc->options, argxc->optionsCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00132         {\cf19 if} (!argxc->options) {\cf19 return};\par
00133     \}\par
00134 \par
00135     argxc->options[argxc->optionsCount++] = option;\par
00136 \}\par
00137 \par
00138 {\cf18 void} argxcAddSubOption(ArgxcOptions *parent, ArgxcOptions subOption)\par
00139 \{\par
00140     {\cf19 if} (!parent) {\cf19 return};\par
00141 \par
00142     {\cf19 if} (parent->subParamsCount >= parent->subParamsCapacity)\par
00143     \{\par
00144         {\cf18 size_t} newCapacity = parent->subParamsCapacity == 0 ? 2 : parent->subParamsCapacity * 2;\par
00145         ArgxcOptions *newSubParams = realloc(parent->subParams, newCapacity * {\cf17 sizeof}(ArgxcOptions));\par
00146         {\cf19 if} (!newSubParams) {\cf19 return};\par
00147 \par
00148         parent->subParams = newSubParams;\par
00149         parent->subParamsCapacity = newCapacity;\par
00150     \}\par
00151 \par
00152     parent->subParams[parent->subParamsCount++] = subOption;\par
00153 \}\par
00154 \par
00155 {\cf18 int} argxcFindParam(Argxc *argxc, {\cf17 const} {\cf18 char} *{\cf18 id})\par
00156 \{\par
00157     {\cf19 if} (!argxc || !{\cf18 id}) {\cf19 return} -1;\par
00158 \par
00159     {\cf20 // First check if it's a main parameter}\par
00160     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00161     \{\par
00162         {\cf19 if} (argxc->options[i].id && strcmp(argxc->options[i].id, {\cf18 id}) == 0)\par
00163         \{\par
00164             {\cf20 // Check if this main parameter exists in arguments}\par
00165             {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00166             \{\par
00167                 {\cf19 if} ((argxc->options[i].param && strcmp(argxc->mainArgs[j], argxc->options[i].param) == 0) ||\par
00168                         (argxc->options[i].sparam && strcmp(argxc->mainArgs[j], argxc->options[i].sparam) == 0))\par
00169                 \{\par
00170                     {\cf19 return} ({\cf18 int})i;\par
00171                 \}\par
00172             \}\par
00173         \}\par
00174     \}\par
00175 \par
00176     {\cf20 // Then look for sub-parameters}\par
00177     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00178     \{\par
00179         ArgxcOptions *opt = &argxc->options[i];\par
00180 \par
00181         {\cf20 // Check if the parent option exists in the arguments}\par
00182         {\cf18 bool} parentExists = {\cf17 false};\par
00183         {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00184         \{\par
00185             {\cf19 if} ((opt->param && strcmp(argxc->mainArgs[j], opt->param) == 0) ||\par
00186                     (opt->sparam && strcmp(argxc->mainArgs[j], opt->sparam) == 0))\par
00187             \{\par
00188                 parentExists = {\cf17 true};\par
00189                 {\cf19 break};\par
00190             \}\par
00191         \}\par
00192 \par
00193         {\cf19 if} (parentExists)\par
00194         \{\par
00195             {\cf20 // Find the index of the requested sub-parameter}\par
00196             {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00197             \{\par
00198                 {\cf19 if} (opt->subParams[j].id && strcmp(opt->subParams[j].id, {\cf18 id}) == 0)\par
00199                 \{\par
00200                     {\cf19 return} ({\cf18 int})j;\par
00201                 \}\par
00202             \}\par
00203         \}\par
00204     \}\par
00205 \par
00206     {\cf19 return} -1; {\cf20 // Not found}\par
00207 \}\par
00208 \par
00209 {\cf18 bool} argxcParamExists(Argxc *argxc, {\cf17 const} {\cf18 char} *{\cf18 id})\par
00210 \{\par
00211     {\cf19 return} argxcFindParam(argxc, {\cf18 id}) >= 0;\par
00212 \}\par
00213 \par
00214 ArgxcParam argxcGetParam(Argxc *argxc, {\cf17 const} {\cf18 char} *{\cf18 id})\par
00215 \{\par
00216     ArgxcParam result = \{{\cf17 false}, NULL, 0\};\par
00217 \par
00218     {\cf19 if} (!argxc || !{\cf18 id} || argxc->mainArgc <= 1)\par
00219     \{\par
00220         {\cf19 return} result;\par
00221     \}\par
00222 \par
00223     {\cf20 // First, check if this is a top-level option}\par
00224     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00225     \{\par
00226         ArgxcOptions *opt = &argxc->options[i];\par
00227 \par
00228         {\cf19 if} (opt->id && strcmp(opt->id, {\cf18 id}) == 0)\par
00229         \{\par
00230             {\cf20 // Find the position of the main option in arguments}\par
00231             {\cf18 int} mainOptionPos = -1;\par
00232 \par
00233             {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00234             \{\par
00235                 {\cf19 if} ((opt->param && strcmp(argxc->mainArgs[j], opt->param) == 0) ||\par
00236                         (opt->sparam && strcmp(argxc->mainArgs[j], opt->sparam) == 0))\par
00237                 \{\par
00238                     result.exists = {\cf17 true};\par
00239                     mainOptionPos = j;\par
00240                     {\cf19 break};\par
00241                 \}\par
00242             \}\par
00243 \par
00244             {\cf19 if} (result.exists)\par
00245             \{\par
00246                 {\cf19 if} (opt->hasSubParams || opt->hasAnySubParams)\par
00247                 \{\par
00248                     {\cf20 // Allocate memory for sub-parameter existence array}\par
00249                     result.subExistsCount = opt->subParamsCount;\par
00250                     result.subExists = malloc(result.subExistsCount * {\cf17 sizeof}({\cf18 bool}));\par
00251 \par
00252                     {\cf19 if} (result.subExists)\par
00253                     \{\par
00254                         {\cf20 // Check each sub-parameter}\par
00255                         {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00256                         \{\par
00257                             {\cf18 bool} subMatched = {\cf17 false};\par
00258                             ArgxcOptions *sub = &opt->subParams[j];\par
00259 \par
00260                             {\cf20 // Look for sub-parameters after the main option}\par
00261                             {\cf19 for} ({\cf18 size_t} k = mainOptionPos + 1; k < argxc->mainArgsCount; k++)\par
00262                             \{\par
00263                                 {\cf19 if} ((sub->param && strcmp(argxc->mainArgs[k], sub->param) == 0) ||\par
00264                                         (sub->sparam && strcmp(argxc->mainArgs[k], sub->sparam) == 0))\par
00265                                 \{\par
00266                                     subMatched = {\cf17 true};\par
00267                                     {\cf19 break};\par
00268                                 \}\par
00269                             \}\par
00270 \par
00271                             result.subExists[j] = subMatched;\par
00272                         \}\par
00273                     \}\par
00274                 \}\par
00275 \par
00276                 {\cf19 return} result;\par
00277             \}\par
00278         \}\par
00279     \}\par
00280 \par
00281     {\cf20 // If not found as top-level, check if it's a sub-parameter}\par
00282     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00283     \{\par
00284         ArgxcOptions *opt = &argxc->options[i];\par
00285 \par
00286         {\cf20 // Find if the parent option exists and get its position}\par
00287         {\cf18 int} parentPos = -1;\par
00288 \par
00289         {\cf19 for} ({\cf18 size_t} j = 0; j < argxc->mainArgsCount; j++)\par
00290         \{\par
00291             {\cf19 if} ((opt->param && strcmp(argxc->mainArgs[j], opt->param) == 0) ||\par
00292                     (opt->sparam && strcmp(argxc->mainArgs[j], opt->sparam) == 0))\par
00293             \{\par
00294                 parentPos = j;\par
00295                 {\cf19 break};\par
00296             \}\par
00297         \}\par
00298 \par
00299         {\cf19 if} (parentPos >= 0 && (opt->hasSubParams || opt->hasAnySubParams))\par
00300         \{\par
00301             {\cf20 // Check if the requested sub-parameter exists after the parent}\par
00302             {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00303             \{\par
00304                 ArgxcOptions *sub = &opt->subParams[j];\par
00305 \par
00306                 {\cf19 if} (sub->id && strcmp(sub->id, {\cf18 id}) == 0)\par
00307                 \{\par
00308                     {\cf19 for} ({\cf18 size_t} k = parentPos + 1; k < argxc->mainArgsCount; k++)\par
00309                     \{\par
00310                         {\cf19 if} ((sub->param && strcmp(argxc->mainArgs[k], sub->param) == 0) ||\par
00311                                 (sub->sparam && strcmp(argxc->mainArgs[k], sub->sparam) == 0))\par
00312                         \{\par
00313                             result.exists = {\cf17 true};\par
00314                             {\cf19 break};\par
00315                         \}\par
00316                     \}\par
00317 \par
00318                     {\cf19 if} (!result.exists && ({\cf18 size_t})(parentPos + 1) < argxc->mainArgsCount)\par
00319                     \{\par
00320                         {\cf18 char} *nextArg = argxc->mainArgs[parentPos + 1];\par
00321 \par
00322                         {\cf19 if} ((sub->param && strcmp(nextArg, sub->param) == 0) ||\par
00323                                 (sub->sparam && strcmp(nextArg, sub->sparam) == 0))\par
00324                         \{\par
00325                             result.exists = {\cf17 true};\par
00326                         \}\par
00327                     \}\par
00328 \par
00329                     {\cf20 // Handle any sub-sub-parameters if they exist}\par
00330                     {\cf19 if} (result.exists && (sub->hasSubParams || sub->hasAnySubParams))\par
00331                     \{\par
00332                         result.subExistsCount = sub->subParamsCount;\par
00333                         result.subExists = malloc(result.subExistsCount * {\cf17 sizeof}({\cf18 bool}));\par
00334 \par
00335                         {\cf19 if} (result.subExists)\par
00336                         \{\par
00337                             {\cf19 for} ({\cf18 size_t} k = 0; k < sub->subParamsCount; k++)\par
00338                             \{\par
00339                                 {\cf18 bool} subsubMatched = {\cf17 false};\par
00340                                 ArgxcOptions *subsub = &sub->subParams[k];\par
00341 \par
00342                                 {\cf19 for} ({\cf18 size_t} l = 0; l < argxc->mainArgsCount; l++)\par
00343                                 \{\par
00344                                     {\cf19 if} ((subsub->param && strcmp(argxc->mainArgs[l], subsub->param) == 0) ||\par
00345                                             (subsub->sparam && strcmp(argxc->mainArgs[l], subsub->sparam) == 0))\par
00346                                     \{\par
00347                                         subsubMatched = {\cf17 true};\par
00348                                         {\cf19 break};\par
00349                                     \}\par
00350                                 \}\par
00351 \par
00352                                 result.subExists[k] = subsubMatched;\par
00353                             \}\par
00354                         \}\par
00355                     \}\par
00356 \par
00357                     {\cf19 return} result;\par
00358                 \}\par
00359             \}\par
00360         \}\par
00361     \}\par
00362 \par
00363     {\cf19 return} result;\par
00364 \}\par
00365 \par
00366 {\cf18 bool} argxcGetSubParam(Argxc *argxc, {\cf17 const} ArgxcParam *param, {\cf17 const} {\cf18 char} *{\cf18 id})\par
00367 \{\par
00368     {\cf19 if} (!argxc || !param || !{\cf18 id}) {\cf19 return} {\cf17 false};\par
00369 \par
00370     {\cf18 int} index = argxcFindParam(argxc, {\cf18 id});\par
00371     {\cf19 return} argxcParamExists(argxc, {\cf18 id}) && param->subExists && index >= 0 && \par
00372         (size_t)index < param->subExistsCount && param->subExists[index];\par
00373 \}\par
00374 \par
00375 {\cf18 char} *argxcCreateDocs(Argxc *argxc, ArgxcStyle style, {\cf17 const} {\cf18 char} *title, {\cf17 const} {\cf18 char} *mainInfo)\par
00376 \{\par
00377     {\cf19 if} (!argxc) {\cf19 return} NULL;\par
00378 \par
00379     {\cf18 size_t} bufferSize = 4096;\par
00380     {\cf18 char} *contentStr = malloc(bufferSize);\par
00381     {\cf19 if} (!contentStr) {\cf19 return} NULL;\par
00382 \par
00383     contentStr[0] = {\cf23 '\\0'};\par
00384 \par
00385     {\cf19 if} (style == ARGX_STYLE_PROFESSIONAL)\par
00386     \{\par
00387         {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00388         \{\par
00389             ArgxcOptions *opt = &argxc->options[i];\par
00390 \par
00391             {\cf20 // Main option header line}\par
00392             {\cf18 char} temp[512];\par
00393             snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "ID: %s\\n"}, opt->id ? opt->id : {\cf22 ""});\par
00394             strcat(contentStr, temp);\par
00395 \par
00396             snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "[ %s | %s"}, \par
00397                     opt->sparam ? opt->sparam : {\cf22 ""}, \par
00398                     opt->param ? opt->param : {\cf22 ""});\par
00399             strcat(contentStr, temp);\par
00400 \par
00401             {\cf19 if} (opt->hasSubParams && opt->subParamsCount > 0)\par
00402             \{\par
00403                 strcat(contentStr, {\cf22 " [ "});\par
00404 \par
00405                 {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00406                 \{\par
00407                     strcat(contentStr, opt->subParams[j].param ? opt->subParams[j].param : {\cf22 ""});\par
00408 \par
00409                     {\cf19 if} (j < opt->subParamsCount - 1)\par
00410                     \{\par
00411                         strcat(contentStr, {\cf22 " | "});\par
00412                     \} {\cf19 else} {\cf19 if} (j <= opt->subParamsCount)\par
00413                     \{\par
00414                         strcat(contentStr, {\cf22 " "});\par
00415                     \}\par
00416                 \}\par
00417 \par
00418                 strcat(contentStr, {\cf22 "] ] "});\par
00419             \} {\cf19 else} \{\par
00420                 strcat(contentStr, {\cf22 " ] "});\par
00421             \}\par
00422 \par
00423             strcat(contentStr, opt->info ? opt->info : {\cf22 ""});\par
00424             strcat(contentStr, {\cf22 "\\n"});\par
00425 \par
00426             {\cf20 // Print all sub-options}\par
00427             {\cf19 if} (opt->hasSubParams && opt->subParamsCount > 0)\par
00428             \{\par
00429                 {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00430                 \{\par
00431                     ArgxcOptions *sub = &opt->subParams[j];\par
00432 \par
00433                     {\cf20 // Create spacing for alignment}\par
00434                     {\cf18 size_t} paramLen = opt->param ? strlen(opt->param) : 0;\par
00435                     {\cf19 for} ({\cf18 size_t} k = 0; k < paramLen; k++)\par
00436                     \{\par
00437                         strcat(contentStr, {\cf22 " "});\par
00438                     \}\par
00439 \par
00440                     snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "  [ %s | %s ] %s\\n"},\par
00441                             sub->sparam ? sub->sparam : {\cf22 ""},\par
00442                             sub->param ? sub->param : {\cf22 ""},\par
00443                             sub->info ? sub->info : {\cf22 ""});\par
00444                     strcat(contentStr, temp);\par
00445                 \}\par
00446             \}\par
00447         \}\par
00448     \} {\cf19 else} {\cf19 if} (style == ARGX_STYLE_SIMPLE)\par
00449     \{\par
00450         {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->optionsCount; i++)\par
00451         \{\par
00452             ArgxcOptions *opt = &argxc->options[i];\par
00453 \par
00454             {\cf18 char} temp[256];\par
00455             snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "%s, %s - %s\\n"},\par
00456                     opt->sparam ? opt->sparam : {\cf22 ""},\par
00457                     opt->param ? opt->param : {\cf22 ""},\par
00458                     opt->info ? opt->info : {\cf22 ""});\par
00459             strcat(contentStr, temp);\par
00460 \par
00461             {\cf19 if} (opt->hasSubParams && opt->subParamsCount > 0)\par
00462             \{\par
00463                 {\cf19 for} ({\cf18 size_t} j = 0; j < opt->subParamsCount; j++)\par
00464                 \{\par
00465                     ArgxcOptions *sub = &opt->subParams[j];\par
00466 \par
00467                     snprintf(temp, {\cf17 sizeof}(temp), {\cf22 "  %s, %s - %s\\n"},\par
00468                             sub->sparam ? sub->sparam : {\cf22 ""},\par
00469                             sub->param ? sub->param : {\cf22 ""},\par
00470                             sub->info ? sub->info : {\cf22 ""});\par
00471                     strcat(contentStr, temp);\par
00472                 \}\par
00473             \}\par
00474         \}\par
00475     \}\par
00476 \par
00477     {\cf20 // Combine title, mainInfo, and content}\par
00478     {\cf18 size_t} titleLen = title ? strlen(title) : 0;\par
00479     {\cf18 size_t} mainInfoLen = mainInfo ? strlen(mainInfo) : 0;\par
00480     {\cf18 size_t} contentLen = strlen(contentStr);\par
00481     {\cf18 size_t} totalLen = titleLen + mainInfoLen + contentLen + 10; {\cf20 // Extra space for newlines}\par
00482 \par
00483     {\cf18 char} *result = malloc(totalLen);\par
00484     {\cf19 if} (!result)\par
00485     \{\par
00486         free(contentStr); contentStr = NULL;\par
00487         {\cf19 return} NULL;\par
00488     \}\par
00489 \par
00490     snprintf(result, totalLen, {\cf22 "%s\\n%s\\n%s"},\par
00491             title ? title : {\cf22 ""},\par
00492             mainInfo ? mainInfo : {\cf22 ""},\par
00493             contentStr);\par
00494 \par
00495     free(contentStr); contentStr = NULL;\par
00496     {\cf19 return} result;\par
00497 \}\par
00498 \par
00499 {\cf18 bool} argxcCompareArgs(ArgxcOptions *options, {\cf18 size_t} optionsCount, {\cf18 char} **argv, {\cf18 size_t} argvCount)\par
00500 \{\par
00501     {\cf19 if} (!options || !argv) {\cf19 return} {\cf17 false};\par
00502 \par
00503     {\cf19 for} ({\cf18 size_t} i = 1; i < argvCount; i++)\par
00504     \{\par
00505         {\cf17 const} {\cf18 char} *arg = argv[i];\par
00506 \par
00507         {\cf18 bool} found = {\cf17 false};\par
00508         {\cf18 bool} hasSubParams = {\cf17 false};\par
00509         {\cf18 bool} hasAnySubParams = {\cf17 false};\par
00510         ArgxcOptions *matchedOption = NULL;\par
00511 \par
00512         {\cf20 // Find the matching option}\par
00513         {\cf19 for} ({\cf18 size_t} j = 0; j < optionsCount; j++)\par
00514         \{\par
00515             {\cf19 if} ((options[j].sparam && strcmp(options[j].sparam, arg) == 0) ||\par
00516                     (options[j].param && strcmp(options[j].param, arg) == 0))\par
00517             \{\par
00518                 found = {\cf17 true};\par
00519                 hasSubParams = options[j].hasSubParams;\par
00520                 hasAnySubParams = options[j].hasAnySubParams;\par
00521                 matchedOption = &options[j];\par
00522                 {\cf19 break};\par
00523             \}\par
00524         \}\par
00525 \par
00526         {\cf19 if} (!found) {\cf19 return} {\cf17 false};\par
00527 \par
00528         {\cf19 if} (hasSubParams || hasAnySubParams)\par
00529         \{\par
00530             {\cf20 // Check if there's a next argument}\par
00531             {\cf19 if} (i + 1 < argvCount)\par
00532             \{\par
00533                 {\cf17 const} {\cf18 char} *nextArg = argv[i + 1];\par
00534 \par
00535                 {\cf20 // Check if next argument is a sub-parameter}\par
00536                 {\cf18 bool} isSubParam = {\cf17 false};\par
00537 \par
00538                 {\cf19 if} (nextArg && strlen(nextArg) > 0 && nextArg[0] != {\cf23 '-'})\par
00539                 \{\par
00540                     {\cf20 // Validate if it's a valid sub-parameter}\par
00541                     {\cf19 for} ({\cf18 size_t} k = 0; k < matchedOption->subParamsCount; k++)\par
00542                     \{\par
00543                         {\cf19 if} ((matchedOption->subParams[k].param && strcmp(matchedOption->subParams[k].param, nextArg) == 0) ||\par
00544                                 (matchedOption->subParams[k].sparam && strcmp(matchedOption->subParams[k].sparam, nextArg) == 0))\par
00545                         \{\par
00546                             isSubParam = {\cf17 true};\par
00547                             {\cf19 break};\par
00548                         \}\par
00549                     \}\par
00550 \par
00551                     {\cf19 if} (isSubParam)\par
00552                     \{\par
00553                         i++; {\cf20 // Skip the sub-parameter}\par
00554                     \} {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams)\par
00555                     \{\par
00556                         {\cf19 return} {\cf17 false};\par
00557                     \}\par
00558                 \} {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams)\par
00559                 \{\par
00560                     {\cf19 return} {\cf17 false};\par
00561                 \}\par
00562             \}\par
00563         \}\par
00564     \}\par
00565 \par
00566     {\cf19 return} {\cf17 true};\par
00567 \}\par
00568 \par
00569 {\cf20 // Getters}\par
00570 {\cf18 char} **argxcGetMainArgs(Argxc *argxc, {\cf18 size_t} *count)\par
00571 \{\par
00572     {\cf19 if} (!argxc || !count) {\cf19 return} NULL;\par
00573 \par
00574     *count = argxc->mainArgsCount;\par
00575 \par
00576     {\cf20 // Create a copy of the array}\par
00577     {\cf18 char} **copy = malloc(argxc->mainArgsCount * {\cf17 sizeof}({\cf18 char}*));\par
00578     {\cf19 if} (!copy) {\cf19 return} NULL;\par
00579 \par
00580     {\cf19 for} ({\cf18 size_t} i = 0; i < argxc->mainArgsCount; i++)\par
00581     \{\par
00582         copy[i] = stringDuplicate(argxc->mainArgs[i]);\par
00583     \}\par
00584 \par
00585     {\cf19 return} copy;\par
00586 \}\par
00587 \par
00588 {\cf18 int} argxcGetArgc(Argxc *argxc)\par
00589 \{\par
00590     {\cf19 return} argxc ? argxc->mainArgc : 0;\par
00591 \}\par
00592 \par
00593 ArgxcOptions *argxcGetOptions(Argxc *argxc, {\cf18 size_t} *count)\par
00594 \{\par
00595     {\cf19 if} (!argxc || !count) {\cf19 return} NULL;\par
00596 \par
00597     *count = argxc->optionsCount;\par
00598     {\cf19 return} argxc->options; {\cf20 // Return direct reference (be careful with modification)}\par
00599 \}\par
00600 \par
00601 {\cf17 const} {\cf18 char} *argxcGetId(Argxc *argxc)\par
00602 \{\par
00603     {\cf19 return} argxc ? argxc->id : NULL;\par
00604 \}\par
00605 \par
00606 {\cf20 // Utility functions for memory management}\par
00607 ArgxcOptions argxcCreateOption({\cf17 const} {\cf18 char} *{\cf18 id}, {\cf17 const} {\cf18 char} *param, {\cf17 const} {\cf18 char} *sparam, \par
00608         {\cf17 const} {\cf18 char} *info, {\cf18 bool} hasSubParams, {\cf18 bool} hasAnySubParams)\par
00609 \{\par
00610     ArgxcOptions option = \{0\};\par
00611 \par
00612     option.id = stringDuplicate({\cf18 id});\par
00613     option.param = stringDuplicate(param);\par
00614     option.sparam = stringDuplicate(sparam);\par
00615     option.info = stringDuplicate(info);\par
00616     option.hasSubParams = hasSubParams;\par
00617     option.hasAnySubParams = hasAnySubParams;\par
00618     option.subParams = NULL;\par
00619     option.subParamsCount = 0;\par
00620 \par
00621     {\cf19 return} option;\par
00622 \}\par
00623 \par
00624 {\cf18 void} argxcFreeOption(ArgxcOptions *option)\par
00625 \{\par
00626     {\cf19 if} (!option) {\cf19 return};\par
00627 \par
00628     {\cf19 if} (option->id)\par
00629     \{ free(option->id); option->id = NULL; \}\par
00630     {\cf19 if} (option->param)\par
00631     \{ free(option->param); option->param = NULL; \}\par
00632     {\cf19 if} (option->sparam)\par
00633     \{ free(option->sparam); option->sparam = NULL; \}\par
00634     {\cf19 if} (option->info)\par
00635     \{ free(option->info); option->info = NULL; \}\par
00636 \par
00637     {\cf19 if} (option->subParams)\par
00638     \{\par
00639         {\cf19 for} ({\cf18 size_t} i = 0; i < option->subParamsCount; i++)\par
00640         \{\par
00641             argxcFreeOption(&option->subParams[i]);\par
00642         \}\par
00643 \par
00644         free(option->subParams); \par
00645         option->subParams = NULL;\par
00646         option->subParamsCapacity = 0;\par
00647         option->subParamsCount = 0;\par
00648     \}\par
00649 \par
00650     memset(option, 0, {\cf17 sizeof}(ArgxcOptions));\par
00651 \}\par
00652 \par
00653 {\cf18 void} argxcFreeParam(ArgxcParam *param)\par
00654 \{\par
00655     {\cf19 if} (!param) {\cf19 return};\par
00656 \par
00657     free(param->subExists); param->subExists = NULL;\par
00658     memset(param, 0, {\cf17 sizeof}(ArgxcParam));\par
00659 \}\par
00660 \par
00661 {\cf18 void} argxcFreeStringArray({\cf18 char} **array, {\cf18 size_t} count)\par
00662 \{\par
00663     freeStringArray(array, count);\par
00664 \}\par
00665 \par
00666 {\cf20 // Error handling}\par
00667 ArgxcError argxcCreateError({\cf17 const} {\cf18 char} *type, {\cf17 const} {\cf18 char} *error, {\cf17 const} {\cf18 char} *help, {\cf18 int} code)\par
00668 \{\par
00669     ArgxcError err = \{0\};\par
00670 \par
00671     err.type = stringDuplicate(type);\par
00672     err.error = stringDuplicate(error);\par
00673     err.help = stringDuplicate(help);\par
00674     err.code = code;\par
00675 \par
00676     {\cf19 return} err;\par
00677 \}\par
00678 \par
00679 {\cf18 void} argxcFreeError(ArgxcError *error)\par
00680 \{\par
00681     {\cf19 if} (!error) {\cf19 return};\par
00682 \par
00683     free(error->type); error->type = NULL;\par
00684     free(error->error); error->error = NULL;\par
00685     free(error->help); error->help = NULL;\par
00686     memset(error, 0, {\cf17 sizeof}(ArgxcError));\par
00687 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/ARGXAddError.c File Reference\par \pard\plain 
{\tc\tcl2 \v src/ARGXAddError.c}
{\xe \v src/ARGXAddError.c}
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdlib.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include "../inc/ARGXAddError.h"}\par
{\f2 #include "../inc/types.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcError} {\b argxcCreateErrorSimple} (const char *msg, const char *help)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b argxcGetErrorCode} (const {\b ArgxcError} *error)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b argxcGetErrorHelp} (const {\b ArgxcError} *error)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b argxcGetErrorMessage} (const {\b ArgxcError} *error)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ArgxcErrorPair} {\b argxcGetErrorPair} (const {\b ArgxcError} *error)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static char * {\b stringDuplicate} (const char *str)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v argxcCreateErrorSimple\:ARGXAddError.c}
{\xe \v ARGXAddError.c\:argxcCreateErrorSimple}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcError} argxcCreateErrorSimple (const char * msg, const char * help)}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00020 \{\par
00021     ArgxcError error = \{0\};\par
00022 \par
00023     error.type = stringDuplicate({\cf22 "error"});\par
00024     error.error = stringDuplicate(msg);\par
00025     error.help = stringDuplicate(help);\par
00026     error.code = 1; {\cf20 // Default error code}\par
00027 \par
00028     {\cf19 return} error;\par
00029 \}\par
}
{
\ql
References {\b ArgxcError::code}, {\b ArgxcError::error}, {\b ArgxcError::help}, {\b stringDuplicate()}, and {\b ArgxcError::type}.}\par
}
{\xe \v argxcGetErrorCode\:ARGXAddError.c}
{\xe \v ARGXAddError.c\:argxcGetErrorCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argxcGetErrorCode (const {\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00042 \{\par
00043     {\cf19 return} error ? error->code : 0;\par
00044 \}\par
}
{
\ql
References {\b ArgxcError::code}.}\par
}
{\xe \v argxcGetErrorHelp\:ARGXAddError.c}
{\xe \v ARGXAddError.c\:argxcGetErrorHelp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * argxcGetErrorHelp (const {\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00037 \{\par
00038     {\cf19 return} error ? error->help : NULL;\par
00039 \}\par
}
{
\ql
References {\b ArgxcError::help}.}\par
}
{\xe \v argxcGetErrorMessage\:ARGXAddError.c}
{\xe \v ARGXAddError.c\:argxcGetErrorMessage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * argxcGetErrorMessage (const {\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00032 \{\par
00033     {\cf19 return} error ? error->error : NULL;\par
00034 \}\par
}
{
\ql
References {\b ArgxcError::error}.}\par
}
{\xe \v argxcGetErrorPair\:ARGXAddError.c}
{\xe \v ARGXAddError.c\:argxcGetErrorPair}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ArgxcErrorPair} argxcGetErrorPair (const {\b ArgxcError} * error)}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00047 \{\par
00048     ArgxcErrorPair pair = \{NULL, NULL\};\par
00049 \par
00050     {\cf19 if} (error)\par
00051     \{\par
00052         pair.error = error->error;\par
00053         pair.help = error->help;\par
00054     \}\par
00055 \par
00056     {\cf19 return} pair;\par
00057 \}\par
}
{
\ql
References {\b ArgxcError::error}, {\b ArgxcErrorPair::error}, {\b ArgxcError::help}, and {\b ArgxcErrorPair::help}.}\par
}
{\xe \v stringDuplicate\:ARGXAddError.c}
{\xe \v ARGXAddError.c\:stringDuplicate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static char * stringDuplicate (const char * str){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b ARGXAddError.c}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00008 \{\par
00009     {\cf19 if} (!str) {\cf19 return} NULL;\par
00010     {\cf18 size_t} len = strlen(str) + 1;\par
00011     {\cf18 char} *dup = malloc(len);\par
00012     {\cf19 if} (dup)\par
00013     \{\par
00014         memcpy(dup, str, len);\par
00015     \}\par
00016     {\cf19 return} dup;\par
00017 \}\par
}
{
\ql
Referenced by {\b argxcCreateErrorSimple()}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ARGXAddError.c\par \pard\plain 
{\tc\tcl2 \v src/ARGXAddError.c}
{\xe \v src/ARGXAddError.c}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include <stdlib.h>}\par
00002 {\cf21 #include <string.h>}\par
00003 \par
00004 {\cf21 #include "../inc/ARGXAddError.h"}\par
00005 {\cf21 #include "../inc/types.h"}\par
00006 \par
00007 {\cf17 static} {\cf18 char} *stringDuplicate({\cf17 const} {\cf18 char} *str)\par
00008 \{\par
00009     {\cf19 if} (!str) {\cf19 return} NULL;\par
00010     {\cf18 size_t} len = strlen(str) + 1;\par
00011     {\cf18 char} *dup = malloc(len);\par
00012     {\cf19 if} (dup)\par
00013     \{\par
00014         memcpy(dup, str, len);\par
00015     \}\par
00016     {\cf19 return} dup;\par
00017 \}\par
00018 \par
00019 ArgxcError argxcCreateErrorSimple({\cf17 const} {\cf18 char} *msg, {\cf17 const} {\cf18 char} *help)\par
00020 \{\par
00021     ArgxcError error = \{0\};\par
00022 \par
00023     error.type = stringDuplicate({\cf22 "error"});\par
00024     error.error = stringDuplicate(msg);\par
00025     error.help = stringDuplicate(help);\par
00026     error.code = 1; {\cf20 // Default error code}\par
00027 \par
00028     {\cf19 return} error;\par
00029 \}\par
00030 \par
00031 {\cf17 const} {\cf18 char} *argxcGetErrorMessage({\cf17 const} ArgxcError *error)\par
00032 \{\par
00033     {\cf19 return} error ? error->error : NULL;\par
00034 \}\par
00035 \par
00036 {\cf17 const} {\cf18 char} *argxcGetErrorHelp({\cf17 const} ArgxcError *error)\par
00037 \{\par
00038     {\cf19 return} error ? error->help : NULL;\par
00039 \}\par
00040 \par
00041 {\cf18 int} argxcGetErrorCode({\cf17 const} ArgxcError *error)\par
00042 \{\par
00043     {\cf19 return} error ? error->code : 0;\par
00044 \}\par
00045 \par
00046 ArgxcErrorPair argxcGetErrorPair({\cf17 const} ArgxcError *error)\par
00047 \{\par
00048     ArgxcErrorPair pair = \{NULL, NULL\};\par
00049 \par
00050     {\cf19 if} (error)\par
00051     \{\par
00052         pair.error = error->error;\par
00053         pair.help = error->help;\par
00054     \}\par
00055 \par
00056     {\cf19 return} pair;\par
00057 \}\par
00058 \par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
