<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classargx_1_1Argx" xml:lang="en-US">
<title>argx::Argx Class Reference</title>
<indexterm><primary>argx::Argx</primary></indexterm>
<para>
<computeroutput>#include &lt;Argx.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classargx_1_1Argx_1ac4ac47d6fe631a673ce0c7594fd67a12">Argx</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076">Argx</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>, int argc, char *argv[])</para>

<para>Create <link linkend="_classargx_1_1Argx">Argx</link> with the specific <computeroutput>id</computeroutput>, <computeroutput>argc</computeroutput> and <computeroutput>argv</computeroutput> </para>
</listitem>
            <listitem><para><link linkend="_classargx_1_1Argx_1a97654cab13febb7fb7870b14c9d31c6e">~Argx</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classargx_1_1Argx_1aab16d8baf18e1db7ce66995a7cad312e">add</link> (<link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> option) const</para>

<para>Add param options. </para>
</listitem>
            <listitem><para>std::string <link linkend="_classargx_1_1Argx_1a99bbe74c7f09f6bb3a343dbdde050a64">createDocs</link> (<link linkend="_namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9">ARGXStyle</link> style, const std::string &amp;title, const std::string &amp;mainInfo)</para>

<para>Create documentation for the parameters with the specific style, title and main information. </para>
</listitem>
            <listitem><para>int <link linkend="_classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387">findParam</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Find parameter index. </para>
</listitem>
            <listitem><para>int <link linkend="_classargx_1_1Argx_1a812254e076a5ec208ba9d2eab470edb4">getArgc</link> () const</para>

<para>Get the main options from the <computeroutput>main()</computeroutput> function as argc. </para>
</listitem>
            <listitem><para>std::string <link linkend="_classargx_1_1Argx_1a671ad717805d76e459c74a3e0fee0625">getID</link> () const</para>

<para>Get <link linkend="_classargx_1_1Argx">Argx</link> ID. </para>
</listitem>
            <listitem><para>std::vector&lt; std::string &gt; <link linkend="_classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff">getMainArgs</link> () const</para>

<para>Get main arguments from <computeroutput>main()</computeroutput> function <computeroutput>argv</computeroutput> </para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; <link linkend="_classargx_1_1Argx_1a3378e7eb2efcb1386b487ece1b5aec35">getOptions</link> () const</para>

<para>Get main set options as <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link>. </para>
</listitem>
            <listitem><para><link linkend="_structargx_1_1ARGXParam">ARGXParam</link> <link linkend="_classargx_1_1Argx_1a250e2f53873829c3567dc0aec9dc2952">getParam</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Get the param from <computeroutput>id</computeroutput> </para>
</listitem>
            <listitem><para>bool <link linkend="_classargx_1_1Argx_1adb8fa05c9916682bf3cabeb2a12895f4">getSubParam</link> (const <link linkend="_structargx_1_1ARGXParam">argx::ARGXParam</link> &amp;param, const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Get the sub-param from <computeroutput>id</computeroutput> </para>
</listitem>
            <listitem><para>bool <link linkend="_classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d">paramExists</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Get if param exists in the param options. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::string <link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Attributes    </title>
        <itemizedlist>
            <listitem><para>static unsigned int <link linkend="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f">mainArgc</link></para>
</listitem>
            <listitem><para>static std::vector&lt; std::string &gt; * <link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link> = nullptr</para>
</listitem>
            <listitem><para>static std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; <link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_Argx_8hpp_source_1l00017">17</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076"/><section>
    <title>Argx()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Argx</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>Argx</secondary></indexterm>
<para><computeroutput>argx::Argx::Argx (const std::string &amp; id, int argc, char * argv[])</computeroutput></para><para>

<para>Create <link linkend="_classargx_1_1Argx">Argx</link> with the specific <computeroutput>id</computeroutput>, <computeroutput>argc</computeroutput> and <computeroutput>argv</computeroutput> </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>Set the ID of the <link linkend="_classargx_1_1Argx">Argx</link> </para>
</entry>
                            </row>
                            <row>
<entry>argc</entry><entry>
<para>Set the <computeroutput>argc</computeroutput> of the <computeroutput>main()</computeroutput> function </para>
</entry>
                            </row>
                            <row>
<entry>argv</entry><entry>
<para>Set the <computeroutput>argv</computeroutput> of the <computeroutput>main()</computeroutput> function </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00023">23</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>(<emphasis role="keywordtype">id</emphasis>)
00025 &#32;&#32;&#32;&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;std::vector&lt;std::string&gt;(argv,&#32;argv&#32;+&#32;argc);
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f">mainArgc</link>&#32;=&#32;argc;
00028 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00020">id</link>, <link linkend="_Argx_8hpp_source_1l00025">mainArgc</link>, and <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1ac4ac47d6fe631a673ce0c7594fd67a12"/><section>
    <title>Argx()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Argx</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>Argx</secondary></indexterm>
<para><computeroutput>argx::Argx::Argx ( )</computeroutput></para><para>
Definition at line <link linkend="_Argx_8cpp_source_1l00030">30</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00031 &#32;&#32;&#32;&#32;{&#32;}
</programlisting></section>
<anchor xml:id="_classargx_1_1Argx_1a97654cab13febb7fb7870b14c9d31c6e"/><section>
    <title>~Argx()</title>
<indexterm><primary>~Argx</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>~Argx</secondary></indexterm>
<para><computeroutput>argx::Argx::~Argx ( )</computeroutput></para><para>
Definition at line <link linkend="_Argx_8cpp_source_1l00033">33</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00034 &#32;&#32;&#32;&#32;{
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00036 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classargx_1_1Argx_1aab16d8baf18e1db7ce66995a7cad312e"/><section>
    <title>add()</title>
<indexterm><primary>add</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>add</secondary></indexterm>
<para><computeroutput>void argx::Argx::add (<link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> option) const</computeroutput></para><para>

<para>Add param options. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>option</entry><entry>
<para>Add the option to the main params </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00038">38</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00039 &#32;&#32;&#32;&#32;{
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceargx_1a12ba6f5d720d46a611584938a996663e">ARGXError</link>&#32;error&#32;=&#32;{
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.type&#32;=&#32;<emphasis role="stringliteral">&quot;success&quot;</emphasis>,
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.code&#32;=&#32;0
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
00044 
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>.emplace_back(option);
00046 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a99bbe74c7f09f6bb3a343dbdde050a64"/><section>
    <title>createDocs()</title>
<indexterm><primary>createDocs</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>createDocs</secondary></indexterm>
<para><computeroutput>std::string argx::Argx::createDocs (<link linkend="_namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9">ARGXStyle</link> style, const std::string &amp; title, const std::string &amp; mainInfo)</computeroutput></para><para>

<para>Create documentation for the parameters with the specific style, title and main information. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>style</entry><entry>
<para>Set the style using <link linkend="_namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9">ARGXStyle</link> </para>
</entry>
                            </row>
                            <row>
<entry>title</entry><entry>
<para>Title for docs </para>
</entry>
                            </row>
                            <row>
<entry>Main</entry><entry>
<para>information </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>std::string Documentation as a string </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00225">225</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00226 &#32;&#32;&#32;&#32;{
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;contentStr;
00228 
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(style&#32;==&#32;<link linkend="_namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9a9e8b160226c9fe22a910c782ce5076e2">ARGXStyle::Professional</link>)
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;x&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Main&#32;option&#32;header&#32;line</emphasis>
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;ID:&#32;&quot;</emphasis>&#32;+&#32;x.id&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;[&#32;&quot;</emphasis>&#32;+&#32;x.sparam&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>&#32;+&#32;x.param;
00236 
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.hasSubParams&#32;&amp;&amp;&#32;!x.subParams.empty())
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;[&#32;&quot;</emphasis>;
00240 
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;x.subParams.size();&#32;++i)
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;=&#32;x.subParams[i];
00244 
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;sub.param;
00246 
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;x.subParams.size()&#32;-&#32;1)&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>;
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;=&#32;x.subParams.size())&#32;contentStr&#32;+=&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00250 
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;]&#32;]&#32;&quot;</emphasis>;
00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00253 
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;]&#32;]&#32;&quot;</emphasis>;
00255 
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;x.info&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00257 
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;all&#32;sub-options&#32;with&#32;sparam&#32;and&#32;param,&#32;aligned&#32;with&#32;ideographic&#32;spaces&#32;if&#32;there&#32;are</emphasis>
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.hasSubParams&#32;&amp;&amp;&#32;!x.subParams.empty())
00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;:&#32;x.subParams)
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;ideographic&#32;spaces&#32;matching&#32;the&#32;length&#32;of&#32;main&#32;param&#32;for&#32;alignment</emphasis>
00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::wstring&#32;wideSpaces(x.param.size(),&#32;L<emphasis role="stringliteral">&apos;\u3000&apos;</emphasis>);
00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt;&#32;converter;
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;spacing&#32;=&#32;converter.to_bytes(wideSpaces);
00267 
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;spacing&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;[&#32;&quot;</emphasis>&#32;+&#32;sub.sparam&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>&#32;+&#32;sub.param&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;]&#32;&quot;</emphasis>&#32;+&#32;sub.info&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00273 
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;title&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;+&#32;mainInfo&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;+&#32;contentStr;
00275 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00022">options</link>, and <link linkend="_types_8hpp_source_1l00011">argx::Professional</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387"/><section>
    <title>findParam()</title>
<indexterm><primary>findParam</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>findParam</secondary></indexterm>
<para><computeroutput>int argx::Argx::findParam (const std::string &amp; id)</computeroutput></para><para>

<para>Find parameter index. </para>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00048">48</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00049 &#32;&#32;&#32;&#32;{
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;check&#32;if&#32;it&apos;s&#32;a&#32;main&#32;parameter</emphasis>
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>.size();&#32;i++)
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[i].<emphasis role="keywordtype">id</emphasis>&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;this&#32;main&#32;parameter&#32;exists&#32;in&#32;arguments</emphasis>
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;arg&#32;:&#32;*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;==&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[i].param&#32;||&#32;arg&#32;==&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[i].sparam)
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(i);
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00065 
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Then&#32;look&#32;for&#32;sub-parameters</emphasis>
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;opt&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;parent&#32;option&#32;exists&#32;in&#32;the&#32;arguments</emphasis>
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parentExists&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00071 
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;arg&#32;:&#32;*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;==&#32;opt.param&#32;||&#32;arg&#32;==&#32;opt.sparam)
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parentExists&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00080 
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parentExists)
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;index&#32;of&#32;the&#32;requested&#32;sub-parameter</emphasis>
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;opt.subParams.size();&#32;i++)
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opt.subParams[i].id&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(i);
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00090 
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;&#32;<emphasis role="comment">//&#32;Not&#32;found</emphasis>
00092 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>, and <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00222">getSubParam()</link>, and <link linkend="_Argx_8cpp_source_1l00094">paramExists()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a812254e076a5ec208ba9d2eab470edb4"/><section>
    <title>getArgc()</title>
<indexterm><primary>getArgc</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getArgc</secondary></indexterm>
<para><computeroutput>int argx::Argx::getArgc ( ) const</computeroutput></para><para>

<para>Get the main options from the <computeroutput>main()</computeroutput> function as argc. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int Number of params including the executable param </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00280">280</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00281 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f">mainArgc</link>;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00025">mainArgc</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a671ad717805d76e459c74a3e0fee0625"/><section>
    <title>getID()</title>
<indexterm><primary>getID</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getID</secondary></indexterm>
<para><computeroutput>std::string argx::Argx::getID ( ) const</computeroutput></para><para>

<para>Get <link linkend="_classargx_1_1Argx">Argx</link> ID. </para>
</para>

<para><formalpara><title>Returns</title>

<para>std::string <link linkend="_classargx_1_1Argx">Argx</link> ID </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00286">286</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00287 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00020">id</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff"/><section>
    <title>getMainArgs()</title>
<indexterm><primary>getMainArgs</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getMainArgs</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::string &gt; argx::Argx::getMainArgs ( ) const</computeroutput></para><para>

<para>Get main arguments from <computeroutput>main()</computeroutput> function <computeroutput>argv</computeroutput> </para>
</para>

<para><formalpara><title>Returns</title>

<para>std::vector&lt;std::string&gt; Vector of strings for main arguments from <computeroutput>argv</computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00277">277</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00278 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a3378e7eb2efcb1386b487ece1b5aec35"/><section>
    <title>getOptions()</title>
<indexterm><primary>getOptions</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getOptions</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; argx::Argx::getOptions ( ) const</computeroutput></para><para>

<para>Get main set options as <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link>. </para>
</para>

<para><formalpara><title>Returns</title>

<para>std::vector&lt;ARGXOptions&gt; Options to return </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00283">283</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00284 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a250e2f53873829c3567dc0aec9dc2952"/><section>
    <title>getParam()</title>
<indexterm><primary>getParam</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getParam</secondary></indexterm>
<para><computeroutput><link linkend="_structargx_1_1ARGXParam">ARGXParam</link> argx::Argx::getParam (const std::string &amp; id)</computeroutput></para><para>

<para>Get the param from <computeroutput>id</computeroutput> </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>The ID to get </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_structargx_1_1ARGXParam">ARGXParam</link> Returnted parameter to get </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00103">103</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00104 &#32;&#32;&#32;&#32;{
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f">mainArgc</link>&#32;&lt;=&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
00106 
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceargx_1a40874387325f4f81850b2ef717831239">ARGXParam</link>&#32;result;
00108 
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First,&#32;check&#32;if&#32;this&#32;is&#32;a&#32;top-level&#32;option</emphasis>
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;opt&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opt.id&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;position&#32;of&#32;the&#32;main&#32;option&#32;in&#32;arguments</emphasis>
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mainOptionPos&#32;=&#32;-1;
00116 
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;opt.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;opt.sparam)
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.exists&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mainOptionPos&#32;=&#32;i;
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00126 
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.exists)
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opt.hasSubParams)
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;each&#32;sub-parameter</emphasis>
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;:&#32;opt.subParams)
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;subMatched&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00135 
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Look&#32;for&#32;sub-parameters&#32;after&#32;the&#32;main&#32;option</emphasis>
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;mainOptionPos&#32;+&#32;1;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;sub.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;sub.sparam)
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subMatched&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00145 
00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.subExists.push_back(subMatched);
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00149 
00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00154 
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;not&#32;found&#32;as&#32;top-level,&#32;check&#32;if&#32;it&apos;s&#32;a&#32;sub-parameter</emphasis>
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;opt&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;if&#32;the&#32;parent&#32;option&#32;exists&#32;and&#32;get&#32;its&#32;position</emphasis>
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;parentPos&#32;=&#32;-1;
00160 
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;opt.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;opt.sparam)
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parentPos&#32;=&#32;i;
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00169 
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parentPos&#32;&gt;&#32;-1&#32;&amp;&amp;&#32;opt.hasSubParams)
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;requested&#32;sub-parameter&#32;exists&#32;after&#32;the&#32;parent</emphasis>
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;:&#32;opt.subParams)
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sub.id&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;parentPos&#32;+&#32;1;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;sub.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;sub.sparam)
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.exists&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00185 
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!result.exists&#32;&amp;&amp;&#32;parentPos&#32;+&#32;1&#32;&lt;&#32;this-&gt;mainArgs-&gt;size())
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;nextArg&#32;=&#32;(*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[parentPos&#32;+&#32;1];
00189 
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextArg&#32;==&#32;sub.param&#32;||&#32;nextArg&#32;==&#32;sub.sparam)&#32;result.exists&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00192 
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;any&#32;sub-sub-parameters&#32;if&#32;they&#32;exist</emphasis>
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.exists&#32;&amp;&amp;&#32;sub.hasSubParams)
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;subsub&#32;:&#32;sub.subParams)
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;subsubMatched&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00199 
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;subsub.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;subsub.sparam)
00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subsubMatched&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00208 
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.subExists.push_back(subsubMatched);
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00212 
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00218 
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
00220 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_types_8hpp_source_1l00050">argx::ARGXParam::exists</link>, <link linkend="_Argx_8hpp_source_1l00025">mainArgc</link>, <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>, <link linkend="_Argx_8hpp_source_1l00022">options</link>, and <link linkend="_types_8hpp_source_1l00051">argx::ARGXParam::subExists</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1adb8fa05c9916682bf3cabeb2a12895f4"/><section>
    <title>getSubParam()</title>
<indexterm><primary>getSubParam</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getSubParam</secondary></indexterm>
<para><computeroutput>bool argx::Argx::getSubParam (const <link linkend="_structargx_1_1ARGXParam">argx::ARGXParam</link> &amp; param, const std::string &amp; id)</computeroutput></para><para>

<para>Get the sub-param from <computeroutput>id</computeroutput> </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>param</entry><entry>
<para>Original param </para>
</entry>
                            </row>
                            <row>
<entry>id</entry><entry>
<para>The ID to get </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00222">222</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00223 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d">paramExists</link>(<emphasis role="keywordtype">id</emphasis>)&#32;&amp;&amp;&#32;param.<link linkend="_structargx_1_1ARGXParam_1ace0572ca0af0b51da129b562bee6a673">subExists</link>[this-&gt;<link linkend="_classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387">findParam</link>(<emphasis role="keywordtype">id</emphasis>)];&#32;}
</programlisting><para>
References <link linkend="_Argx_8cpp_source_1l00048">findParam()</link>, <link linkend="_Argx_8cpp_source_1l00094">paramExists()</link>, and <link linkend="_types_8hpp_source_1l00051">argx::ARGXParam::subExists</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d"/><section>
    <title>paramExists()</title>
<indexterm><primary>paramExists</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>paramExists</secondary></indexterm>
<para><computeroutput>bool argx::Argx::paramExists (const std::string &amp; id)</computeroutput></para><para>

<para>Get if param exists in the param options. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>ID to get </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00094">94</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00095 &#32;&#32;&#32;&#32;{
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387">findParam</link>(<emphasis role="keywordtype">id</emphasis>)&#32;&gt;=&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;;
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00099 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8cpp_source_1l00048">findParam()</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00222">getSubParam()</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a"/><section>
    <title>id</title>
<indexterm><primary>id</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>id</secondary></indexterm>
<para><computeroutput>std::string argx::Argx::id<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_Argx_8hpp_source_1l00020">20</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00023">Argx()</link>, and <link linkend="_Argx_8cpp_source_1l00286">getID()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f"/><section>
    <title>mainArgc</title>
<indexterm><primary>mainArgc</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>mainArgc</secondary></indexterm>
<para><computeroutput>unsigned int argx::Argx::mainArgc<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_Argx_8hpp_source_1l00025">25</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00023">Argx()</link>, <link linkend="_Argx_8cpp_source_1l00280">getArgc()</link>, and <link linkend="_Argx_8cpp_source_1l00103">getParam()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f"/><section>
    <title>mainArgs</title>
<indexterm><primary>mainArgs</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>mainArgs</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::string &gt; * argx::Argx::mainArgs = nullptr<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_Argx_8hpp_source_1l00023">23</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00023">Argx()</link>, <link linkend="_Argx_8cpp_source_1l00033">~Argx()</link>, <link linkend="_Argx_8cpp_source_1l00048">findParam()</link>, <link linkend="_Argx_8cpp_source_1l00277">getMainArgs()</link>, and <link linkend="_Argx_8cpp_source_1l00103">getParam()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5"/><section>
    <title>options</title>
<indexterm><primary>options</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>options</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; argx::Argx::options<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_Argx_8hpp_source_1l00022">22</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00038">add()</link>, <link linkend="_Argx_8cpp_source_1l00225">createDocs()</link>, <link linkend="_Argx_8cpp_source_1l00048">findParam()</link>, <link linkend="_Argx_8cpp_source_1l00283">getOptions()</link>, and <link linkend="_Argx_8cpp_source_1l00103">getParam()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
inc/<link linkend="_Argx_8hpp">Argx.hpp</link>src/<link linkend="_Argx_8cpp">Argx.cpp</link></section>
</section>
