<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classargx_1_1Argx" xml:lang="en-US">
<title>argx::Argx Class Reference</title>
<indexterm><primary>argx::Argx</primary></indexterm>
<para>
<computeroutput>#include &lt;Argx.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classargx_1_1Argx_1ac4ac47d6fe631a673ce0c7594fd67a12">Argx</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076">Argx</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>, int argc, char *argv[])</para>

<para>Create <link linkend="_classargx_1_1Argx">Argx</link> with the specific <computeroutput>id</computeroutput>, <computeroutput>argc</computeroutput> and <computeroutput>argv</computeroutput> </para>
</listitem>
            <listitem><para><link linkend="_classargx_1_1Argx_1a97654cab13febb7fb7870b14c9d31c6e">~Argx</link> ()</para>

<para>Deconstruct allocated objects. </para>
</listitem>
            <listitem><para>void <link linkend="_classargx_1_1Argx_1aab16d8baf18e1db7ce66995a7cad312e">add</link> (<link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> option) const</para>

<para>Add param options. </para>
</listitem>
            <listitem><para>bool <link linkend="_classargx_1_1Argx_1adb4e8a622135970b4e12f14d49a76e52">compareArgs</link> (std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; <link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>, std::vector&lt; std::string &gt; argv)</para>

<para>Compare if <computeroutput>options</computeroutput> contains the required <computeroutput>id</computeroutput>, if the ID does not exist, return false. </para>
</listitem>
            <listitem><para>std::string <link linkend="_classargx_1_1Argx_1a99bbe74c7f09f6bb3a343dbdde050a64">createDocs</link> (<link linkend="_namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9">ARGXStyle</link> style, const std::string &amp;title, const std::string &amp;mainInfo)</para>

<para>Create documentation for the parameters with the specific style, title and main information. </para>
</listitem>
            <listitem><para>int <link linkend="_classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387">findParam</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Find parameter and sub-parameter index. </para>
</listitem>
            <listitem><para>int <link linkend="_classargx_1_1Argx_1a812254e076a5ec208ba9d2eab470edb4">getArgc</link> () const</para>

<para>Get the main options from the <computeroutput>main()</computeroutput> function as argc. </para>
</listitem>
            <listitem><para>int <link linkend="_classargx_1_1Argx_1a7fb43159f183399c8674cd5e521d3caf">getArgIDPos</link> (const std::string &amp;arg)</para>

<para>Get argument using ID. </para>
</listitem>
            <listitem><para>int <link linkend="_classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0">getArgPos</link> (const std::string &amp;arg)</para>

<para>Get argument position with specified <computeroutput>arg</computeroutput> </para>
</listitem>
            <listitem><para>std::string <link linkend="_classargx_1_1Argx_1a671ad717805d76e459c74a3e0fee0625">getID</link> () const</para>

<para>Get <link linkend="_classargx_1_1Argx">Argx</link> ID. </para>
</listitem>
            <listitem><para>std::vector&lt; std::string &gt; <link linkend="_classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff">getMainArgs</link> () const</para>

<para>Get main arguments from <computeroutput>main()</computeroutput> function <computeroutput>argv</computeroutput> </para>
</listitem>
            <listitem><para><link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> <link linkend="_classargx_1_1Argx_1ae7f1dcaf2c945c8592a3e89b15a0189b">getOption</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Get Options from specified ID. </para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; <link linkend="_classargx_1_1Argx_1a3378e7eb2efcb1386b487ece1b5aec35">getOptions</link> () const</para>

<para>Get main set options as <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link>. </para>
</listitem>
            <listitem><para><link linkend="_structargx_1_1ARGXParam">ARGXParam</link> <link linkend="_classargx_1_1Argx_1a250e2f53873829c3567dc0aec9dc2952">getParam</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Get the param from <computeroutput>id</computeroutput> </para>
</listitem>
            <listitem><para>bool <link linkend="_classargx_1_1Argx_1adb8fa05c9916682bf3cabeb2a12895f4">getSubParam</link> (const <link linkend="_structargx_1_1ARGXParam">argx::ARGXParam</link> &amp;param, const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Get the sub-param from <computeroutput>id</computeroutput> </para>
</listitem>
            <listitem><para>std::vector&lt; std::string &gt; <link linkend="_classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5">getSubValue</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Get sub-parameter values, starting from the first value found until the first found value that corresponds to a registered parameter. </para>
</listitem>
            <listitem><para>int <link linkend="_classargx_1_1Argx_1ac1e4d316a44cfdc596a181af15e74962">getWrongArgs</link> (const std::vector&lt; std::string &gt; &amp;argv)</para>

<para>Get the incorrect arguments and sub-arguments that were not registered. </para>
</listitem>
            <listitem><para>bool <link linkend="_classargx_1_1Argx_1a8d66cd4ebaeb1c03ef474c260ce90977">hasTag</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>, const std::string &amp;tag)</para>

<para>Check if the <computeroutput>tag</computeroutput> exists in option with ID of <computeroutput>id</computeroutput> </para>
</listitem>
            <listitem><para>bool <link linkend="_classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d">paramExists</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Get if param exists in the param options. </para>
</listitem>
            <listitem><para>std::string <link linkend="_classargx_1_1Argx_1a0269687632438687f9afd44f80c2eaa9">paramToID</link> (const std::string &amp;param)</para>

<para>Normal parameter or sub-paramter to its corresponding ID. </para>
</listitem>
            <listitem><para>bool <link linkend="_classargx_1_1Argx_1a9d961d98a70713290d237dd8f3d68369">subParamExists</link> (const std::string &amp;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>)</para>

<para>Get if sub-param exists in the param options. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static int <link linkend="_classargx_1_1Argx_1ad35955a51e2dd4b50a7ccf20f757fe55">formatWrongArgs</link> (const int &amp;_int)</para>

<para>Format to a positive number if number is negative for a correct execution of code. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::string <link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Attributes    </title>
        <itemizedlist>
            <listitem><para>static unsigned int <link linkend="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f">mainArgc</link></para>
</listitem>
            <listitem><para>static std::vector&lt; std::string &gt; * <link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link> = nullptr</para>
</listitem>
            <listitem><para>static std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; <link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_Argx_8hpp_source_1l00017">17</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076"/><section>
    <title>Argx()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Argx</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>Argx</secondary></indexterm>
<para><computeroutput>argx::Argx::Argx (const std::string &amp; id, int argc, char * argv[])</computeroutput></para><para>

<para>Create <link linkend="_classargx_1_1Argx">Argx</link> with the specific <computeroutput>id</computeroutput>, <computeroutput>argc</computeroutput> and <computeroutput>argv</computeroutput> </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>Set the ID of the <link linkend="_classargx_1_1Argx">Argx</link> </para>
</entry>
                            </row>
                            <row>
<entry>argc</entry><entry>
<para>Set the <computeroutput>argc</computeroutput> of the <computeroutput>main()</computeroutput> function </para>
</entry>
                            </row>
                            <row>
<entry>argv</entry><entry>
<para>Set the <computeroutput>argv</computeroutput> of the <computeroutput>main()</computeroutput> function </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00034">34</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>(<emphasis role="keywordtype">id</emphasis>)
00036 &#32;&#32;&#32;&#32;{
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;std::vector&lt;std::string&gt;(argv,&#32;argv&#32;+&#32;argc);
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f">mainArgc</link>&#32;=&#32;argc;
00039 
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;`Args::mainArgs`&#32;is&#32;not&#32;valid&#32;for&#32;ID&#32;of&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keywordtype">id</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;variable&#32;is&#32;NULL&quot;</emphasis>;
00042 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8cpp_source_1l00034">Argx()</link>, <link linkend="_Argx_8hpp_source_1l00020">id</link>, <link linkend="_Argx_8hpp_source_1l00025">mainArgc</link>, and <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00034">Argx()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1ac4ac47d6fe631a673ce0c7594fd67a12"/><section>
    <title>Argx()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Argx</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>Argx</secondary></indexterm>
<para><computeroutput>argx::Argx::Argx ( )</computeroutput></para><para>
Definition at line <link linkend="_Argx_8cpp_source_1l00045">45</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00046 &#32;&#32;&#32;&#32;{&#32;}
</programlisting></section>
<anchor xml:id="_classargx_1_1Argx_1a97654cab13febb7fb7870b14c9d31c6e"/><section>
    <title>~Argx()</title>
<indexterm><primary>~Argx</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>~Argx</secondary></indexterm>
<para><computeroutput>argx::Argx::~Argx ( )</computeroutput></para><para>

<para>Deconstruct allocated objects. </para>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00048">48</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00049 &#32;&#32;&#32;&#32;{
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
00051 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classargx_1_1Argx_1aab16d8baf18e1db7ce66995a7cad312e"/><section>
    <title>add()</title>
<indexterm><primary>add</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>add</secondary></indexterm>
<para><computeroutput>void argx::Argx::add (<link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> option) const</computeroutput></para><para>

<para>Add param options. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>option</entry><entry>
<para>Add the option to the main params </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00093">93</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00094 &#32;&#32;&#32;&#32;{&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>.emplace_back(option);&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1adb4e8a622135970b4e12f14d49a76e52"/><section>
    <title>compareArgs()</title>
<indexterm><primary>compareArgs</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>compareArgs</secondary></indexterm>
<para><computeroutput>bool argx::Argx::compareArgs (std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; options, std::vector&lt; std::string &gt; argv)</computeroutput></para><para>

<para>Compare if <computeroutput>options</computeroutput> contains the required <computeroutput>id</computeroutput>, if the ID does not exist, return false. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>options</entry><entry>
<para>Return <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> vector </para>
</entry>
                            </row>
                            <row>
<entry>id</entry><entry>
<para>ID to find </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00489">489</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00490 &#32;&#32;&#32;&#32;{
00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterate&#32;over&#32;argv&#32;and&#32;skip&#32;program&#32;name</emphasis>
00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;argv.size();&#32;++i)
00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;arg&#32;=&#32;argv[i];
00495 
00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;a&#32;matching&#32;top-level&#32;option</emphasis>
00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespaceargx_1a9933be078f36db7b1424f6dd0372eb72">ARGXOptions</link>&#32;*matched&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00498 
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;opt&#32;:&#32;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opt.sparam&#32;==&#32;arg&#32;||&#32;opt.param&#32;==&#32;arg)
00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matched&#32;=&#32;&amp;opt;
00504 
00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00508 
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;matched&#32;top-level&#32;option</emphasis>
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!matched)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00511 
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;option&#32;supports&#32;subparams,&#32;try&#32;to&#32;get&#32;them</emphasis>
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(matched-&gt;hasSubParams&#32;||&#32;matched-&gt;hasAnySubParams)
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;i&#32;+&#32;1;
00516 
00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(j&#32;&lt;&#32;argv.size())
00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;next&#32;=&#32;argv[j];
00520 
00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;the&#32;next&#32;declared&#32;subparam&#32;of&#32;`matched`</emphasis>
00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSub&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00523 
00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;:&#32;matched-&gt;subParams)
00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(next&#32;==&#32;sub.param&#32;||&#32;next&#32;==&#32;sub.sparam)
00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSub&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00529 
00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00533 
00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;it&#32;and&#32;continue&#32;scanning&#32;for&#32;more&#32;subparams</emphasis>
00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSub)
00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++j;
00538 
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00541 
00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;not&#32;a&#32;subparam&#32;then&#32;check&#32;if&#32;it&apos;s&#32;a&#32;known&#32;top-level&#32;option</emphasis>
00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isGlobal&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00544 
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;g&#32;:&#32;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(next&#32;==&#32;g.param&#32;||&#32;next&#32;==&#32;g.sparam)
00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isGlobal&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00553 
00554 
00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stop&#32;scanning&#32;subparams;&#32;outer&#32;loop&#32;will&#32;handle&#32;this&#32;global&#32;option</emphasis>
00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isGlobal)&#32;<emphasis role="keywordflow">break</emphasis>;
00557 
00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;neither&#32;a&#32;subparam&#32;nor&#32;a&#32;global&#32;option&#32;to&#32;an&#32;invalid&#32;sequence</emphasis>
00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00561 
00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;advance&#32;outer&#32;index&#32;to&#32;the&#32;last&#32;consumed&#32;token&#32;(&#32;j&#32;-&#32;1&#32;).</emphasis>
00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;outer&#32;for-loop&#32;will&#32;increment&#32;i,&#32;so&#32;set&#32;`i&#32;=&#32;j&#32;-&#32;1`&#32;to&#32;continue&#32;at&#32;j</emphasis>
00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;&gt;&#32;i&#32;+&#32;1)
00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;j&#32;-&#32;1;
00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00568 
00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00570 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_types_8hpp_source_1l00051">argx::ARGXOptions::hasAnySubParams</link>, <link linkend="_types_8hpp_source_1l00050">argx::ARGXOptions::hasSubParams</link>, <link linkend="_Argx_8hpp_source_1l00022">options</link>, and <link linkend="_types_8hpp_source_1l00054">argx::ARGXOptions::subParams</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a99bbe74c7f09f6bb3a343dbdde050a64"/><section>
    <title>createDocs()</title>
<indexterm><primary>createDocs</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>createDocs</secondary></indexterm>
<para><computeroutput>std::string argx::Argx::createDocs (<link linkend="_namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9">ARGXStyle</link> style, const std::string &amp; title, const std::string &amp; mainInfo)</computeroutput></para><para>

<para>Create documentation for the parameters with the specific style, title and main information. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>style</entry><entry>
<para>Set the style using <link linkend="_namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9">ARGXStyle</link> </para>
</entry>
                            </row>
                            <row>
<entry>title</entry><entry>
<para>Title for docs </para>
</entry>
                            </row>
                            <row>
<entry>Main</entry><entry>
<para>information </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>std::string Documentation as a string </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00293">293</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00294 &#32;&#32;&#32;&#32;{
00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;contentStr;
00296 
00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(style&#32;==&#32;<link linkend="_namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9a9e8b160226c9fe22a910c782ce5076e2">ARGXStyle::Professional</link>)
00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;x&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Main&#32;option&#32;header&#32;line</emphasis>
00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;ID:&#32;&quot;</emphasis>&#32;+&#32;x.id&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;[&#32;&quot;</emphasis>&#32;+&#32;x.sparam&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>&#32;+&#32;x.param;
00304 
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.hasSubParams&#32;&amp;&amp;&#32;!x.subParams.empty())
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;[&#32;&quot;</emphasis>;
00308 
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;x.subParams.size();&#32;++i)
00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;=&#32;x.subParams[i];
00312 
00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;sub.param;
00314 
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;x.subParams.size()&#32;-&#32;1)&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>;
00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;=&#32;x.subParams.size())&#32;contentStr&#32;+=&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00318 
00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;]&#32;]&#32;&quot;</emphasis>;
00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00321 
00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;]&#32;&quot;</emphasis>;
00323 
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;x.info&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00325 
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;all&#32;sub-options&#32;with&#32;sparam&#32;and&#32;param,&#32;aligned&#32;with&#32;ideographic&#32;spaces&#32;if&#32;there&#32;are</emphasis>
00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.hasSubParams&#32;&amp;&amp;&#32;!x.subParams.empty())
00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;:&#32;x.subParams)
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;ideographic&#32;spaces&#32;matching&#32;the&#32;length&#32;of&#32;main&#32;param&#32;for&#32;alignment</emphasis>
00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::wstring&#32;wideSpaces(x.param.size(),&#32;L<emphasis role="stringliteral">&apos;\u3000&apos;</emphasis>);
00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt;&#32;converter;
00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;spacing&#32;=&#32;converter.to_bytes(wideSpaces);
00335 
00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;spacing&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;[&#32;&quot;</emphasis>&#32;+&#32;sub.sparam&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>&#32;+&#32;sub.param&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;]&#32;&quot;</emphasis>&#32;+&#32;sub.info&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00341 
00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(style&#32;==&#32;<link linkend="_namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9a1fbb1e3943c2c6c560247ac8f9289780">ARGXStyle::Simple</link>)
00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;x&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;x.sparam&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;x.param&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;+&#32;x.info&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00347 
00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.hasSubParams&#32;&amp;&amp;&#32;!x.subParams.empty())
00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;:&#32;x.subParams)
00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contentStr&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>&#32;+&#32;sub.sparam&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;sub.param&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;+&#32;sub.info&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;ARGXStyle</emphasis>
00357 
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;title&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;+&#32;mainInfo&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;+&#32;contentStr;
00359 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00022">options</link>, <link linkend="_types_8hpp_source_1l00011">argx::Professional</link>, and <link linkend="_types_8hpp_source_1l00012">argx::Simple</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387"/><section>
    <title>findParam()</title>
<indexterm><primary>findParam</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>findParam</secondary></indexterm>
<para><computeroutput>int argx::Argx::findParam (const std::string &amp; id)</computeroutput></para><para>

<para>Find parameter and sub-parameter index. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>ID to find </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int Index </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00096">96</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00097 &#32;&#32;&#32;&#32;{
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;check&#32;if&#32;it&apos;s&#32;a&#32;main&#32;parameter</emphasis>
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>.size();&#32;i++)
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[i].<emphasis role="keywordtype">id</emphasis>&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;this&#32;main&#32;parameter&#32;exists&#32;in&#32;arguments</emphasis>
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;arg&#32;:&#32;*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;==&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[i].param&#32;||&#32;arg&#32;==&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[i].sparam)
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(i);
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00113 
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Then&#32;look&#32;for&#32;sub-parameters</emphasis>
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;opt&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;parent&#32;option&#32;exists&#32;in&#32;the&#32;arguments</emphasis>
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parentExists&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00119 
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;arg&#32;:&#32;*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;==&#32;opt.param&#32;||&#32;arg&#32;==&#32;opt.sparam)
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parentExists&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00128 
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parentExists)
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;index&#32;of&#32;the&#32;requested&#32;sub-parameter</emphasis>
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;opt.subParams.size();&#32;i++)
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opt.subParams[i].id&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(i);
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00138 
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;&#32;<emphasis role="comment">//&#32;Not&#32;found</emphasis>
00140 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>, and <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00290">getSubParam()</link>, <link linkend="_Argx_8cpp_source_1l00159">hasTag()</link>, and <link linkend="_Argx_8cpp_source_1l00142">paramExists()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1ad35955a51e2dd4b50a7ccf20f757fe55"/><section>
    <title>formatWrongArgs()</title>
<indexterm><primary>formatWrongArgs</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>formatWrongArgs</secondary></indexterm>
<para><computeroutput>int argx::Argx::formatWrongArgs (const int &amp; _int)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Format to a positive number if number is negative for a correct execution of code. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_int</entry><entry>
<para>Number to convert </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int Positive value number </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00482">482</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00483 &#32;&#32;&#32;&#32;{
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_int&#32;&lt;&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;-_int;&#32;<emphasis role="comment">//&#32;Convert&#32;to&#32;unsigned&#32;SAFELY</emphasis>
00485 
00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_int;
00487 &#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_classargx_1_1Argx_1a812254e076a5ec208ba9d2eab470edb4"/><section>
    <title>getArgc()</title>
<indexterm><primary>getArgc</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getArgc</secondary></indexterm>
<para><computeroutput>int argx::Argx::getArgc ( ) const</computeroutput></para><para>

<para>Get the main options from the <computeroutput>main()</computeroutput> function as argc. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int Number of params including the executable param </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00636">636</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00637 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f">mainArgc</link>;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00025">mainArgc</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a7fb43159f183399c8674cd5e521d3caf"/><section>
    <title>getArgIDPos()</title>
<indexterm><primary>getArgIDPos</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getArgIDPos</secondary></indexterm>
<para><computeroutput>int argx::Argx::getArgIDPos (const std::string &amp; arg)</computeroutput></para><para>

<para>Get argument using ID. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>arg</entry><entry>
<para>Argument to find </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int Argument position </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00053">53</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00054 &#32;&#32;&#32;&#32;{
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceargx_1a9933be078f36db7b1424f6dd0372eb72">ARGXOptions</link>&#32;option&#32;=&#32;this-&gt;<link linkend="_classargx_1_1Argx_1ae7f1dcaf2c945c8592a3e89b15a0189b">getOption</link>(arg);
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;argPos&#32;=&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0">getArgPos</link>(option.param);
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;shortArgPos&#32;=&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0">getArgPos</link>(option.sparam);
00059 
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argPos&#32;&gt;=&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;argPos;
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shortArgPos&#32;&gt;=&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;shortArgPos;
00062 
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00064 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8cpp_source_1l00079">getArgPos()</link>, <link linkend="_Argx_8cpp_source_1l00572">getOption()</link>, <link linkend="_types_8hpp_source_1l00036">argx::ARGXOptions::param</link>, and <link linkend="_types_8hpp_source_1l00041">argx::ARGXOptions::sparam</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0"/><section>
    <title>getArgPos()</title>
<indexterm><primary>getArgPos</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getArgPos</secondary></indexterm>
<para><computeroutput>int argx::Argx::getArgPos (const std::string &amp; arg)</computeroutput></para><para>

<para>Get argument position with specified <computeroutput>arg</computeroutput> </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>arg</entry><entry>
<para>Find argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int Return position of found <computeroutput>arg</computeroutput> from the options </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00079">79</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00080 &#32;&#32;&#32;&#32;{
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-2;
00083 
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;at(i)&#32;==&#32;arg)
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00089 
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00091 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00053">getArgIDPos()</link>, and <link linkend="_Argx_8cpp_source_1l00580">getSubValue()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a671ad717805d76e459c74a3e0fee0625"/><section>
    <title>getID()</title>
<indexterm><primary>getID</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getID</secondary></indexterm>
<para><computeroutput>std::string argx::Argx::getID ( ) const</computeroutput></para><para>

<para>Get <link linkend="_classargx_1_1Argx">Argx</link> ID. </para>
</para>

<para><formalpara><title>Returns</title>

<para>std::string <link linkend="_classargx_1_1Argx">Argx</link> ID </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00642">642</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00643 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>;&#32;}
</programlisting></section>
<anchor xml:id="_classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff"/><section>
    <title>getMainArgs()</title>
<indexterm><primary>getMainArgs</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getMainArgs</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::string &gt; argx::Argx::getMainArgs ( ) const</computeroutput></para><para>

<para>Get main arguments from <computeroutput>main()</computeroutput> function <computeroutput>argv</computeroutput> </para>
</para>

<para><formalpara><title>Returns</title>

<para>std::vector&lt;std::string&gt; Vector of strings for main arguments from <computeroutput>argv</computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00633">633</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00634 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00580">getSubValue()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1ae7f1dcaf2c945c8592a3e89b15a0189b"/><section>
    <title>getOption()</title>
<indexterm><primary>getOption</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getOption</secondary></indexterm>
<para><computeroutput><link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> argx::Argx::getOption (const std::string &amp; id)</computeroutput></para><para>

<para>Get Options from specified ID. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>ID to find </para>
</entry>
                            </row>
                            <row>
<entry><link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link></entry><entry>
<para>Option information </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00572">572</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00573 &#32;&#32;&#32;&#32;{
00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;x&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.id&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
00576 
00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
00578 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00053">getArgIDPos()</link>, and <link linkend="_Argx_8cpp_source_1l00580">getSubValue()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a3378e7eb2efcb1386b487ece1b5aec35"/><section>
    <title>getOptions()</title>
<indexterm><primary>getOptions</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getOptions</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; argx::Argx::getOptions ( ) const</computeroutput></para><para>

<para>Get main set options as <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link>. </para>
</para>

<para><formalpara><title>Returns</title>

<para>std::vector&lt;ARGXOptions&gt; Options to return </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00639">639</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00640 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a250e2f53873829c3567dc0aec9dc2952"/><section>
    <title>getParam()</title>
<indexterm><primary>getParam</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getParam</secondary></indexterm>
<para><computeroutput><link linkend="_structargx_1_1ARGXParam">ARGXParam</link> argx::Argx::getParam (const std::string &amp; id)</computeroutput></para><para>

<para>Get the param from <computeroutput>id</computeroutput> </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>The ID to get </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_structargx_1_1ARGXParam">ARGXParam</link> Returnted parameter to get </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00171">171</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00172 &#32;&#32;&#32;&#32;{
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f">mainArgc</link>&#32;&lt;=&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
00174 
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceargx_1a40874387325f4f81850b2ef717831239">ARGXParam</link>&#32;result;
00176 
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First,&#32;check&#32;if&#32;this&#32;is&#32;a&#32;top-level&#32;option</emphasis>
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;opt&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opt.id&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;position&#32;of&#32;the&#32;main&#32;option&#32;in&#32;arguments</emphasis>
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mainOptionPos&#32;=&#32;-1;
00184 
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;opt.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;opt.sparam)
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.exists&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mainOptionPos&#32;=&#32;i;
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00194 
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.exists)
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opt.hasSubParams&#32;||&#32;opt.hasAnySubParams)
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;each&#32;sub-parameter</emphasis>
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;:&#32;opt.subParams)
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;subMatched&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00203 
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Look&#32;for&#32;sub-parameters&#32;after&#32;the&#32;main&#32;option</emphasis>
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;mainOptionPos&#32;+&#32;1;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;sub.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;sub.sparam)
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subMatched&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00213 
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.subExists.push_back(subMatched);
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00217 
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00222 
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;not&#32;found&#32;as&#32;top-level,&#32;check&#32;if&#32;it&apos;s&#32;a&#32;sub-parameter</emphasis>
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;opt&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;if&#32;the&#32;parent&#32;option&#32;exists&#32;and&#32;get&#32;its&#32;position</emphasis>
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;parentPos&#32;=&#32;-1;
00228 
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;opt.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;opt.sparam)
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parentPos&#32;=&#32;i;
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00237 
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parentPos&#32;&gt;&#32;-1&#32;&amp;&amp;&#32;(opt.hasSubParams&#32;||&#32;opt.hasAnySubParams))
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;requested&#32;sub-parameter&#32;exists&#32;after&#32;the&#32;parent</emphasis>
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;sub&#32;:&#32;opt.subParams)
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sub.id&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;parentPos&#32;+&#32;1&#32;;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;sub.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;sub.sparam)
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.exists&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00253 
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!result.exists&#32;&amp;&amp;&#32;parentPos&#32;+&#32;1&#32;&lt;&#32;this-&gt;mainArgs-&gt;size())
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;nextArg&#32;=&#32;(*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[parentPos&#32;+&#32;1];
00257 
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextArg&#32;==&#32;sub.param&#32;||&#32;nextArg&#32;==&#32;sub.sparam)&#32;result.exists&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00260 
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;any&#32;sub-sub-parameters&#32;if&#32;they&#32;exist</emphasis>
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result.exists&#32;&amp;&amp;&#32;(sub.hasSubParams&#32;||&#32;sub.hasAnySubParams))
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;subsub&#32;:&#32;sub.subParams)
00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;subsubMatched&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00267 
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>)[i]&#32;==&#32;subsub.param&#32;||&#32;(*this-&gt;mainArgs)[i]&#32;==&#32;subsub.sparam)
00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subsubMatched&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00276 
00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.subExists.push_back(subsubMatched);
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00280 
00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00286 
00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
00288 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_types_8hpp_source_1l00059">argx::ARGXParam::exists</link>, <link linkend="_Argx_8hpp_source_1l00025">mainArgc</link>, <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>, <link linkend="_Argx_8hpp_source_1l00022">options</link>, and <link linkend="_types_8hpp_source_1l00060">argx::ARGXParam::subExists</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1adb8fa05c9916682bf3cabeb2a12895f4"/><section>
    <title>getSubParam()</title>
<indexterm><primary>getSubParam</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getSubParam</secondary></indexterm>
<para><computeroutput>bool argx::Argx::getSubParam (const <link linkend="_structargx_1_1ARGXParam">argx::ARGXParam</link> &amp; param, const std::string &amp; id)</computeroutput></para><para>

<para>Get the sub-param from <computeroutput>id</computeroutput> </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>param</entry><entry>
<para>Original param </para>
</entry>
                            </row>
                            <row>
<entry>id</entry><entry>
<para>The ID to get </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00290">290</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00291 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d">paramExists</link>(<emphasis role="keywordtype">id</emphasis>)&#32;&amp;&amp;&#32;param.<link linkend="_structargx_1_1ARGXParam_1ace0572ca0af0b51da129b562bee6a673">subExists</link>[this-&gt;<link linkend="_classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387">findParam</link>(<emphasis role="keywordtype">id</emphasis>)];&#32;}
</programlisting><para>
References <link linkend="_Argx_8cpp_source_1l00096">findParam()</link>, <link linkend="_Argx_8cpp_source_1l00142">paramExists()</link>, and <link linkend="_types_8hpp_source_1l00060">argx::ARGXParam::subExists</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5"/><section>
    <title>getSubValue()</title>
<indexterm><primary>getSubValue</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getSubValue</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::string &gt; argx::Argx::getSubValue (const std::string &amp; id)</computeroutput></para><para>

<para>Get sub-parameter values, starting from the first value found until the first found value that corresponds to a registered parameter. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>ID to find to get sub-value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>std::vector&lt;std::string&gt; Values found from first to last </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00580">580</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00581 &#32;&#32;&#32;&#32;{
00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;`Argx::getArgPos()`&#32;function&#32;for&#32;sub-params</emphasis>
00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;idPos&#32;=&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0">getArgPos</link>(<emphasis role="keywordtype">id</emphasis>)&#32;+&#32;1;
00584 
00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idPos&#32;&lt;&#32;0&#32;||&#32;idPos&#32;==&#32;std::string::npos)
00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{this-&gt;<link linkend="_classargx_1_1Argx_1ae7f1dcaf2c945c8592a3e89b15a0189b">getOption</link>(<emphasis role="keywordtype">id</emphasis>).<link linkend="_structargx_1_1ARGXOptions_1abcd90d184d4e1a80e3ebfe23197a70c0">defaultValue</link>};
00587 
00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;values;
00589 
00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;idPos&#32;;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff">getMainArgs</link>().size()&#32;;&#32;i++)
00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;End&#32;of&#32;the&#32;sub-parameter&#32;finding</emphasis>
00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assume&#32;the&#32;search&#32;is&#32;done&#32;due&#32;to&#32;an&#32;existsing&#32;sub-param</emphasis>
00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;idPos&#32;&amp;&amp;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a9d961d98a70713290d237dd8f3d68369">subParamExists</link>(this-&gt;<link linkend="_classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff">getMainArgs</link>()[i]))
00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00596 
00597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.emplace_back(this-&gt;<link linkend="_classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff">getMainArgs</link>()[i]);
00598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00599 
00600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;defaultValue;
00601 
00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;breakOut&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00604 
00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size();&#32;++i)
00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;0&#32;;&#32;j&#32;&lt;&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>.size()&#32;;&#32;++j)
00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[i].subParams.size()&#32;&gt;&#32;j)
00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[i].subParams[j].<emphasis role="keywordtype">id</emphasis>&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)
00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;defaultValue&#32;=&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[i].subParams[j].defaultValue;
00614 
00615 
00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;breakOut&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00617 
00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00622 
00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(breakOut)&#32;<emphasis role="keywordflow">break</emphasis>;
00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00626 
00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(values.empty())
00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.emplace_back(defaultValue);
00629 
00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;values;
00631 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_types_8hpp_source_1l00048">argx::ARGXOptions::defaultValue</link>, <link linkend="_Argx_8cpp_source_1l00079">getArgPos()</link>, <link linkend="_Argx_8cpp_source_1l00633">getMainArgs()</link>, <link linkend="_Argx_8cpp_source_1l00572">getOption()</link>, <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>, <link linkend="_Argx_8hpp_source_1l00022">options</link>, and <link linkend="_Argx_8cpp_source_1l00149">subParamExists()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1ac1e4d316a44cfdc596a181af15e74962"/><section>
    <title>getWrongArgs()</title>
<indexterm><primary>getWrongArgs</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>getWrongArgs</secondary></indexterm>
<para><computeroutput>int argx::Argx::getWrongArgs (const std::vector&lt; std::string &gt; &amp; argv)</computeroutput></para><para>

<para>Get the incorrect arguments and sub-arguments that were not registered. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>argv</entry><entry>
<para>Main arguments from argv </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int Argument position </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00395">395</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00396 &#32;&#32;&#32;&#32;{
00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;1;&#32;<emphasis role="comment">//&#32;skip&#32;program&#32;name</emphasis>
00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNormalParam&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00399 
00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos&#32;&lt;&#32;(<emphasis role="keywordtype">int</emphasis>)argv.size())
00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;arg&#32;=&#32;argv[pos];
00403 
00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;matching&#32;top-level&#32;option</emphasis>
00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespaceargx_1a9933be078f36db7b1424f6dd0372eb72">ARGXOptions</link>&#32;*matched&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00406 
00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;opt&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg&#32;==&#32;opt.param&#32;||&#32;arg&#32;==&#32;opt.sparam)
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matched&#32;=&#32;&amp;opt;
00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unknown&#32;top-level&#32;arg</emphasis>
00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!matched)&#32;<emphasis role="keywordflow">return</emphasis>&#32;(isNormalParam&#32;?&#32;pos&#32;:&#32;-pos);
00418 
00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;matched&#32;a&#32;top-level&#32;option</emphasis>
00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isNormalParam&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00421 
00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(matched-&gt;hasSubParams&#32;||&#32;matched-&gt;hasAnySubParams)
00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isNormalParam&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00425 
00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;scanPos&#32;=&#32;pos&#32;+&#32;1;
00427 
00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(scanPos&#32;&lt;&#32;(<emphasis role="keywordtype">int</emphasis>)argv.size())
00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;nextArg&#32;=&#32;argv[scanPos];
00431 
00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Is&#32;it&#32;a&#32;declared&#32;subparam&#32;for&#32;this&#32;option?</emphasis>
00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSub&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00434 
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;subOpt&#32;:&#32;matched-&gt;subParams)
00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextArg&#32;==&#32;subOpt.param&#32;||&#32;nextArg&#32;==&#32;subOpt.sparam)
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSub&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00443 
00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSub)
00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Consume&#32;that&#32;subparam&#32;and&#32;continue&#32;scanning</emphasis>
00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;scanPos;
00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++scanPos;
00449 
00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00452 
00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;not&#32;a&#32;subparam,&#32;is&#32;it&#32;a&#32;global&#32;option?&#32;(do&#32;**NOT**&#32;consume&#32;it)</emphasis>
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isGlobalOpt&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00455 
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;globalOpt&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextArg&#32;==&#32;globalOpt.param&#32;||&#32;nextArg&#32;==&#32;globalOpt.sparam)
00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isGlobalOpt&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00461 
00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00465 
00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;valid&#32;global&#32;option&#32;follows;&#32;stop&#32;subparam&#32;scan&#32;and&#32;let&#32;outer&#32;loop&#32;handle&#32;it</emphasis>
00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isGlobalOpt)&#32;<emphasis role="keywordflow">break</emphasis>;
00468 
00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;neither&#32;subparam&#32;nor&#32;global&#32;option;&#32;it&apos;s&#32;an&#32;invalid&#32;sub-parameter&#32;token</emphasis>
00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-scanPos;
00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00473 
00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++pos;
00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00476 
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;nothing&#32;wrong&#32;found;&#32;return&#32;your&#32;existing&#32;success&#32;codes</emphasis>
00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNormalParam)&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size()&#32;&gt;&#32;2&#32;?&#32;2&#32;:&#32;1);
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f">mainArgs</link>-&gt;size()&#32;&gt;&#32;2&#32;?&#32;-2&#32;:&#32;-1);
00480 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_types_8hpp_source_1l00051">argx::ARGXOptions::hasAnySubParams</link>, <link linkend="_types_8hpp_source_1l00050">argx::ARGXOptions::hasSubParams</link>, <link linkend="_Argx_8hpp_source_1l00023">mainArgs</link>, <link linkend="_Argx_8hpp_source_1l00022">options</link>, and <link linkend="_types_8hpp_source_1l00054">argx::ARGXOptions::subParams</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a8d66cd4ebaeb1c03ef474c260ce90977"/><section>
    <title>hasTag()</title>
<indexterm><primary>hasTag</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>hasTag</secondary></indexterm>
<para><computeroutput>bool argx::Argx::hasTag (const std::string &amp; id, const std::string &amp; tag)</computeroutput></para><para>

<para>Check if the <computeroutput>tag</computeroutput> exists in option with ID of <computeroutput>id</computeroutput> </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>ID from option </para>
</entry>
                            </row>
                            <row>
<entry>tag</entry><entry>
<para>Tag to find </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool Return false if there is no match, else, return true </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00159">159</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00160 &#32;&#32;&#32;&#32;{
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;paramID&#32;=&#32;this-&gt;<link linkend="_classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387">findParam</link>(<emphasis role="keywordtype">id</emphasis>);
00162 
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(paramID&#32;&lt;&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Validate&#32;if&#32;tag&#32;from&#32;options&#32;is&#32;equal&#32;to&#32;this&#32;tag&#32;from&#32;function&#32;param</emphasis>
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>[paramID].tag&#32;==&#32;tag)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00167 
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00169 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8cpp_source_1l00096">findParam()</link>, and <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d"/><section>
    <title>paramExists()</title>
<indexterm><primary>paramExists</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>paramExists</secondary></indexterm>
<para><computeroutput>bool argx::Argx::paramExists (const std::string &amp; id)</computeroutput></para><para>

<para>Get if param exists in the param options. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>ID to get </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00142">142</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00143 &#32;&#32;&#32;&#32;{
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387">findParam</link>(<emphasis role="keywordtype">id</emphasis>)&#32;&gt;=&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00145 
00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00147 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8cpp_source_1l00096">findParam()</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00290">getSubParam()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a0269687632438687f9afd44f80c2eaa9"/><section>
    <title>paramToID()</title>
<indexterm><primary>paramToID</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>paramToID</secondary></indexterm>
<para><computeroutput>std::string argx::Argx::paramToID (const std::string &amp; param)</computeroutput></para><para>

<para>Normal parameter or sub-paramter to its corresponding ID. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>param</entry><entry>
<para>Parameter value or name </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>std::string ID of the param or sub-param </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00066">66</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00067 &#32;&#32;&#32;&#32;{
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>;
00069 
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;option&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(option.param&#32;==&#32;param&#32;||&#32;option.sparam&#32;==&#32;param)
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;option.id;
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00075 
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a">id</link>;
00077 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00020">id</link>, and <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a9d961d98a70713290d237dd8f3d68369"/><section>
    <title>subParamExists()</title>
<indexterm><primary>subParamExists</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>subParamExists</secondary></indexterm>
<para><computeroutput>bool argx::Argx::subParamExists (const std::string &amp; id)</computeroutput></para><para>

<para>Get if sub-param exists in the param options. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>ID to get </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_Argx_8cpp_source_1l00149">149</link> of file <link linkend="_Argx_8cpp_source">Argx.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00150 &#32;&#32;&#32;&#32;{
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;p&#32;:&#32;this-&gt;<link linkend="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5">options</link>)
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p.sparam&#32;==&#32;<emphasis role="keywordtype">id</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00157 &#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="_Argx_8hpp_source_1l00022">options</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00580">getSubValue()</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a"/><section>
    <title>id</title>
<indexterm><primary>id</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>id</secondary></indexterm>
<para><computeroutput>std::string argx::Argx::id<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_Argx_8hpp_source_1l00020">20</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00034">Argx()</link>, and <link linkend="_Argx_8cpp_source_1l00066">paramToID()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f"/><section>
    <title>mainArgc</title>
<indexterm><primary>mainArgc</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>mainArgc</secondary></indexterm>
<para><computeroutput>unsigned int argx::Argx::mainArgc<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_Argx_8hpp_source_1l00025">25</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00034">Argx()</link>, <link linkend="_Argx_8cpp_source_1l00636">getArgc()</link>, and <link linkend="_Argx_8cpp_source_1l00171">getParam()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f"/><section>
    <title>mainArgs</title>
<indexterm><primary>mainArgs</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>mainArgs</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::string &gt; * argx::Argx::mainArgs = nullptr<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_Argx_8hpp_source_1l00023">23</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00034">Argx()</link>, <link linkend="_Argx_8cpp_source_1l00048">~Argx()</link>, <link linkend="_Argx_8cpp_source_1l00096">findParam()</link>, <link linkend="_Argx_8cpp_source_1l00079">getArgPos()</link>, <link linkend="_Argx_8cpp_source_1l00633">getMainArgs()</link>, <link linkend="_Argx_8cpp_source_1l00171">getParam()</link>, <link linkend="_Argx_8cpp_source_1l00580">getSubValue()</link>, and <link linkend="_Argx_8cpp_source_1l00395">getWrongArgs()</link>.</para>
</section>
<anchor xml:id="_classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5"/><section>
    <title>options</title>
<indexterm><primary>options</primary><secondary>argx::Argx</secondary></indexterm>
<indexterm><primary>argx::Argx</primary><secondary>options</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_structargx_1_1ARGXOptions">ARGXOptions</link> &gt; argx::Argx::options<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_Argx_8hpp_source_1l00022">22</link> of file <link linkend="_Argx_8hpp_source">Argx.hpp</link>.</para>
<para>
Referenced by <link linkend="_Argx_8cpp_source_1l00093">add()</link>, <link linkend="_Argx_8cpp_source_1l00489">compareArgs()</link>, <link linkend="_Argx_8cpp_source_1l00293">createDocs()</link>, <link linkend="_Argx_8cpp_source_1l00096">findParam()</link>, <link linkend="_Argx_8cpp_source_1l00572">getOption()</link>, <link linkend="_Argx_8cpp_source_1l00639">getOptions()</link>, <link linkend="_Argx_8cpp_source_1l00171">getParam()</link>, <link linkend="_Argx_8cpp_source_1l00580">getSubValue()</link>, <link linkend="_Argx_8cpp_source_1l00395">getWrongArgs()</link>, <link linkend="_Argx_8cpp_source_1l00159">hasTag()</link>, <link linkend="_Argx_8cpp_source_1l00066">paramToID()</link>, and <link linkend="_Argx_8cpp_source_1l00149">subParamExists()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
inc/<link linkend="_Argx_8hpp">Argx.hpp</link>src/<link linkend="_Argx_8cpp">Argx.cpp</link></section>
</section>
