<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="d9/da2/classargx_1_1Argx" kind="class" language="C++" prot="public">
    <compoundname>argx::Argx</compoundname>
    <includes refid="d0/d32/Argx_8hpp" local="no">Argx.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d9/da2/classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string argx::Argx::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <qualifiedname>argx::Argx::id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="20" column="13" bodyfile="inc/Argx.hpp" bodystart="20" bodyend="-1"/>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076" compoundref="d1/dad/Argx_8cpp" startline="34" endline="42">Argx</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a0269687632438687f9afd44f80c2eaa9" compoundref="d1/dad/Argx_8cpp" startline="66" endline="77">paramToID</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="d9/da2/classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f" prot="private" static="yes" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int argx::Argx::mainArgc</definition>
        <argsstring></argsstring>
        <name>mainArgc</name>
        <qualifiedname>argx::Argx::mainArgc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="25" column="21" bodyfile="inc/Argx.hpp" bodystart="25" bodyend="-1"/>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076" compoundref="d1/dad/Argx_8cpp" startline="34" endline="42">Argx</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a812254e076a5ec208ba9d2eab470edb4" compoundref="d1/dad/Argx_8cpp" startline="636" endline="637">getArgc</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a250e2f53873829c3567dc0aec9dc2952" compoundref="d1/dad/Argx_8cpp" startline="171" endline="288">getParam</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; std::string &gt; *</type>
        <definition>std::vector&lt; std::string &gt; * argx::Argx::mainArgs</definition>
        <argsstring></argsstring>
        <name>mainArgs</name>
        <qualifiedname>argx::Argx::mainArgs</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="23" column="20" bodyfile="inc/Argx.hpp" bodystart="23" bodyend="-1"/>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076" compoundref="d1/dad/Argx_8cpp" startline="34" endline="42">Argx</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a97654cab13febb7fb7870b14c9d31c6e" compoundref="d1/dad/Argx_8cpp" startline="48" endline="51">~Argx</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387" compoundref="d1/dad/Argx_8cpp" startline="96" endline="140">findParam</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0" compoundref="d1/dad/Argx_8cpp" startline="79" endline="91">getArgPos</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff" compoundref="d1/dad/Argx_8cpp" startline="633" endline="634">getMainArgs</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a250e2f53873829c3567dc0aec9dc2952" compoundref="d1/dad/Argx_8cpp" startline="171" endline="288">getParam</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5" compoundref="d1/dad/Argx_8cpp" startline="580" endline="631">getSubValue</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1ac1e4d316a44cfdc596a181af15e74962" compoundref="d1/dad/Argx_8cpp" startline="395" endline="480">getWrongArgs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; <ref refid="da/dd5/structargx_1_1ARGXOptions" kindref="compound">ARGXOptions</ref> &gt;</type>
        <definition>std::vector&lt; ARGXOptions &gt; argx::Argx::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <qualifiedname>argx::Argx::options</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="22" column="20" bodyfile="inc/Argx.hpp" bodystart="22" bodyend="-1"/>
        <referencedby refid="d9/da2/classargx_1_1Argx_1aab16d8baf18e1db7ce66995a7cad312e" compoundref="d1/dad/Argx_8cpp" startline="93" endline="94">add</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1adb4e8a622135970b4e12f14d49a76e52" compoundref="d1/dad/Argx_8cpp" startline="489" endline="570">compareArgs</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a99bbe74c7f09f6bb3a343dbdde050a64" compoundref="d1/dad/Argx_8cpp" startline="293" endline="359">createDocs</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387" compoundref="d1/dad/Argx_8cpp" startline="96" endline="140">findParam</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1ae7f1dcaf2c945c8592a3e89b15a0189b" compoundref="d1/dad/Argx_8cpp" startline="572" endline="578">getOption</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a3378e7eb2efcb1386b487ece1b5aec35" compoundref="d1/dad/Argx_8cpp" startline="639" endline="640">getOptions</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a250e2f53873829c3567dc0aec9dc2952" compoundref="d1/dad/Argx_8cpp" startline="171" endline="288">getParam</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5" compoundref="d1/dad/Argx_8cpp" startline="580" endline="631">getSubValue</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1ac1e4d316a44cfdc596a181af15e74962" compoundref="d1/dad/Argx_8cpp" startline="395" endline="480">getWrongArgs</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a8d66cd4ebaeb1c03ef474c260ce90977" compoundref="d1/dad/Argx_8cpp" startline="159" endline="169">hasTag</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a0269687632438687f9afd44f80c2eaa9" compoundref="d1/dad/Argx_8cpp" startline="66" endline="77">paramToID</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a9d961d98a70713290d237dd8f3d68369" compoundref="d1/dad/Argx_8cpp" startline="149" endline="157">subParamExists</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1ac4ac47d6fe631a673ce0c7594fd67a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>argx::Argx::Argx</definition>
        <argsstring>()</argsstring>
        <name>Argx</name>
        <qualifiedname>argx::Argx::Argx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="51" column="1" bodyfile="src/Argx.cpp" bodystart="45" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>argx::Argx::Argx</definition>
        <argsstring>(const std::string &amp;id, int argc, char *argv[])</argsstring>
        <name>Argx</name>
        <qualifiedname>argx::Argx::Argx</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Create <ref refid="d9/da2/classargx_1_1Argx" kindref="compound">Argx</ref> with the specific <computeroutput>id</computeroutput>, <computeroutput>argc</computeroutput> and <computeroutput>argv</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Set the ID of the <ref refid="d9/da2/classargx_1_1Argx" kindref="compound">Argx</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Set the <computeroutput>argc</computeroutput> of the <computeroutput>main()</computeroutput> function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Set the <computeroutput>argv</computeroutput> of the <computeroutput>main()</computeroutput> function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="48" column="1" bodyfile="src/Argx.cpp" bodystart="34" bodyend="42"/>
        <references refid="d9/da2/classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076" compoundref="d1/dad/Argx_8cpp" startline="34" endline="42">Argx</references>
        <references refid="d9/da2/classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a" compoundref="d0/d32/Argx_8hpp" startline="20">id</references>
        <references refid="d9/da2/classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f" compoundref="d0/d32/Argx_8hpp" startline="25">mainArgc</references>
        <references refid="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" compoundref="d0/d32/Argx_8hpp" startline="23">mainArgs</references>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076" compoundref="d1/dad/Argx_8cpp" startline="34" endline="42">Argx</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a97654cab13febb7fb7870b14c9d31c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>argx::Argx::~Argx</definition>
        <argsstring>()</argsstring>
        <name>~Argx</name>
        <qualifiedname>argx::Argx::~Argx</qualifiedname>
        <briefdescription>
<para>Deconstruct allocated objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="56" column="1" bodyfile="src/Argx.cpp" bodystart="48" bodyend="51"/>
        <references refid="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" compoundref="d0/d32/Argx_8hpp" startline="23">mainArgs</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1aab16d8baf18e1db7ce66995a7cad312e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void argx::Argx::add</definition>
        <argsstring>(ARGXOptions option) const</argsstring>
        <name>add</name>
        <qualifiedname>argx::Argx::add</qualifiedname>
        <param>
          <type><ref refid="da/dd5/structargx_1_1ARGXOptions" kindref="compound">ARGXOptions</ref></type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Add param options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>Add the option to the main params </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="76" column="6" bodyfile="src/Argx.cpp" bodystart="93" bodyend="94"/>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1adb4e8a622135970b4e12f14d49a76e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool argx::Argx::compareArgs</definition>
        <argsstring>(std::vector&lt; ARGXOptions &gt; options, std::vector&lt; std::string &gt; argv)</argsstring>
        <name>compareArgs</name>
        <qualifiedname>argx::Argx::compareArgs</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="da/dd5/structargx_1_1ARGXOptions" kindref="compound">ARGXOptions</ref> &gt;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Compare if <computeroutput>options</computeroutput> contains the required <computeroutput>id</computeroutput>, if the ID does not exist, return false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Return <ref refid="da/dd5/structargx_1_1ARGXOptions" kindref="compound">ARGXOptions</ref> vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="156" column="6" bodyfile="src/Argx.cpp" bodystart="489" bodyend="570"/>
        <references refid="da/dd5/structargx_1_1ARGXOptions_1ad2eec2de8559ea5cc4e446c0d47c6279" compoundref="dd/de3/types_8hpp" startline="51">argx::ARGXOptions::hasAnySubParams</references>
        <references refid="da/dd5/structargx_1_1ARGXOptions_1a02e69197bd3efa35da99edcc4018eb1a" compoundref="dd/de3/types_8hpp" startline="50">argx::ARGXOptions::hasSubParams</references>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
        <references refid="da/dd5/structargx_1_1ARGXOptions_1a6345f9a87edfb31007c6e3b53f9eeaed" compoundref="dd/de3/types_8hpp" startline="54">argx::ARGXOptions::subParams</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a99bbe74c7f09f6bb3a343dbdde050a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string argx::Argx::createDocs</definition>
        <argsstring>(ARGXStyle style, const std::string &amp;title, const std::string &amp;mainInfo)</argsstring>
        <name>createDocs</name>
        <qualifiedname>argx::Argx::createDocs</qualifiedname>
        <param>
          <type><ref refid="dc/d69/namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9" kindref="member">ARGXStyle</ref></type>
          <declname>style</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mainInfo</declname>
        </param>
        <briefdescription>
<para>Create documentation for the parameters with the specific style, title and main information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>Set the style using <ref refid="dc/d69/namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9" kindref="member">ARGXStyle</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>Title for docs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Main</parametername>
</parameternamelist>
<parameterdescription>
<para>information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string Documentation as a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="92" column="13" bodyfile="src/Argx.cpp" bodystart="293" bodyend="359"/>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
        <references refid="dc/d69/namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9a9e8b160226c9fe22a910c782ce5076e2" compoundref="dd/de3/types_8hpp" startline="11">argx::Professional</references>
        <references refid="dc/d69/namespaceargx_1a1aaf93330a8dedabb4307940b33f49d9a1fbb1e3943c2c6c560247ac8f9289780" compoundref="dd/de3/types_8hpp" startline="12">argx::Simple</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int argx::Argx::findParam</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>findParam</name>
        <qualifiedname>argx::Argx::findParam</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Find parameter and sub-parameter index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="106" column="5" bodyfile="src/Argx.cpp" bodystart="96" bodyend="140"/>
        <references refid="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" compoundref="d0/d32/Argx_8hpp" startline="23">mainArgs</references>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
        <referencedby refid="d9/da2/classargx_1_1Argx_1adb8fa05c9916682bf3cabeb2a12895f4" compoundref="d1/dad/Argx_8cpp" startline="290" endline="291">getSubParam</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a8d66cd4ebaeb1c03ef474c260ce90977" compoundref="d1/dad/Argx_8cpp" startline="159" endline="169">hasTag</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d" compoundref="d1/dad/Argx_8cpp" startline="142" endline="147">paramExists</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a812254e076a5ec208ba9d2eab470edb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int argx::Argx::getArgc</definition>
        <argsstring>() const</argsstring>
        <name>getArgc</name>
        <qualifiedname>argx::Argx::getArgc</qualifiedname>
        <briefdescription>
<para>Get the main options from the <computeroutput>main()</computeroutput> function as argc. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int Number of params including the executable param </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="112" column="5" bodyfile="src/Argx.cpp" bodystart="636" bodyend="637"/>
        <references refid="d9/da2/classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f" compoundref="d0/d32/Argx_8hpp" startline="25">mainArgc</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a7fb43159f183399c8674cd5e521d3caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int argx::Argx::getArgIDPos</definition>
        <argsstring>(const std::string &amp;arg)</argsstring>
        <name>getArgIDPos</name>
        <qualifiedname>argx::Argx::getArgIDPos</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Get argument using ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Argument position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="119" column="5" bodyfile="src/Argx.cpp" bodystart="53" bodyend="64"/>
        <references refid="d9/da2/classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0" compoundref="d1/dad/Argx_8cpp" startline="79" endline="91">getArgPos</references>
        <references refid="d9/da2/classargx_1_1Argx_1ae7f1dcaf2c945c8592a3e89b15a0189b" compoundref="d1/dad/Argx_8cpp" startline="572" endline="578">getOption</references>
        <references refid="da/dd5/structargx_1_1ARGXOptions_1a6324ea753af15d2a184e382e913694f0" compoundref="dd/de3/types_8hpp" startline="36">argx::ARGXOptions::param</references>
        <references refid="da/dd5/structargx_1_1ARGXOptions_1aa0cd2dddf236a7bd15c1636aa7ec4a9c" compoundref="dd/de3/types_8hpp" startline="41">argx::ARGXOptions::sparam</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int argx::Argx::getArgPos</definition>
        <argsstring>(const std::string &amp;arg)</argsstring>
        <name>getArgPos</name>
        <qualifiedname>argx::Argx::getArgPos</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Get argument position with specified <computeroutput>arg</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Find argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Return position of found <computeroutput>arg</computeroutput> from the options </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="70" column="5" bodyfile="src/Argx.cpp" bodystart="79" bodyend="91"/>
        <references refid="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" compoundref="d0/d32/Argx_8hpp" startline="23">mainArgs</references>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a7fb43159f183399c8674cd5e521d3caf" compoundref="d1/dad/Argx_8cpp" startline="53" endline="64">getArgIDPos</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5" compoundref="d1/dad/Argx_8cpp" startline="580" endline="631">getSubValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a671ad717805d76e459c74a3e0fee0625" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string argx::Argx::getID</definition>
        <argsstring>() const</argsstring>
        <name>getID</name>
        <qualifiedname>argx::Argx::getID</qualifiedname>
        <briefdescription>
<para>Get <ref refid="d9/da2/classargx_1_1Argx" kindref="compound">Argx</ref> ID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string <ref refid="d9/da2/classargx_1_1Argx" kindref="compound">Argx</ref> ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="196" column="13" bodyfile="src/Argx.cpp" bodystart="642" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; argx::Argx::getMainArgs</definition>
        <argsstring>() const</argsstring>
        <name>getMainArgs</name>
        <qualifiedname>argx::Argx::getMainArgs</qualifiedname>
        <briefdescription>
<para>Get main arguments from <computeroutput>main()</computeroutput> function <computeroutput>argv</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;std::string&gt; Vector of strings for main arguments from <computeroutput>argv</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="184" column="13" bodyfile="src/Argx.cpp" bodystart="633" bodyend="634"/>
        <references refid="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" compoundref="d0/d32/Argx_8hpp" startline="23">mainArgs</references>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5" compoundref="d1/dad/Argx_8cpp" startline="580" endline="631">getSubValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1ae7f1dcaf2c945c8592a3e89b15a0189b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/dd5/structargx_1_1ARGXOptions" kindref="compound">ARGXOptions</ref></type>
        <definition>ARGXOptions argx::Argx::getOption</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>getOption</name>
        <qualifiedname>argx::Argx::getOption</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get Options from specified ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID to find </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="da/dd5/structargx_1_1ARGXOptions" kindref="compound">ARGXOptions</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Option information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="163" column="13" bodyfile="src/Argx.cpp" bodystart="572" bodyend="578"/>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a7fb43159f183399c8674cd5e521d3caf" compoundref="d1/dad/Argx_8cpp" startline="53" endline="64">getArgIDPos</referencedby>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5" compoundref="d1/dad/Argx_8cpp" startline="580" endline="631">getSubValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a3378e7eb2efcb1386b487ece1b5aec35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="da/dd5/structargx_1_1ARGXOptions" kindref="compound">ARGXOptions</ref> &gt;</type>
        <definition>std::vector&lt; ARGXOptions &gt; argx::Argx::getOptions</definition>
        <argsstring>() const</argsstring>
        <name>getOptions</name>
        <qualifiedname>argx::Argx::getOptions</qualifiedname>
        <briefdescription>
<para>Get main set options as <ref refid="da/dd5/structargx_1_1ARGXOptions" kindref="compound">ARGXOptions</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;ARGXOptions&gt; Options to return </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="190" column="13" bodyfile="src/Argx.cpp" bodystart="639" bodyend="640"/>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a250e2f53873829c3567dc0aec9dc2952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d84/structargx_1_1ARGXParam" kindref="compound">ARGXParam</ref></type>
        <definition>ARGXParam argx::Argx::getParam</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>getParam</name>
        <qualifiedname>argx::Argx::getParam</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the param from <computeroutput>id</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d2/d84/structargx_1_1ARGXParam" kindref="compound">ARGXParam</ref> Returnted parameter to get </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="83" column="11" bodyfile="src/Argx.cpp" bodystart="171" bodyend="288"/>
        <references refid="d2/d84/structargx_1_1ARGXParam_1a47afcd85c9734d815006ee41647ac4e0" compoundref="dd/de3/types_8hpp" startline="59">argx::ARGXParam::exists</references>
        <references refid="d9/da2/classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f" compoundref="d0/d32/Argx_8hpp" startline="25">mainArgc</references>
        <references refid="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" compoundref="d0/d32/Argx_8hpp" startline="23">mainArgs</references>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
        <references refid="d2/d84/structargx_1_1ARGXParam_1ace0572ca0af0b51da129b562bee6a673" compoundref="dd/de3/types_8hpp" startline="60">argx::ARGXParam::subExists</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1adb8fa05c9916682bf3cabeb2a12895f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool argx::Argx::getSubParam</definition>
        <argsstring>(const argx::ARGXParam &amp;param, const std::string &amp;id)</argsstring>
        <name>getSubParam</name>
        <qualifiedname>argx::Argx::getSubParam</qualifiedname>
        <param>
          <type>const <ref refid="d2/d84/structargx_1_1ARGXParam" kindref="compound">argx::ARGXParam</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the sub-param from <computeroutput>id</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Original param </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="171" column="6" bodyfile="src/Argx.cpp" bodystart="290" bodyend="291"/>
        <references refid="d9/da2/classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387" compoundref="d1/dad/Argx_8cpp" startline="96" endline="140">findParam</references>
        <references refid="d9/da2/classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d" compoundref="d1/dad/Argx_8cpp" startline="142" endline="147">paramExists</references>
        <references refid="d2/d84/structargx_1_1ARGXParam_1ace0572ca0af0b51da129b562bee6a673" compoundref="dd/de3/types_8hpp" startline="60">argx::ARGXParam::subExists</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; argx::Argx::getSubValue</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>getSubValue</name>
        <qualifiedname>argx::Argx::getSubValue</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get sub-parameter values, starting from the first value found until the first found value that corresponds to a registered parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID to find to get sub-value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; Values found from first to last </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="178" column="13" bodyfile="src/Argx.cpp" bodystart="580" bodyend="631"/>
        <references refid="da/dd5/structargx_1_1ARGXOptions_1abcd90d184d4e1a80e3ebfe23197a70c0" compoundref="dd/de3/types_8hpp" startline="48">argx::ARGXOptions::defaultValue</references>
        <references refid="d9/da2/classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0" compoundref="d1/dad/Argx_8cpp" startline="79" endline="91">getArgPos</references>
        <references refid="d9/da2/classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff" compoundref="d1/dad/Argx_8cpp" startline="633" endline="634">getMainArgs</references>
        <references refid="d9/da2/classargx_1_1Argx_1ae7f1dcaf2c945c8592a3e89b15a0189b" compoundref="d1/dad/Argx_8cpp" startline="572" endline="578">getOption</references>
        <references refid="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" compoundref="d0/d32/Argx_8hpp" startline="23">mainArgs</references>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
        <references refid="d9/da2/classargx_1_1Argx_1a9d961d98a70713290d237dd8f3d68369" compoundref="d1/dad/Argx_8cpp" startline="149" endline="157">subParamExists</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1ac1e4d316a44cfdc596a181af15e74962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int argx::Argx::getWrongArgs</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;argv)</argsstring>
        <name>getWrongArgs</name>
        <qualifiedname>argx::Argx::getWrongArgs</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Get the incorrect arguments and sub-arguments that were not registered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Main arguments from argv </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Argument position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="126" column="5" bodyfile="src/Argx.cpp" bodystart="395" bodyend="480"/>
        <references refid="da/dd5/structargx_1_1ARGXOptions_1ad2eec2de8559ea5cc4e446c0d47c6279" compoundref="dd/de3/types_8hpp" startline="51">argx::ARGXOptions::hasAnySubParams</references>
        <references refid="da/dd5/structargx_1_1ARGXOptions_1a02e69197bd3efa35da99edcc4018eb1a" compoundref="dd/de3/types_8hpp" startline="50">argx::ARGXOptions::hasSubParams</references>
        <references refid="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" compoundref="d0/d32/Argx_8hpp" startline="23">mainArgs</references>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
        <references refid="da/dd5/structargx_1_1ARGXOptions_1a6345f9a87edfb31007c6e3b53f9eeaed" compoundref="dd/de3/types_8hpp" startline="54">argx::ARGXOptions::subParams</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a8d66cd4ebaeb1c03ef474c260ce90977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool argx::Argx::hasTag</definition>
        <argsstring>(const std::string &amp;id, const std::string &amp;tag)</argsstring>
        <name>hasTag</name>
        <qualifiedname>argx::Argx::hasTag</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Check if the <computeroutput>tag</computeroutput> exists in option with ID of <computeroutput>id</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID from option </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Tag to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool Return false if there is no match, else, return true </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="141" column="6" bodyfile="src/Argx.cpp" bodystart="159" bodyend="169"/>
        <references refid="d9/da2/classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387" compoundref="d1/dad/Argx_8cpp" startline="96" endline="140">findParam</references>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool argx::Argx::paramExists</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>paramExists</name>
        <qualifiedname>argx::Argx::paramExists</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get if param exists in the param options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="133" column="6" bodyfile="src/Argx.cpp" bodystart="142" bodyend="147"/>
        <references refid="d9/da2/classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387" compoundref="d1/dad/Argx_8cpp" startline="96" endline="140">findParam</references>
        <referencedby refid="d9/da2/classargx_1_1Argx_1adb8fa05c9916682bf3cabeb2a12895f4" compoundref="d1/dad/Argx_8cpp" startline="290" endline="291">getSubParam</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a0269687632438687f9afd44f80c2eaa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string argx::Argx::paramToID</definition>
        <argsstring>(const std::string &amp;param)</argsstring>
        <name>paramToID</name>
        <qualifiedname>argx::Argx::paramToID</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Normal parameter or sub-paramter to its corresponding ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter value or name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string ID of the param or sub-param </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="99" column="13" bodyfile="src/Argx.cpp" bodystart="66" bodyend="77"/>
        <references refid="d9/da2/classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a" compoundref="d0/d32/Argx_8hpp" startline="20">id</references>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
      </memberdef>
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1a9d961d98a70713290d237dd8f3d68369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool argx::Argx::subParamExists</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>subParamExists</name>
        <qualifiedname>argx::Argx::subParamExists</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get if sub-param exists in the param options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="148" column="6" bodyfile="src/Argx.cpp" bodystart="149" bodyend="157"/>
        <references refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" compoundref="d0/d32/Argx_8hpp" startline="22">options</references>
        <referencedby refid="d9/da2/classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5" compoundref="d1/dad/Argx_8cpp" startline="580" endline="631">getSubValue</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d9/da2/classargx_1_1Argx_1ad35955a51e2dd4b50a7ccf20f757fe55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int argx::Argx::formatWrongArgs</definition>
        <argsstring>(const int &amp;_int)</argsstring>
        <name>formatWrongArgs</name>
        <qualifiedname>argx::Argx::formatWrongArgs</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>_int</declname>
        </param>
        <briefdescription>
<para>Format to a positive number if number is negative for a correct execution of code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_int</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Positive value number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/Argx.hpp" line="63" column="12" bodyfile="src/Argx.cpp" bodystart="482" bodyend="487"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5">
        <label>argx::ARGXOptions</label>
        <link refid="da/dd5/structargx_1_1ARGXOptions"/>
        <childnode refid="2" relation="usage">
          <edgelabel>defaultValue</edgelabel>
          <edgelabel>id</edgelabel>
          <edgelabel>info</edgelabel>
          <edgelabel>param</edgelabel>
          <edgelabel>sparam</edgelabel>
          <edgelabel>tag</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>subParams</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>argx::Argx</label>
        <link refid="d9/da2/classargx_1_1Argx"/>
        <childnode refid="2" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>options</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mainArgs</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; argx::ARGXOptions &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="2" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="inc/Argx.hpp" line="17" column="1" bodyfile="inc/Argx.hpp" bodystart="18" bodyend="197"/>
    <listofallmembers>
      <member refid="d9/da2/classargx_1_1Argx_1aab16d8baf18e1db7ce66995a7cad312e" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>add</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a031a29c3cbb346b0379e1bfb99c35076" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>Argx</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1ac4ac47d6fe631a673ce0c7594fd67a12" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>Argx</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1adb4e8a622135970b4e12f14d49a76e52" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>compareArgs</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a99bbe74c7f09f6bb3a343dbdde050a64" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>createDocs</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a9343612a7c209f2323d2cd10fd3fe387" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>findParam</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1ad35955a51e2dd4b50a7ccf20f757fe55" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>formatWrongArgs</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a812254e076a5ec208ba9d2eab470edb4" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getArgc</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a7fb43159f183399c8674cd5e521d3caf" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getArgIDPos</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a73dccd80c13749ea006b46653cc2a8a0" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getArgPos</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a671ad717805d76e459c74a3e0fee0625" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getID</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a6146d9644c99b670b15d78cb92057bff" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getMainArgs</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1ae7f1dcaf2c945c8592a3e89b15a0189b" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getOption</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a3378e7eb2efcb1386b487ece1b5aec35" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getOptions</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a250e2f53873829c3567dc0aec9dc2952" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getParam</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1adb8fa05c9916682bf3cabeb2a12895f4" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getSubParam</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a25786788983b04754ac5d9f9aaa9bee5" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getSubValue</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1ac1e4d316a44cfdc596a181af15e74962" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>getWrongArgs</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a8d66cd4ebaeb1c03ef474c260ce90977" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>hasTag</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1adf94f5a9f22d8ea2cde21df63c2f3d8a" prot="private" virt="non-virtual"><scope>argx::Argx</scope><name>id</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a2e72f1c581d6ac0ffa02d45c3e6b540f" prot="private" virt="non-virtual"><scope>argx::Argx</scope><name>mainArgc</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a4e820cdc862457fd8618229ce47a690f" prot="private" virt="non-virtual"><scope>argx::Argx</scope><name>mainArgs</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1aba86dd3c8b11c495afd4c7eada1c0ac5" prot="private" virt="non-virtual"><scope>argx::Argx</scope><name>options</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a82c1649fbd03d4f3ea94bf8a14e1299d" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>paramExists</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a0269687632438687f9afd44f80c2eaa9" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>paramToID</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a9d961d98a70713290d237dd8f3d68369" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>subParamExists</name></member>
      <member refid="d9/da2/classargx_1_1Argx_1a97654cab13febb7fb7870b14c9d31c6e" prot="public" virt="non-virtual"><scope>argx::Argx</scope><name>~Argx</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
