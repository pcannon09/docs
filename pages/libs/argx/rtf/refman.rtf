{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\info 
{\title {\comment Argx  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.1.0-build \par
}}Argx}
{\comment Generated by doxygen 1.14.0.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Argx}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1.1.0-build\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ARGX - 1.1.0-build }\par \pard\plain 
{\tc\tcl1 \v ARGX - 1.1.0-build}
{\xe \v ARGX - 1.1.0-build}
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C++ Argument parser
\par}
{\tc\tcl2 \v C++ Argument parser}
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Made by: pcannon09
\par}
{\tc\tcl3 \v Made by: pcannon09}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\par}
\par}
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Requirements
\par}
{\tc\tcl2 \v Requirements}
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Compiler and C++ Standard Support
\par}
{\tc\tcl3 \v Compiler and C++ Standard Support}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{Argx Version  \cell }{Minimum C++ Standard  \cell }{GCC  \cell }{Clang  \cell }{MSVC  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{1.1.0-build  \cell }{C++11  \cell }{GCC 4.8+  \cell }{Clang 3.3+  \cell }{MSVC 2017+ (/std:c++11 or later)  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx1749
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx3498
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5247
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx6996
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8745
\pard \widctlpar\intbl\adjustright
{1.0.0-build  \cell }{C++11  \cell }{GCC 4.8+  \cell }{Clang 3.3+  \cell }{MSVC 2017+ (/std:c++11 or later)  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
\par}
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Specific information
\par}
{\tc\tcl3 \v Specific information}
{\b NOTE: For version 1.0.0-build} {
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
Minimum standard required to compile ---\'97 {\b C++11}  ({\b GCC 4.8+} , {\b Clang 3.3+}  and {\b MSVC 2017+} )\par}
\par
\par}
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Summary
\par}
{\tc\tcl3 \v Summary}
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
The minimum required version for Argx is C++ for {\b GCC 4.8+} , {\b Clang 3.3+}  and {\b MSVC 2017+} \par}
\par
\par}
\par}
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IMPORTANT NOTES
\par}
{\tc\tcl2 \v IMPORTANT NOTES}
{\b This library has been tested in Arch Linux, please open an issue if you encounter a problem with other Operating Systems}  {\b Tested with Clang 19}  {\b If you encounter any other issues with other compilers, open an issue in github} \par
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
For more information, please check the documentation at {\b {\f2 https://pcannon09.github.io/docs/pages/libs/argx/html/index.html}} \par}
\par
\par}
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
APIs
\par}
{\tc\tcl2 \v APIs}
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Python3 API: {\b {\f2 https://github.com/pcannon09/argx-py}} 
\par}
{\tc\tcl4 \v Python3 API: {\b {\f2 https://github.com/pcannon09/argx-py}} }
\par}
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
C API / Clone: {\b {\f2 https://github.com/pcannon09/argx-c}} 
\par}
{\tc\tcl4 \v C API / Clone: {\b {\f2 https://github.com/pcannon09/argx-c}} }
\par}
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b argx} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b argx::Argx} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b argx::ARGXAddError} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b argx::ARGXError} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b argx::ARGXOptions} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b argx::ARGXParam} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b inc/{\b Argx.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b ARGXAddError.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b macros.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b types.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b Argx.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b ARGXAddError.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
argx Namespace Reference\par \pard\plain 
{\tc\tcl2 \v argx}
{\xe \v argx}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Argx}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ARGXAddError}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ARGXError}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ARGXOptions}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ARGXParam}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct argx::ARGXError {\b ARGXError}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct argx::ARGXOptions {\b ARGXOptions}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct argx::ARGXParam {\b ARGXParam}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b ARGXStyle} \{ {\b Professional}
, {\b Simple}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v ARGXError\:argx}
{\xe \v argx\:ARGXError}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct argx::ARGXError argx::ARGXError}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ARGXOptions\:argx}
{\xe \v argx\:ARGXOptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct argx::ARGXOptions argx::ARGXOptions}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ARGXParam\:argx}
{\xe \v argx\:ARGXParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct argx::ARGXParam argx::ARGXParam}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v ARGXStyle\:argx}
{\xe \v argx\:ARGXStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b argx::ARGXStyle}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v Professional\:argx}
{\xe \v argx\:Professional}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid Professional{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
\cell }{\cell }{\row }
{\xe \v Simple\:argx}
{\xe \v argx\:Simple}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid Simple{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
\cell }{\cell }{\row }
}
\par
{
Definition at line {\b 9} of file {\b types.hpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00010     \{\par
00011         Professional,\par
00012         Simple,\par
00013     \};\par
}
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
argx::Argx Class Reference\par \pard\plain 
{\tc\tcl2 \v argx::Argx}
{\xe \v argx::Argx}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
\par
{
{\f2 #include <Argx.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Argx} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Argx} (const std::string &{\b id}, int argc, char *argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create {\b Argx} with the specific {\f2 id} , {\f2 argc}  and {\f2 argv}  }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Argx} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b add} ({\b ARGXOptions} option) const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add param options. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b compareArgs} (std::vector< {\b ARGXOptions} > {\b options}, std::vector< std::string > argv)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare if {\f2 options}  contains the required {\f2 id} , if the ID does not exist, return false. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b createDocs} ({\b ARGXStyle} style, const std::string &title, const std::string &mainInfo)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create documentation for the parameters with the specific style, title and main information. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b findParam} (const std::string &{\b id})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Find parameter index. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getArgc} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the main options from the {\f2 main()}  function as argc. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getArgPos} (const std::string &arg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get argument position with specified {\f2 arg}  }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getID} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get {\b Argx} ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b getMainArgs} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get main arguments from {\f2 main()}  function {\f2 argv}  }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b ARGXOptions} > {\b getOptions} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get main set options as {\b ARGXOptions}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ARGXParam} {\b getParam} (const std::string &{\b id})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the param from {\f2 id}  }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b getSubParam} (const {\b argx::ARGXParam} &param, const std::string &{\b id})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the sub-param from {\f2 id}  }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b paramExists} (const std::string &{\b id})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get if param exists in the param options. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b id}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static unsigned int {\b mainArgc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::vector< std::string > * {\b mainArgs} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::vector< {\b ARGXOptions} > {\b options}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 17} of file {\b Argx.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Argx\:argx::Argx}
{\xe \v argx::Argx\:Argx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
argx::Argx::Argx (const std::string & id, int argc, char * argv[])}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create {\b Argx} with the specific {\f2 id} , {\f2 argc}  and {\f2 argv}  }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{Set the ID of the {\b Argx} \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{Set the {\f2 argc}  of the {\f2 main()}  function \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{Set the {\f2 argv}  of the {\f2 main()}  function \cell }
{\row }
}
}{
Definition at line {\b 34} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00035         : id({\cf18 id})\par
00036     \{\par
00037         this->mainArgs = {\cf17 new} std::vector<std::string>(argv, argv + argc);\par
00038         this->mainArgc = argc;\par
00039     \}\par
}
{
\ql
References {\b Argx()}, {\b id}, {\b mainArgc}, and {\b mainArgs}.}\par
{
\ql
Referenced by {\b Argx()}.}\par
}
{\xe \v Argx\:argx::Argx}
{\xe \v argx::Argx\:Argx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
argx::Argx::Argx ()}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 42} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00043     \{ \}\par
}
}
{\xe \v ~Argx\:argx::Argx}
{\xe \v argx::Argx\:~Argx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
argx::Argx::~Argx ()}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00046     \{\par
00047         {\cf17 delete} this->mainArgs; this->mainArgs = {\cf17 nullptr};\par
00048     \}\par
}
{
\ql
References {\b mainArgs}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v add\:argx::Argx}
{\xe \v argx::Argx\:add}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void argx::Argx::add ({\b ARGXOptions} option) const}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add param options. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i option} \cell }{Add the option to the main params \cell }
{\row }
}
}{
Definition at line {\b 64} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00065     \{\par
00066         ARGXError error;\par
00067         error.type = {\cf22 "success"};\par
00068         error.code = 0;\par
00069 \par
00070         this->options.emplace_back(option);\par
00071     \}\par
}
{
\ql
References {\b argx::ARGXError::code}, {\b options}, and {\b argx::ARGXError::type}.}\par
}
{\xe \v compareArgs\:argx::Argx}
{\xe \v argx::Argx\:compareArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argx::Argx::compareArgs (std::vector< {\b ARGXOptions} > options, std::vector< std::string > argv)}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compare if {\f2 options}  contains the required {\f2 id} , if the ID does not exist, return false. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i options} \cell }{Return {\b ARGXOptions} vector \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{ID to find \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool \par
}}}{
Definition at line {\b 319} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00320     \{\par
00321         {\cf19 for} ({\cf18 size_t} i = 1; i < argv.size(); ++i)\par
00322         \{\par
00323             {\cf17 const} std::string &arg = argv[i];\par
00324 \par
00325             {\cf18 bool} found = {\cf17 false};\par
00326             {\cf18 bool} hasSubParams = {\cf17 false};\par
00327             {\cf18 bool} hasAnySubParams = {\cf17 false};\par
00328 \par
00329             ARGXOptions matchedOption;\par
00330 \par
00331             {\cf20 // Find the matching option}\par
00332             {\cf19 for} ({\cf17 const} {\cf17 auto} &option : options)\par
00333             \{\par
00334                 {\cf19 if} (option.sparam == arg || option.param == arg)\par
00335                 \{\par
00336                     found = {\cf17 true};\par
00337                     hasSubParams = option.hasSubParams;\par
00338                     hasAnySubParams = option.hasAnySubParams;\par
00339                     matchedOption = option;\par
00340 \par
00341                     {\cf19 break};\par
00342                 \}\par
00343             \}\par
00344 \par
00345             {\cf19 if} (!found) {\cf19 return} {\cf17 false};\par
00346 \par
00347             {\cf19 if} (hasSubParams || hasAnySubParams)\par
00348             \{\par
00349                 {\cf20 // Check if there's a next argument}\par
00350                 {\cf19 if} (i + 1 < argv.size())\par
00351                 \{\par
00352                     {\cf17 const} std::string &nextArg = argv[i + 1];\par
00353 \par
00354                     {\cf20 // Check if next argument is a sub-parameter}\par
00355                     {\cf18 bool} isSubParam = {\cf17 false};\par
00356 \par
00357                     {\cf19 if} (!nextArg.empty() && nextArg[0] != {\cf23 '-'})\par
00358                     \{\par
00359                         {\cf20 // Validate if it's a valid sub-parameter}\par
00360                         {\cf19 for} ({\cf17 const} {\cf17 auto} &subOption : matchedOption.subParams)\par
00361                         \{\par
00362                             {\cf19 if} (subOption.param == nextArg || subOption.sparam == nextArg)\par
00363                             \{\par
00364                                 isSubParam = {\cf17 true};\par
00365 \par
00366                                 {\cf19 break};\par
00367                             \}\par
00368                         \}\par
00369 \par
00370                         {\cf19 if} (isSubParam) ++i; {\cf20 // Get the sub-parameter}\par
00371                         {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams) {\cf19 return} {\cf17 false};\par
00372                     \}\par
00373 \par
00374                     {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams) {\cf19 return} {\cf17 false};\par
00375                 \}\par
00376             \}\par
00377         \}\par
00378 \par
00379         {\cf19 return} {\cf17 true};\par
00380     \}\par
}
{
\ql
References {\b options}, and {\b argx::ARGXOptions::subParams}.}\par
}
{\xe \v createDocs\:argx::Argx}
{\xe \v argx::Argx\:createDocs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::Argx::createDocs ({\b ARGXStyle} style, const std::string & title, const std::string & mainInfo)}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create documentation for the parameters with the specific style, title and main information. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i style} \cell }{Set the style using {\b ARGXStyle} \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i title} \cell }{Title for docs \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i Main} \cell }{information \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
std::string Documentation as a string \par
}}}{
Definition at line {\b 250} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00251     \{\par
00252         std::string contentStr;\par
00253 \par
00254         {\cf19 if} (style == ARGXStyle::Professional)\par
00255         \{\par
00256             {\cf19 for} ({\cf17 const} {\cf17 auto} &x : this->options)\par
00257             \{\par
00258                 {\cf20 // Main option header line}\par
00259                 contentStr += {\cf22 "ID: "} + x.id + {\cf22 "\\n"};\par
00260                 contentStr += {\cf22 "[ "} + x.sparam + {\cf22 " | "} + x.param;\par
00261 \par
00262                 {\cf19 if} (x.hasSubParams && !x.subParams.empty())\par
00263                 \{\par
00264                     contentStr += {\cf22 " [ "};\par
00265 \par
00266                     {\cf19 for} ({\cf18 size_t} i = 0; i < x.subParams.size(); ++i)\par
00267                     \{\par
00268                         {\cf17 const} {\cf17 auto} &sub = x.subParams[i];\par
00269 \par
00270                         contentStr += sub.param;\par
00271 \par
00272                         {\cf19 if} (i < x.subParams.size() - 1) contentStr += {\cf22 " | "};\par
00273                         {\cf19 else} {\cf19 if} (i <= x.subParams.size()) contentStr += {\cf23 ' '};\par
00274                     \}\par
00275 \par
00276                     contentStr += {\cf22 "] ] "};\par
00277                 \}\par
00278 \par
00279                 {\cf19 else} contentStr += {\cf22 " ] "};\par
00280 \par
00281                 contentStr += x.info + {\cf22 "\\n"};\par
00282 \par
00283                 {\cf20 // Print all sub-options with sparam and param, aligned with ideographic spaces if there are}\par
00284                 {\cf19 if} (x.hasSubParams && !x.subParams.empty())\par
00285                 \{\par
00286                     {\cf19 for} ({\cf17 const} {\cf17 auto} &sub : x.subParams)\par
00287                     \{\par
00288                         {\cf20 // Create ideographic spaces matching the length of main param for alignment}\par
00289                         std::wstring wideSpaces(x.param.size(), L{\cf22 '\\u3000'});\par
00290                         std::wstring_convert<std::codecvt_utf8<wchar_t>> converter;\par
00291                         std::string spacing = converter.to_bytes(wideSpaces);\par
00292 \par
00293                         contentStr += spacing + {\cf22 "  [ "} + sub.sparam + {\cf22 " | "} + sub.param + {\cf22 " ] "} + sub.info + {\cf22 "\\n"};\par
00294                     \}\par
00295                 \}\par
00296             \}\par
00297         \}\par
00298 \par
00299         {\cf19 else} {\cf19 if} (style == ARGXStyle::Simple)\par
00300         \{\par
00301             {\cf19 for} ({\cf17 const} {\cf17 auto} &x : this->options)\par
00302             \{\par
00303                 contentStr += x.sparam + {\cf22 ", "} + x.param + {\cf22 " - "} + x.info + {\cf22 "\\n"};\par
00304 \par
00305                 {\cf19 if} (x.hasSubParams && !x.subParams.empty())\par
00306                 \{\par
00307                     {\cf19 for} ({\cf17 const} {\cf17 auto} &sub : x.subParams)\par
00308                     \{\par
00309                         contentStr += {\cf22 "  "} + sub.sparam + {\cf22 ", "} + sub.param + {\cf22 " - "} + sub.info + {\cf22 "\\n"};\par
00310                     \}\par
00311                 \}\par
00312             \}\par
00313         \} {\cf20 // ARGXStyle}\par
00314 \par
00315         {\cf19 return} title + {\cf22 "\\n"} + mainInfo + {\cf22 "\\n"} + contentStr;\par
00316     \}\par
}
{
\ql
References {\b options}, {\b argx::Professional}, and {\b argx::Simple}.}\par
}
{\xe \v findParam\:argx::Argx}
{\xe \v argx::Argx\:findParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argx::Argx::findParam (const std::string & id)}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Find parameter index. }}\par
{
Definition at line {\b 73} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00074     \{\par
00075         {\cf20 // First check if it's a main parameter}\par
00076         {\cf19 for} ({\cf18 size_t} i = 0; i < this->options.size(); i++)\par
00077         \{\par
00078             {\cf19 if} (this->options[i].{\cf18 id} == {\cf18 id})\par
00079             \{\par
00080                 {\cf20 // Check if this main parameter exists in arguments}\par
00081                 {\cf19 for} ({\cf17 const} std::string &arg : *this->mainArgs)\par
00082                 \{\par
00083                     {\cf19 if} (arg == this->options[i].param || arg == this->options[i].sparam)\par
00084                     \{\par
00085                         {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(i);\par
00086                     \}\par
00087                 \}\par
00088             \}\par
00089         \}\par
00090 \par
00091         {\cf20 // Then look for sub-parameters}\par
00092         {\cf19 for} ({\cf17 const} {\cf17 auto} &opt : this->options)\par
00093         \{\par
00094             {\cf20 // Check if the parent option exists in the arguments}\par
00095             {\cf18 bool} parentExists = {\cf17 false};\par
00096 \par
00097             {\cf19 for} ({\cf17 const} std::string &arg : *this->mainArgs)\par
00098             \{\par
00099                 {\cf19 if} (arg == opt.param || arg == opt.sparam)\par
00100                 \{\par
00101                     parentExists = {\cf17 true};\par
00102                     {\cf19 break};\par
00103                 \}\par
00104             \}\par
00105 \par
00106             {\cf19 if} (parentExists)\par
00107             \{\par
00108                 {\cf20 // Find the index of the requested sub-parameter}\par
00109                 {\cf19 for} ({\cf18 size_t} i = 0; i < opt.subParams.size(); i++)\par
00110                 \{\par
00111                     {\cf19 if} (opt.subParams[i].id == {\cf18 id}) {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(i);\par
00112                 \}\par
00113             \}\par
00114         \}\par
00115 \par
00116         {\cf19 return} -1; {\cf20 // Not found}\par
00117     \}\par
}
{
\ql
References {\b mainArgs}, and {\b options}.}\par
{
\ql
Referenced by {\b getSubParam()}, and {\b paramExists()}.}\par
}
{\xe \v getArgc\:argx::Argx}
{\xe \v argx::Argx\:getArgc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argx::Argx::getArgc () const}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the main options from the {\f2 main()}  function as argc. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Number of params including the executable param \par
}}}{
Definition at line {\b 385} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00386     \{ {\cf19 return} this->mainArgc; \}\par
}
{
\ql
References {\b mainArgc}.}\par
}
{\xe \v getArgPos\:argx::Argx}
{\xe \v argx::Argx\:getArgPos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argx::Argx::getArgPos (const std::string & arg)}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get argument position with specified {\f2 arg}  }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i arg} \cell }{Find argument \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Return position of found {\f2 arg}  from the options \par
}}}{
Definition at line {\b 50} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00051     \{\par
00052         {\cf19 if} (!this->mainArgs)\par
00053             {\cf19 return} -1;\par
00054 \par
00055         {\cf19 for} ({\cf18 size_t} i = 0; i < this->mainArgs->size(); ++i)\par
00056         \{\par
00057             {\cf19 if} (this->mainArgs->at(i) == arg)\par
00058                 {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(i);\par
00059         \}\par
00060 \par
00061         {\cf19 return} -1;\par
00062     \}\par
}
{
\ql
References {\b mainArgs}.}\par
}
{\xe \v getID\:argx::Argx}
{\xe \v argx::Argx\:getID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::Argx::getID () const}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get {\b Argx} ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
std::string {\b Argx} ID \par
}}}{
Definition at line {\b 391} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00392     \{ {\cf19 return} this->id; \}\par
}
}
{\xe \v getMainArgs\:argx::Argx}
{\xe \v argx::Argx\:getMainArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > argx::Argx::getMainArgs () const}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get main arguments from {\f2 main()}  function {\f2 argv}  }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
std::vector<std::string> Vector of strings for main arguments from {\f2 argv}  \par
}}}{
Definition at line {\b 382} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00383     \{ {\cf19 return} *this->mainArgs; \}\par
}
{
\ql
References {\b mainArgs}.}\par
}
{\xe \v getOptions\:argx::Argx}
{\xe \v argx::Argx\:getOptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< {\b ARGXOptions} > argx::Argx::getOptions () const}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get main set options as {\b ARGXOptions}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
std::vector<ARGXOptions> Options to return \par
}}}{
Definition at line {\b 388} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00389     \{ {\cf19 return} this->options; \}\par
}
{
\ql
References {\b options}.}\par
}
{\xe \v getParam\:argx::Argx}
{\xe \v argx::Argx\:getParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ARGXParam} argx::Argx::getParam (const std::string & id)}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the param from {\f2 id}  }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The ID to get \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b ARGXParam} Returnted parameter to get \par
}}}{
Definition at line {\b 128} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00129     \{\par
00130         {\cf19 if} (this->mainArgc <= 1) {\cf19 return} \{\};\par
00131 \par
00132         ARGXParam result;\par
00133 \par
00134         {\cf20 // First, check if this is a top-level option}\par
00135         {\cf19 for} ({\cf17 const} {\cf17 auto} &opt : this->options)\par
00136         \{\par
00137             {\cf19 if} (opt.id == {\cf18 id})\par
00138             \{\par
00139                 {\cf20 // Find the position of the main option in arguments}\par
00140                 {\cf18 int} mainOptionPos = -1;\par
00141 \par
00142                 {\cf19 for} ({\cf18 size_t} i = 0; i < this->mainArgs->size(); ++i)\par
00143                 \{\par
00144                     {\cf19 if} ((*this->mainArgs)[i] == opt.param || (*this->mainArgs)[i] == opt.sparam)\par
00145                     \{\par
00146                         result.exists = {\cf17 true};\par
00147                         mainOptionPos = i;\par
00148                         {\cf19 break};\par
00149                     \}\par
00150                 \}\par
00151 \par
00152                 {\cf19 if} (result.exists)\par
00153                 \{\par
00154                     {\cf19 if} (opt.hasSubParams || opt.hasAnySubParams)\par
00155                     \{\par
00156                         {\cf20 // Check each sub-parameter}\par
00157                         {\cf19 for} ({\cf17 const} {\cf17 auto} &sub : opt.subParams)\par
00158                         \{\par
00159                             {\cf18 bool} subMatched = {\cf17 false};\par
00160 \par
00161                             {\cf20 // Look for sub-parameters after the main option}\par
00162                             {\cf19 for} ({\cf18 size_t} i = mainOptionPos + 1; i < this->mainArgs->size(); ++i)\par
00163                             \{\par
00164                                 {\cf19 if} ((*this->mainArgs)[i] == sub.param || (*this->mainArgs)[i] == sub.sparam)\par
00165                                 \{\par
00166                                     subMatched = {\cf17 true};\par
00167                                     {\cf19 break};\par
00168                                 \}\par
00169                             \}\par
00170 \par
00171                             result.subExists.push_back(subMatched);\par
00172                         \}\par
00173                     \}\par
00174 \par
00175                     {\cf19 return} result;\par
00176                 \}\par
00177             \}\par
00178         \}\par
00179 \par
00180         {\cf20 // If not found as top-level, check if it's a sub-parameter}\par
00181         {\cf19 for} ({\cf17 const} {\cf17 auto} &opt : this->options)\par
00182         \{\par
00183             {\cf20 // Find if the parent option exists and get its position}\par
00184             {\cf18 size_t} parentPos = -1;\par
00185 \par
00186             {\cf19 for} ({\cf18 size_t} i = 0; i < this->mainArgs->size(); ++i)\par
00187             \{\par
00188                 {\cf19 if} ((*this->mainArgs)[i] == opt.param || (*this->mainArgs)[i] == opt.sparam)\par
00189                 \{\par
00190                     parentPos = i;\par
00191                     {\cf19 break};\par
00192                 \}\par
00193             \}\par
00194 \par
00195             {\cf19 if} (parentPos > -1 && (opt.hasSubParams || opt.hasAnySubParams))\par
00196             \{\par
00197                 {\cf20 // Check if the requested sub-parameter exists after the parent}\par
00198                 {\cf19 for} ({\cf17 const} {\cf17 auto} &sub : opt.subParams)\par
00199                 \{\par
00200                     {\cf19 if} (sub.id == {\cf18 id})\par
00201                     \{\par
00202                         {\cf19 for} ({\cf18 size_t} i = parentPos + 1; i < this->mainArgs->size(); ++i)\par
00203                         \{\par
00204                             {\cf19 if} ((*this->mainArgs)[i] == sub.param || (*this->mainArgs)[i] == sub.sparam)\par
00205                             \{\par
00206                                 result.exists = {\cf17 true};\par
00207                                 {\cf19 break};\par
00208                             \}\par
00209                         \}\par
00210 \par
00211                         {\cf19 if} (!result.exists && parentPos + 1 < this->mainArgs->size())\par
00212                         \{\par
00213                             std::string nextArg = (*this->mainArgs)[parentPos + 1];\par
00214 \par
00215                             {\cf19 if} (nextArg == sub.param || nextArg == sub.sparam) result.exists = {\cf17 true};\par
00216                         \}\par
00217 \par
00218                         {\cf20 // Handle any sub-sub-parameters if they exist}\par
00219                         {\cf19 if} (result.exists && (sub.hasSubParams || sub.hasAnySubParams))\par
00220                         \{\par
00221                             {\cf19 for} ({\cf17 const} {\cf17 auto} &subsub : sub.subParams)\par
00222                             \{\par
00223                                 {\cf18 bool} subsubMatched = {\cf17 false};\par
00224 \par
00225                                 {\cf19 for} ({\cf18 size_t} i = 0; i < this->mainArgs->size(); ++i)\par
00226                                 \{\par
00227                                     {\cf19 if} ((*this->mainArgs)[i] == subsub.param || (*this->mainArgs)[i] == subsub.sparam)\par
00228                                     \{\par
00229                                         subsubMatched = {\cf17 true};\par
00230                                         {\cf19 break};\par
00231                                     \}\par
00232                                 \}\par
00233 \par
00234                                 result.subExists.push_back(subsubMatched);\par
00235                             \}\par
00236                         \}\par
00237 \par
00238                         {\cf19 return} result;\par
00239                     \}\par
00240                 \}\par
00241             \}\par
00242         \}\par
00243 \par
00244         {\cf19 return} result;\par
00245     \}\par
}
{
\ql
References {\b argx::ARGXParam::exists}, {\b mainArgc}, {\b mainArgs}, {\b options}, and {\b argx::ARGXParam::subExists}.}\par
}
{\xe \v getSubParam\:argx::Argx}
{\xe \v argx::Argx\:getSubParam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argx::Argx::getSubParam (const {\b argx::ARGXParam} & param, const std::string & id)}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the sub-param from {\f2 id}  }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i param} \cell }{Original param \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{The ID to get \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool \par
}}}{
Definition at line {\b 247} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00248     \{ {\cf19 return} this->paramExists({\cf18 id}) && param.subExists[this->findParam({\cf18 id})]; \}\par
}
{
\ql
References {\b findParam()}, {\b paramExists()}, and {\b argx::ARGXParam::subExists}.}\par
}
{\xe \v paramExists\:argx::Argx}
{\xe \v argx::Argx\:paramExists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argx::Argx::paramExists (const std::string & id)}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get if param exists in the param options. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i id} \cell }{ID to get \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bool \par
}}}{
Definition at line {\b 119} of file {\b Argx.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00120     \{\par
00121         {\cf19 if} (this->findParam({\cf18 id}) >= 0) {\cf19 return} {\cf17 true};;\par
00122 \par
00123         {\cf19 return} {\cf17 false};\par
00124     \}\par
}
{
\ql
References {\b findParam()}.}\par
{
\ql
Referenced by {\b getSubParam()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v id\:argx::Argx}
{\xe \v argx::Argx\:id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::Argx::id{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b Argx.hpp}.}\par
{
\ql
Referenced by {\b Argx()}.}\par
}
{\xe \v mainArgc\:argx::Argx}
{\xe \v argx::Argx\:mainArgc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int argx::Argx::mainArgc{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b Argx.hpp}.}\par
{
\ql
Referenced by {\b Argx()}, {\b getArgc()}, and {\b getParam()}.}\par
}
{\xe \v mainArgs\:argx::Argx}
{\xe \v argx::Argx\:mainArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > * argx::Argx::mainArgs = nullptr{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b Argx.hpp}.}\par
{
\ql
Referenced by {\b Argx()}, {\b ~Argx()}, {\b findParam()}, {\b getArgPos()}, {\b getMainArgs()}, and {\b getParam()}.}\par
}
{\xe \v options\:argx::Argx}
{\xe \v argx::Argx\:options}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< {\b ARGXOptions} > argx::Argx::options{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 22} of file {\b Argx.hpp}.}\par
{
\ql
Referenced by {\b add()}, {\b compareArgs()}, {\b createDocs()}, {\b findParam()}, {\b getOptions()}, and {\b getParam()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b Argx.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b Argx.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
argx::ARGXAddError Class Reference\par \pard\plain 
{\tc\tcl2 \v argx::ARGXAddError}
{\xe \v argx::ARGXAddError}
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
\par
{
{\f2 #include <ARGXAddError.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ARGXAddError} (const std::string &{\b msg}, const std::string &{\b help}="")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::pair< const char *, const char * > {\b what} () const noexcept\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b help}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b msg}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 10} of file {\b ARGXAddError.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ARGXAddError\:argx::ARGXAddError}
{\xe \v argx::ARGXAddError\:ARGXAddError}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
argx::ARGXAddError::ARGXAddError (const std::string & msg, const std::string & help = {\f2 ""})}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 8} of file {\b ARGXAddError.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00009         : msg(msg), help(help)\par
00010     \{ \}\par
}
{
\ql
References {\b help}, and {\b msg}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v what\:argx::ARGXAddError}
{\xe \v argx::ARGXAddError\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::pair< const char *, const char * > argx::ARGXAddError::what () const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b ARGXAddError.cpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00013     \{ {\cf19 return} \{ this->msg.c_str(), this->help.c_str() \}; \}\par
}
{
\ql
References {\b help}, and {\b msg}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v help\:argx::ARGXAddError}
{\xe \v argx::ARGXAddError\:help}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::ARGXAddError::help{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 14} of file {\b ARGXAddError.hpp}.}\par
{
\ql
Referenced by {\b ARGXAddError()}, and {\b what()}.}\par
}
{\xe \v msg\:argx::ARGXAddError}
{\xe \v argx::ARGXAddError\:msg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::ARGXAddError::msg{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b ARGXAddError.hpp}.}\par
{
\ql
Referenced by {\b ARGXAddError()}, and {\b what()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b ARGXAddError.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ARGXAddError.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
argx::ARGXError Struct Reference\par \pard\plain 
{\tc\tcl2 \v argx::ARGXError}
{\xe \v argx::ARGXError}
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
\par
{
{\f2 #include <types.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b code}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b error}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b help}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b type}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 15} of file {\b types.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v code\:argx::ARGXError}
{\xe \v argx::ARGXError\:code}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int argx::ARGXError::code}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b types.hpp}.}\par
{
\ql
Referenced by {\b argx::Argx::add()}.}\par
}
{\xe \v error\:argx::ARGXError}
{\xe \v argx::ARGXError\:error}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::ARGXError::error}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 18} of file {\b types.hpp}.}\par
}
{\xe \v help\:argx::ARGXError}
{\xe \v argx::ARGXError\:help}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::ARGXError::help}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b types.hpp}.}\par
}
{\xe \v type\:argx::ARGXError}
{\xe \v argx::ARGXError\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::ARGXError::type}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b types.hpp}.}\par
{
\ql
Referenced by {\b argx::Argx::add()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b types.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
argx::ARGXOptions Struct Reference\par \pard\plain 
{\tc\tcl2 \v argx::ARGXOptions}
{\xe \v argx::ARGXOptions}
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
\par
{
{\f2 #include <types.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b hasAnySubParams} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b hasSubParams} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b id}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ID (id) }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b info}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b param}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Param (param): }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b sparam}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Short Param (sparam): }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b ARGXOptions} > {\b subParams}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 24} of file {\b types.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v hasAnySubParams\:argx::ARGXOptions}
{\xe \v argx::ARGXOptions\:hasAnySubParams}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argx::ARGXOptions::hasAnySubParams = false}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b types.hpp}.}\par
}
{\xe \v hasSubParams\:argx::ARGXOptions}
{\xe \v argx::ARGXOptions\:hasSubParams}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argx::ARGXOptions::hasSubParams = false}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 43} of file {\b types.hpp}.}\par
}
{\xe \v id\:argx::ARGXOptions}
{\xe \v argx::ARGXOptions\:id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::ARGXOptions::id}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ID (id) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ID of the option \par
}{
Definition at line {\b 29} of file {\b types.hpp}.}\par
}
{\xe \v info\:argx::ARGXOptions}
{\xe \v argx::ARGXOptions\:info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::ARGXOptions::info}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b types.hpp}.}\par
}
{\xe \v param\:argx::ARGXOptions}
{\xe \v argx::ARGXOptions\:param}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::ARGXOptions::param}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Param (param): }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
EXAMPLE: \'96help, \'96version \par
}{
Definition at line {\b 35} of file {\b types.hpp}.}\par
}
{\xe \v sparam\:argx::ARGXOptions}
{\xe \v argx::ARGXOptions\:sparam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string argx::ARGXOptions::sparam}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Short Param (sparam): }}\par
{
Definition at line {\b 40} of file {\b types.hpp}.}\par
}
{\xe \v subParams\:argx::ARGXOptions}
{\xe \v argx::ARGXOptions\:subParams}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<{\b ARGXOptions}> argx::ARGXOptions::subParams}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b types.hpp}.}\par
{
\ql
Referenced by {\b argx::Argx::compareArgs()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b types.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
argx::ARGXParam Struct Reference\par \pard\plain 
{\tc\tcl2 \v argx::ARGXParam}
{\xe \v argx::ARGXParam}
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
\par
{
{\f2 #include <types.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b exists} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< bool > {\b subExists}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 49} of file {\b types.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v exists\:argx::ARGXParam}
{\xe \v argx::ARGXParam\:exists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool argx::ARGXParam::exists = false}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 51} of file {\b types.hpp}.}\par
{
\ql
Referenced by {\b argx::Argx::getParam()}.}\par
}
{\xe \v subExists\:argx::ARGXParam}
{\xe \v argx::ARGXParam\:subExists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<bool> argx::ARGXParam::subExists}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 52} of file {\b types.hpp}.}\par
{
\ql
Referenced by {\b argx::Argx::getParam()}, and {\b argx::Argx::getSubParam()}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b types.hpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/Argx.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v inc/Argx.hpp}
{\xe \v inc/Argx.hpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../inc/macros.hpp"}\par
{\f2 #include <string>}\par
{\f2 #include <vector>}\par
{\f2 #include "../inc/types.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b argx::Argx}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b argx}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Argx.hpp\par \pard\plain 
{\tc\tcl2 \v inc/Argx.hpp}
{\xe \v inc/Argx.hpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* inc/argx.hpp}\par
00002 {\cf20  * Owned and created by: pcannon09}\par
00003 {\cf20  */}\par
00004 \par
00005 {\cf21 #pragma once}\par
00006 \par
00007 {\cf21 #include "../inc/macros.hpp"}\par
00008 \par
00009 {\cf21 #if __cplusplus >= 201103L || defined(ARGX_AS_PYTHON_PACKAGE)}\par
00010 {\cf21 #include <string>}\par
00011 {\cf21 #include <vector>}\par
00012 \par
00013 {\cf21 #include "../inc/types.hpp"}\par
00014 \par
00015 {\cf17 namespace }argx\par
00016 \{\par
00017     {\cf17 class }Argx\par
00018     \{\par
00019     {\cf17 private}:\par
00020         std::string id;\par
00021 \par
00022         {\cf17 static} std::vector<ARGXOptions> options;\par
00023         {\cf17 static} std::vector<std::string> *mainArgs;\par
00024 \par
00025         {\cf17 static} {\cf18 unsigned} {\cf18 int} mainArgc;\par
00026 \par
00027     {\cf17 public}:\par
00028 \par
00029 {\cf21 #if defined(ARGX_AS_PYTHON_PACKAGE)}{\cf20 }\par
00030 {\cf20         /**}\par
00031 {\cf20          * @brief Create Argx with the specific `id` and `args` as a python package}\par
00032 {\cf20          * @param id Set the ID of the Argx}\par
00033 {\cf20          * @param args Set the `argv` of the `main()` function with the specific list contents in python}\par
00034 {\cf20          */}{\cf21 }\par
00035         Argx({\cf17 const} std::string &{\cf18 id}, {\cf17 const} std::vector<std::string> &args);\par
00036 {\cf20 }\par
00037 {\cf20         /**}\par
00038 {\cf20          * @brief Call the deconstructor of the Argx option (SPECIFIC FOR PYTHON)}\par
00039 {\cf20          */}\par
00040         {\cf18 void} destroy();\par
00041 {\cf21 #else}{\cf20 }\par
00042 {\cf20         /**}\par
00043 {\cf20          * @brief Create Argx with the specific `id`, `argc` and `argv`}\par
00044 {\cf20          * @param id Set the ID of the Argx}\par
00045 {\cf20          * @param argc Set the `argc` of the `main()` function}\par
00046 {\cf20          * @param argv Set the `argv` of the `main()` function}\par
00047 {\cf20          */}{\cf21 }\par
00048         Argx({\cf17 const} std::string &{\cf18 id}, {\cf18 int} argc, {\cf18 char} *argv[]);\par
00049 {\cf21 #endif}\par
00050 \par
00051         Argx();\par
00052         ~Argx();\par
00053 {\cf20 }\par
00054 {\cf20         /**}\par
00055 {\cf20          * @brief Get argument position with specified `arg`}\par
00056 {\cf20          * @param arg Find argument}\par
00057 {\cf20          * @return int Return position of found `arg` from the options}\par
00058 {\cf20          */}\par
00059         {\cf18 int} getArgPos({\cf17 const} std::string &arg);\par
00060 {\cf20 }\par
00061 {\cf20         /**}\par
00062 {\cf20          * @brief Add param options}\par
00063 {\cf20          * @param option Add the option to the main params}\par
00064 {\cf20          */}\par
00065         {\cf18 void} add(ARGXOptions option) {\cf17 const};\par
00066 {\cf20 }\par
00067 {\cf20         /**}\par
00068 {\cf20          * @brief Get the param from `id`}\par
00069 {\cf20          * @param id The ID to get}\par
00070 {\cf20          * @return ARGXParam Returnted parameter to get}\par
00071 {\cf20          */}\par
00072         ARGXParam getParam({\cf17 const} std::string& {\cf18 id});\par
00073 {\cf20 }\par
00074 {\cf20         /**}\par
00075 {\cf20          * @brief Create documentation for the parameters with the specific style, title and main information}\par
00076 {\cf20          * @param style Set the style using ARGXStyle}\par
00077 {\cf20          * @param title Title for docs}\par
00078 {\cf20          * @param Main information}\par
00079 {\cf20          * @return std::string Documentation as a string}\par
00080 {\cf20          */}\par
00081         std::string createDocs(ARGXStyle style, {\cf17 const} std::string &title, {\cf17 const} std::string &mainInfo);\par
00082 {\cf20 }\par
00083 {\cf20         /**}\par
00084 {\cf20          * @brief Find parameter index}\par
00085 {\cf20          */}\par
00086         {\cf18 int} findParam({\cf17 const} std::string& {\cf18 id});\par
00087 {\cf20 }\par
00088 {\cf20         /**}\par
00089 {\cf20          * @brief Get the main options from the `main()` function as argc}\par
00090 {\cf20          * @return int Number of params including the executable param}\par
00091 {\cf20          */}\par
00092         {\cf18 int} getArgc() {\cf17 const};\par
00093 {\cf20 }\par
00094 {\cf20         /**}\par
00095 {\cf20          * @brief Get if param exists in the param options}\par
00096 {\cf20          * @param id ID to get}\par
00097 {\cf20          * @return bool}\par
00098 {\cf20          */}\par
00099         {\cf18 bool} paramExists({\cf17 const} std::string &{\cf18 id});\par
00100 {\cf20 }\par
00101 {\cf20         /**}\par
00102 {\cf20          * @brief Compare if `options` contains the required `id`, if the ID does not exist, return false}\par
00103 {\cf20          * @param options Return ARGXOptions vector}\par
00104 {\cf20          * @param id ID to find}\par
00105 {\cf20          * @return bool}\par
00106 {\cf20          */}\par
00107         {\cf18 bool} compareArgs(std::vector<ARGXOptions> options, std::vector<std::string> argv);\par
00108 {\cf20 }\par
00109 {\cf20         /**}\par
00110 {\cf20          * @brief Get the sub-param from `id`}\par
00111 {\cf20          * @param param Original param}\par
00112 {\cf20          * @param id The ID to get}\par
00113 {\cf20          * @return bool}\par
00114 {\cf20          */}\par
00115         {\cf18 bool} getSubParam({\cf17 const} argx::ARGXParam &param, {\cf17 const} std::string &{\cf18 id});\par
00116 {\cf20 }\par
00117 {\cf20         /**}\par
00118 {\cf20          * @brief Get main arguments from `main()` function `argv`}\par
00119 {\cf20          * @return std::vector<std::string> Vector of strings for main arguments from `argv`}\par
00120 {\cf20          */}\par
00121         std::vector<std::string> getMainArgs() {\cf17 const};\par
00122 {\cf20 }\par
00123 {\cf20         /**}\par
00124 {\cf20          * @brief Get main set options as ARGXOptions}\par
00125 {\cf20          * @return std::vector<ARGXOptions> Options to return}\par
00126 {\cf20          */}\par
00127         std::vector<ARGXOptions> getOptions() {\cf17 const};\par
00128 {\cf20 }\par
00129 {\cf20         /**}\par
00130 {\cf20          * @brief Get Argx ID}\par
00131 {\cf20          * @return std::string Argx ID}\par
00132 {\cf20          */}\par
00133         std::string getID() {\cf17 const};\par
00134     \};\par
00135 \}\par
00136 \par
00137 {\cf21 #else}\par
00138 {\cf21 #   error "Must compile with C++11 support or newer"}\par
00139 {\cf21 #   pragma message("Current standard is " ARGX_TOSTRING(__cplusplus))}\par
00140 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/ARGXAddError.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v inc/ARGXAddError.hpp}
{\xe \v inc/ARGXAddError.hpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <utility>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b argx::ARGXAddError}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b argx}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ARGXAddError.hpp\par \pard\plain 
{\tc\tcl2 \v inc/ARGXAddError.hpp}
{\xe \v inc/ARGXAddError.hpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf21 #if __cplusplus >= 201103L || defined(ARGX_AS_PYTHON_PACKAGE)}\par
00004 \par
00005 {\cf21 #include <string>}\par
00006 {\cf21 #include <utility>}\par
00007 \par
00008 {\cf17 namespace }argx\par
00009 \{\par
00010     {\cf17 class }ARGXAddError\par
00011     \{\par
00012     {\cf17 private}:\par
00013         std::string msg;\par
00014         std::string help;\par
00015 \par
00016     {\cf17 public}:\par
00017         ARGXAddError({\cf17 const} std::string &msg, {\cf17 const} std::string &help = {\cf22 ""});\par
00018 \par
00019         std::pair<{\cf17 const} {\cf18 char}* {\cf20 /*Error*/}, {\cf17 const} {\cf18 char}* {\cf20 /*Help*/}> what() const noexcept;\par
00020     \};\par
00021 \}\par
00022 \par
00023 {\cf21 #else}\par
00024 {\cf21 #   error "Must compile with C++11 support or newer"}\par
00025 {\cf21 #   pragma message("Current standard is " ARGX_TOSTRING(__cplusplus))}\par
00026 {\cf21 #endif}\par
00027 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/macros.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v inc/macros.hpp}
{\xe \v inc/macros.hpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_DEV}\~ false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_STRINGIFY}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_TOSTRING}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION}\~ (({\b ARGX_VERSION_MAJOR}<<16)|({\b ARGX_VERSION_MINOR}<<8)|({\b ARGX_VERSION_PATCH})|({\b ARGX_VERSION_STATE} << 24))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_CHECK}({\b ARGX_VERSION_MAJOR},  {\b ARGX_VERSION_MINOR},  {\b ARGX_VERSION_PATCH},  {\b ARGX_VERSION_STATE})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_MAJOR}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_MINOR}\~ 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_PATCH}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_STATE}\~ "build"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARGX_VERSION_STD}\~ 20250721\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ARGX_DEV\:macros.hpp}
{\xe \v macros.hpp\:ARGX_DEV}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_DEV\~ false}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b macros.hpp}.}\par
}
{\xe \v ARGX_STRINGIFY\:macros.hpp}
{\xe \v macros.hpp\:ARGX_STRINGIFY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_STRINGIFY( x)}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\cf21 #x}\par
}
{
Definition at line {\b 35} of file {\b macros.hpp}.}\par
}
{\xe \v ARGX_TOSTRING\:macros.hpp}
{\xe \v macros.hpp\:ARGX_TOSTRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_TOSTRING( x)}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ARGX_STRINGIFY(x)\par
}
{
Definition at line {\b 36} of file {\b macros.hpp}.}\par
}
{\xe \v ARGX_VERSION\:macros.hpp}
{\xe \v macros.hpp\:ARGX_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION\~ (({\b ARGX_VERSION_MAJOR}<<16)|({\b ARGX_VERSION_MINOR}<<8)|({\b ARGX_VERSION_PATCH})|({\b ARGX_VERSION_STATE} << 24))}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 26} of file {\b macros.hpp}.}\par
}
{\xe \v ARGX_VERSION_CHECK\:macros.hpp}
{\xe \v macros.hpp\:ARGX_VERSION_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_CHECK( {\b ARGX_VERSION_MAJOR},  {\b ARGX_VERSION_MINOR},  {\b ARGX_VERSION_PATCH},  {\b ARGX_VERSION_STATE})}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     (((ARGX_VERSION_MAJOR)<<16)|((ARGX_VERSION_MINOR)<<8)|(ARGX_VERSION_PATCH)|((ARGX_VERSION_STATE) << 24))\par
}
{
Definition at line {\b 28} of file {\b macros.hpp}.}\par
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00028 {\cf21 #define ARGX_VERSION_CHECK(ARGX_VERSION_MAJOR, ARGX_VERSION_MINOR, ARGX_VERSION_PATCH, ARGX_VERSION_STATE) \\}\par
00029 {\cf21     (((ARGX_VERSION_MAJOR)<<16)|((ARGX_VERSION_MINOR)<<8)|(ARGX_VERSION_PATCH)|((ARGX_VERSION_STATE) << 24))}\par
}
}
{\xe \v ARGX_VERSION_MAJOR\:macros.hpp}
{\xe \v macros.hpp\:ARGX_VERSION_MAJOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_MAJOR\~ 1}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 9} of file {\b macros.hpp}.}\par
}
{\xe \v ARGX_VERSION_MINOR\:macros.hpp}
{\xe \v macros.hpp\:ARGX_VERSION_MINOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_MINOR\~ 1}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 10} of file {\b macros.hpp}.}\par
}
{\xe \v ARGX_VERSION_PATCH\:macros.hpp}
{\xe \v macros.hpp\:ARGX_VERSION_PATCH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_PATCH\~ 0}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 11} of file {\b macros.hpp}.}\par
}
{\xe \v ARGX_VERSION_STATE\:macros.hpp}
{\xe \v macros.hpp\:ARGX_VERSION_STATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_STATE\~ "build"}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b macros.hpp}.}\par
}
{\xe \v ARGX_VERSION_STD\:macros.hpp}
{\xe \v macros.hpp\:ARGX_VERSION_STD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARGX_VERSION_STD\~ 20250721}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b macros.hpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
macros.hpp\par \pard\plain 
{\tc\tcl2 \v inc/macros.hpp}
{\xe \v inc/macros.hpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf20 /*}\par
00004 {\cf20  * NOTE: }\par
00005 {\cf20  * Macro `ARGX_AS_PYTHON_PACKAGE` is for the Argx python module, DO NOT enable it if using C++}\par
00006 {\cf20  */}\par
00007 \par
00008 {\cf20 // Versioning}\par
00009 {\cf21 #define ARGX_VERSION_MAJOR            1}\par
00010 {\cf21 #define ARGX_VERSION_MINOR            1}\par
00011 {\cf21 #define ARGX_VERSION_PATCH            0}\par
00012 \par
00013 {\cf21 #define ARGX_VERSION_STD              20250721}\par
00014 \par
00015 {\cf20 // Version states:}\par
00016 {\cf20 // * dev                    0}\par
00017 {\cf20 // * beta                   1}\par
00018 {\cf20 // * snap                   2}\par
00019 {\cf20 // * build (AKA: Release)   3}\par
00020 {\cf21 #ifndef ARGX_AS_PYTHON_PACKAGE}\par
00021 {\cf21 #   define ARGX_VERSION_STATE           "build"}\par
00022 {\cf21 #else}\par
00023 {\cf21 #   define ARGX_VERSION_STATE           3}\par
00024 {\cf21 #endif}\par
00025 \par
00026 {\cf21 #define ARGX_VERSION                ((ARGX_VERSION_MAJOR<<16)|(ARGX_VERSION_MINOR<<8)|(ARGX_VERSION_PATCH)|(ARGX_VERSION_STATE << 24))}\par
00027 \par
00028 {\cf21 #define ARGX_VERSION_CHECK(ARGX_VERSION_MAJOR, ARGX_VERSION_MINOR, ARGX_VERSION_PATCH, ARGX_VERSION_STATE) \\}\par
00029 {\cf21     (((ARGX_VERSION_MAJOR)<<16)|((ARGX_VERSION_MINOR)<<8)|(ARGX_VERSION_PATCH)|((ARGX_VERSION_STATE) << 24))}\par
00030 \par
00031 {\cf20 // DEV or PROD}\par
00032 {\cf21 #define ARGX_DEV false}\par
00033 \par
00034 {\cf20 // Macro utils}\par
00035 {\cf21 #define ARGX_STRINGIFY(x) #x}\par
00036 {\cf21 #define ARGX_TOSTRING(x) ARGX_STRINGIFY(x)}\par
00037 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/types.hpp File Reference\par \pard\plain 
{\tc\tcl2 \v inc/types.hpp}
{\xe \v inc/types.hpp}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b argx::ARGXError}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b argx::ARGXOptions}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b argx::ARGXParam}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b argx}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct argx::ARGXError {\b argx::ARGXError}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct argx::ARGXOptions {\b argx::ARGXOptions}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct argx::ARGXParam {\b argx::ARGXParam}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b argx::ARGXStyle} \{ {\b argx::Professional}
, {\b argx::Simple}
 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
types.hpp\par \pard\plain 
{\tc\tcl2 \v inc/types.hpp}
{\xe \v inc/types.hpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf21 #if __cplusplus >= 201103L || defined(ARGX_AS_PYTHON_PACKAGE)}\par
00004 {\cf21 #include <string>}\par
00005 {\cf21 #include <vector>}\par
00006 \par
00007 {\cf17 namespace }argx\par
00008 \{\par
00009     {\cf17 enum class} ARGXStyle\par
00010     \{\par
00011         Professional,\par
00012         Simple,\par
00013     \};\par
00014 \par
00015     {\cf17 typedef} {\cf17 struct }ARGXError\par
00016     \{\par
00017         std::string type;\par
00018         std::string error;\par
00019         std::string help;\par
00020 \par
00021         {\cf18 int} code;\par
00022     \} ARGXError;\par
00023 \par
00024     {\cf17 typedef} {\cf17 struct }ARGXOptions\par
00025     \{{\cf20 }\par
00026 {\cf20         /** ID (id)}\par
00027 {\cf20          * @brief ID of the option}\par
00028 {\cf20          */}\par
00029         std::string id;\par
00030 {\cf20 }\par
00031 {\cf20         /** Param (param):}\par
00032 {\cf20          * @brief EXAMPLE:}\par
00033 {\cf20          * --help, --version}\par
00034 {\cf20          */}\par
00035         std::string param;\par
00036 {\cf20 }\par
00037 {\cf20         /** Short Param (sparam):}\par
00038 {\cf20          * @brief}\par
00039 {\cf20          */}\par
00040         std::string sparam;\par
00041         std::string info;\par
00042 \par
00043         {\cf18 bool} hasSubParams = {\cf17 false};\par
00044         {\cf18 bool} hasAnySubParams = {\cf17 false};\par
00045 \par
00046         std::vector<ARGXOptions> subParams;\par
00047     \} ARGXOptions;\par
00048 \par
00049     {\cf17 typedef} {\cf17 struct }ARGXParam\par
00050     \{\par
00051         {\cf18 bool} exists = {\cf17 false};\par
00052         std::vector<bool> subExists;\par
00053     \} ARGXParam;\par
00054 \}\par
00055 \par
00056 {\cf21 #else}\par
00057 {\cf21 #   error "Must compile with C++11 support or newer"}\par
00058 {\cf21 #   pragma message("Current standard is " ARGX_TOSTRING(__cplusplus))}\par
00059 {\cf21 #endif}\par
00060 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md File Reference\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Argx.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/Argx.cpp}
{\xe \v src/Argx.cpp}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <codecvt>}\par
{\f2 #include <locale>}\par
{\f2 #include <algorithm>}\par
{\f2 #include "../inc/Argx.hpp"}\par
{\f2 #include "../inc/types.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b argx}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Argx.cpp\par \pard\plain 
{\tc\tcl2 \v src/Argx.cpp}
{\xe \v src/Argx.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* src/argx.cpp}\par
00002 {\cf20  * Owned and created by: pcannon09}\par
00003 {\cf20  */}\par
00004 \par
00005 {\cf21 #include <string>}\par
00006 {\cf21 #include <codecvt>}\par
00007 {\cf21 #include <locale>}\par
00008 {\cf21 #include <algorithm>}\par
00009 \par
00010 {\cf21 #include "../inc/Argx.hpp"}\par
00011 {\cf21 #include "../inc/types.hpp"}\par
00012 \par
00013 {\cf17 namespace }argx\par
00014 \{\par
00015     {\cf20 // PRIVATE}\par
00016     std::vector<ARGXOptions> Argx::options;\par
00017     std::vector<std::string> *Argx::mainArgs = {\cf17 nullptr};\par
00018 \par
00019     {\cf18 unsigned} {\cf18 int} Argx::mainArgc;\par
00020 \par
00021     {\cf20 // PUBLIC:}\par
00022 {\cf21 #if defined(ARGX_AS_PYTHON_PACKAGE)}\par
00023     Argx::Argx({\cf17 const} std::string &{\cf18 id}, {\cf17 const} std::vector<std::string> &args)\par
00024         : id(id)\par
00025     \{\par
00026         this->mainArgs = {\cf17 new} std::vector<std::string>(args);\par
00027         this->mainArgc = args.size();\par
00028     \}\par
00029 \par
00030     {\cf18 void} Argx::destroy()\par
00031     \{ this->~Argx(); \}\par
00032 \par
00033 {\cf21 #else}\par
00034     Argx::Argx({\cf17 const} std::string &{\cf18 id}, {\cf18 int} argc, {\cf18 char} *argv[])\par
00035         : id(id)\par
00036     \{\par
00037         this->mainArgs = {\cf17 new} std::vector<std::string>(argv, argv + argc);\par
00038         this->mainArgc = argc;\par
00039     \}\par
00040 {\cf21 #endif}\par
00041 \par
00042     Argx::Argx()\par
00043     \{ \}\par
00044 \par
00045     Argx::~Argx()\par
00046     \{\par
00047         {\cf17 delete} this->mainArgs; this->mainArgs = {\cf17 nullptr};\par
00048     \}\par
00049 \par
00050     {\cf18 int} Argx::getArgPos({\cf17 const} std::string &arg)\par
00051     \{\par
00052         {\cf19 if} (!this->mainArgs)\par
00053             {\cf19 return} -1;\par
00054 \par
00055         {\cf19 for} ({\cf18 size_t} i = 0; i < this->mainArgs->size(); ++i)\par
00056         \{\par
00057             {\cf19 if} (this->mainArgs->at(i) == arg)\par
00058                 {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(i);\par
00059         \}\par
00060 \par
00061         {\cf19 return} -1;\par
00062     \}\par
00063 \par
00064     {\cf18 void} Argx::add(ARGXOptions option){\cf17  const}\par
00065 {\cf17     }\{\par
00066         ARGXError error;\par
00067         error.type = {\cf22 "success"};\par
00068         error.code = 0;\par
00069 \par
00070         this->options.emplace_back(option);\par
00071     \}\par
00072 \par
00073     {\cf18 int} Argx::findParam({\cf17 const} std::string &{\cf18 id})\par
00074     \{\par
00075         {\cf20 // First check if it's a main parameter}\par
00076         {\cf19 for} ({\cf18 size_t} i = 0; i < this->options.size(); i++)\par
00077         \{\par
00078             {\cf19 if} (this->options[i].{\cf18 id} == {\cf18 id})\par
00079             \{\par
00080                 {\cf20 // Check if this main parameter exists in arguments}\par
00081                 {\cf19 for} ({\cf17 const} std::string &arg : *this->mainArgs)\par
00082                 \{\par
00083                     {\cf19 if} (arg == this->options[i].param || arg == this->options[i].sparam)\par
00084                     \{\par
00085                         {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(i);\par
00086                     \}\par
00087                 \}\par
00088             \}\par
00089         \}\par
00090 \par
00091         {\cf20 // Then look for sub-parameters}\par
00092         {\cf19 for} ({\cf17 const} {\cf17 auto} &opt : this->options)\par
00093         \{\par
00094             {\cf20 // Check if the parent option exists in the arguments}\par
00095             {\cf18 bool} parentExists = {\cf17 false};\par
00096 \par
00097             {\cf19 for} ({\cf17 const} std::string &arg : *this->mainArgs)\par
00098             \{\par
00099                 {\cf19 if} (arg == opt.param || arg == opt.sparam)\par
00100                 \{\par
00101                     parentExists = {\cf17 true};\par
00102                     {\cf19 break};\par
00103                 \}\par
00104             \}\par
00105 \par
00106             {\cf19 if} (parentExists)\par
00107             \{\par
00108                 {\cf20 // Find the index of the requested sub-parameter}\par
00109                 {\cf19 for} ({\cf18 size_t} i = 0; i < opt.subParams.size(); i++)\par
00110                 \{\par
00111                     {\cf19 if} (opt.subParams[i].id == {\cf18 id}) {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(i);\par
00112                 \}\par
00113             \}\par
00114         \}\par
00115 \par
00116         {\cf19 return} -1; {\cf20 // Not found}\par
00117     \}\par
00118 \par
00119     {\cf18 bool} Argx::paramExists({\cf17 const} std::string &{\cf18 id})\par
00120     \{\par
00121         {\cf19 if} (this->findParam({\cf18 id}) >= 0) {\cf19 return} {\cf17 true};;\par
00122 \par
00123         {\cf19 return} {\cf17 false};\par
00124     \}\par
00125 \par
00126 \par
00127     \par
00128     ARGXParam Argx::getParam({\cf17 const} std::string &{\cf18 id})\par
00129     \{\par
00130         {\cf19 if} (this->mainArgc <= 1) {\cf19 return} \{\};\par
00131 \par
00132         ARGXParam result;\par
00133 \par
00134         {\cf20 // First, check if this is a top-level option}\par
00135         {\cf19 for} ({\cf17 const} {\cf17 auto} &opt : this->options)\par
00136         \{\par
00137             {\cf19 if} (opt.id == {\cf18 id})\par
00138             \{\par
00139                 {\cf20 // Find the position of the main option in arguments}\par
00140                 {\cf18 int} mainOptionPos = -1;\par
00141 \par
00142                 {\cf19 for} ({\cf18 size_t} i = 0; i < this->mainArgs->size(); ++i)\par
00143                 \{\par
00144                     {\cf19 if} ((*this->mainArgs)[i] == opt.param || (*this->mainArgs)[i] == opt.sparam)\par
00145                     \{\par
00146                         result.exists = {\cf17 true};\par
00147                         mainOptionPos = i;\par
00148                         {\cf19 break};\par
00149                     \}\par
00150                 \}\par
00151 \par
00152                 {\cf19 if} (result.exists)\par
00153                 \{\par
00154                     {\cf19 if} (opt.hasSubParams || opt.hasAnySubParams)\par
00155                     \{\par
00156                         {\cf20 // Check each sub-parameter}\par
00157                         {\cf19 for} ({\cf17 const} {\cf17 auto} &sub : opt.subParams)\par
00158                         \{\par
00159                             {\cf18 bool} subMatched = {\cf17 false};\par
00160 \par
00161                             {\cf20 // Look for sub-parameters after the main option}\par
00162                             {\cf19 for} ({\cf18 size_t} i = mainOptionPos + 1; i < this->mainArgs->size(); ++i)\par
00163                             \{\par
00164                                 {\cf19 if} ((*this->mainArgs)[i] == sub.param || (*this->mainArgs)[i] == sub.sparam)\par
00165                                 \{\par
00166                                     subMatched = {\cf17 true};\par
00167                                     {\cf19 break};\par
00168                                 \}\par
00169                             \}\par
00170 \par
00171                             result.subExists.push_back(subMatched);\par
00172                         \}\par
00173                     \}\par
00174 \par
00175                     {\cf19 return} result;\par
00176                 \}\par
00177             \}\par
00178         \}\par
00179 \par
00180         {\cf20 // If not found as top-level, check if it's a sub-parameter}\par
00181         {\cf19 for} ({\cf17 const} {\cf17 auto} &opt : this->options)\par
00182         \{\par
00183             {\cf20 // Find if the parent option exists and get its position}\par
00184             {\cf18 size_t} parentPos = -1;\par
00185 \par
00186             {\cf19 for} ({\cf18 size_t} i = 0; i < this->mainArgs->size(); ++i)\par
00187             \{\par
00188                 {\cf19 if} ((*this->mainArgs)[i] == opt.param || (*this->mainArgs)[i] == opt.sparam)\par
00189                 \{\par
00190                     parentPos = i;\par
00191                     {\cf19 break};\par
00192                 \}\par
00193             \}\par
00194 \par
00195             {\cf19 if} (parentPos > -1 && (opt.hasSubParams || opt.hasAnySubParams))\par
00196             \{\par
00197                 {\cf20 // Check if the requested sub-parameter exists after the parent}\par
00198                 {\cf19 for} ({\cf17 const} {\cf17 auto} &sub : opt.subParams)\par
00199                 \{\par
00200                     {\cf19 if} (sub.id == {\cf18 id})\par
00201                     \{\par
00202                         {\cf19 for} ({\cf18 size_t} i = parentPos + 1; i < this->mainArgs->size(); ++i)\par
00203                         \{\par
00204                             {\cf19 if} ((*this->mainArgs)[i] == sub.param || (*this->mainArgs)[i] == sub.sparam)\par
00205                             \{\par
00206                                 result.exists = {\cf17 true};\par
00207                                 {\cf19 break};\par
00208                             \}\par
00209                         \}\par
00210 \par
00211                         {\cf19 if} (!result.exists && parentPos + 1 < this->mainArgs->size())\par
00212                         \{\par
00213                             std::string nextArg = (*this->mainArgs)[parentPos + 1];\par
00214 \par
00215                             {\cf19 if} (nextArg == sub.param || nextArg == sub.sparam) result.exists = {\cf17 true};\par
00216                         \}\par
00217 \par
00218                         {\cf20 // Handle any sub-sub-parameters if they exist}\par
00219                         {\cf19 if} (result.exists && (sub.hasSubParams || sub.hasAnySubParams))\par
00220                         \{\par
00221                             {\cf19 for} ({\cf17 const} {\cf17 auto} &subsub : sub.subParams)\par
00222                             \{\par
00223                                 {\cf18 bool} subsubMatched = {\cf17 false};\par
00224 \par
00225                                 {\cf19 for} ({\cf18 size_t} i = 0; i < this->mainArgs->size(); ++i)\par
00226                                 \{\par
00227                                     {\cf19 if} ((*this->mainArgs)[i] == subsub.param || (*this->mainArgs)[i] == subsub.sparam)\par
00228                                     \{\par
00229                                         subsubMatched = {\cf17 true};\par
00230                                         {\cf19 break};\par
00231                                     \}\par
00232                                 \}\par
00233 \par
00234                                 result.subExists.push_back(subsubMatched);\par
00235                             \}\par
00236                         \}\par
00237 \par
00238                         {\cf19 return} result;\par
00239                     \}\par
00240                 \}\par
00241             \}\par
00242         \}\par
00243 \par
00244         {\cf19 return} result;\par
00245     \}\par
00246 \par
00247     {\cf18 bool} Argx::getSubParam({\cf17 const} argx::ARGXParam &param, {\cf17 const} std::string &{\cf18 id})\par
00248     \{ {\cf19 return} this->paramExists({\cf18 id}) && param.subExists[this->findParam({\cf18 id})]; \}\par
00249 \par
00250     std::string Argx::createDocs(ARGXStyle style, {\cf17 const} std::string &title, {\cf17 const} std::string &mainInfo)\par
00251     \{\par
00252         std::string contentStr;\par
00253 \par
00254         {\cf19 if} (style == ARGXStyle::Professional)\par
00255         \{\par
00256             {\cf19 for} ({\cf17 const} {\cf17 auto} &x : this->options)\par
00257             \{\par
00258                 {\cf20 // Main option header line}\par
00259                 contentStr += {\cf22 "ID: "} + x.id + {\cf22 "\\n"};\par
00260                 contentStr += {\cf22 "[ "} + x.sparam + {\cf22 " | "} + x.param;\par
00261 \par
00262                 {\cf19 if} (x.hasSubParams && !x.subParams.empty())\par
00263                 \{\par
00264                     contentStr += {\cf22 " [ "};\par
00265 \par
00266                     {\cf19 for} ({\cf18 size_t} i = 0; i < x.subParams.size(); ++i)\par
00267                     \{\par
00268                         {\cf17 const} {\cf17 auto} &sub = x.subParams[i];\par
00269 \par
00270                         contentStr += sub.param;\par
00271 \par
00272                         {\cf19 if} (i < x.subParams.size() - 1) contentStr += {\cf22 " | "};\par
00273                         {\cf19 else} {\cf19 if} (i <= x.subParams.size()) contentStr += {\cf23 ' '};\par
00274                     \}\par
00275 \par
00276                     contentStr += {\cf22 "] ] "};\par
00277                 \}\par
00278 \par
00279                 {\cf19 else} contentStr += {\cf22 " ] "};\par
00280 \par
00281                 contentStr += x.info + {\cf22 "\\n"};\par
00282 \par
00283                 {\cf20 // Print all sub-options with sparam and param, aligned with ideographic spaces if there are}\par
00284                 {\cf19 if} (x.hasSubParams && !x.subParams.empty())\par
00285                 \{\par
00286                     {\cf19 for} ({\cf17 const} {\cf17 auto} &sub : x.subParams)\par
00287                     \{\par
00288                         {\cf20 // Create ideographic spaces matching the length of main param for alignment}\par
00289                         std::wstring wideSpaces(x.param.size(), L{\cf22 '\\u3000'});\par
00290                         std::wstring_convert<std::codecvt_utf8<wchar_t>> converter;\par
00291                         std::string spacing = converter.to_bytes(wideSpaces);\par
00292 \par
00293                         contentStr += spacing + {\cf22 "  [ "} + sub.sparam + {\cf22 " | "} + sub.param + {\cf22 " ] "} + sub.info + {\cf22 "\\n"};\par
00294                     \}\par
00295                 \}\par
00296             \}\par
00297         \}\par
00298 \par
00299         {\cf19 else} {\cf19 if} (style == ARGXStyle::Simple)\par
00300         \{\par
00301             {\cf19 for} ({\cf17 const} {\cf17 auto} &x : this->options)\par
00302             \{\par
00303                 contentStr += x.sparam + {\cf22 ", "} + x.param + {\cf22 " - "} + x.info + {\cf22 "\\n"};\par
00304 \par
00305                 {\cf19 if} (x.hasSubParams && !x.subParams.empty())\par
00306                 \{\par
00307                     {\cf19 for} ({\cf17 const} {\cf17 auto} &sub : x.subParams)\par
00308                     \{\par
00309                         contentStr += {\cf22 "  "} + sub.sparam + {\cf22 ", "} + sub.param + {\cf22 " - "} + sub.info + {\cf22 "\\n"};\par
00310                     \}\par
00311                 \}\par
00312             \}\par
00313         \} {\cf20 // ARGXStyle}\par
00314 \par
00315         {\cf19 return} title + {\cf22 "\\n"} + mainInfo + {\cf22 "\\n"} + contentStr;\par
00316     \}\par
00317 \par
00318     \par
00319     {\cf18 bool} Argx::compareArgs(std::vector<ARGXOptions> options, std::vector<std::string> argv)\par
00320     \{\par
00321         {\cf19 for} ({\cf18 size_t} i = 1; i < argv.size(); ++i)\par
00322         \{\par
00323             {\cf17 const} std::string &arg = argv[i];\par
00324 \par
00325             {\cf18 bool} found = {\cf17 false};\par
00326             {\cf18 bool} hasSubParams = {\cf17 false};\par
00327             {\cf18 bool} hasAnySubParams = {\cf17 false};\par
00328 \par
00329             ARGXOptions matchedOption;\par
00330 \par
00331             {\cf20 // Find the matching option}\par
00332             {\cf19 for} ({\cf17 const} {\cf17 auto} &option : options)\par
00333             \{\par
00334                 {\cf19 if} (option.sparam == arg || option.param == arg)\par
00335                 \{\par
00336                     found = {\cf17 true};\par
00337                     hasSubParams = option.hasSubParams;\par
00338                     hasAnySubParams = option.hasAnySubParams;\par
00339                     matchedOption = option;\par
00340 \par
00341                     {\cf19 break};\par
00342                 \}\par
00343             \}\par
00344 \par
00345             {\cf19 if} (!found) {\cf19 return} {\cf17 false};\par
00346 \par
00347             {\cf19 if} (hasSubParams || hasAnySubParams)\par
00348             \{\par
00349                 {\cf20 // Check if there's a next argument}\par
00350                 {\cf19 if} (i + 1 < argv.size())\par
00351                 \{\par
00352                     {\cf17 const} std::string &nextArg = argv[i + 1];\par
00353 \par
00354                     {\cf20 // Check if next argument is a sub-parameter}\par
00355                     {\cf18 bool} isSubParam = {\cf17 false};\par
00356 \par
00357                     {\cf19 if} (!nextArg.empty() && nextArg[0] != {\cf23 '-'})\par
00358                     \{\par
00359                         {\cf20 // Validate if it's a valid sub-parameter}\par
00360                         {\cf19 for} ({\cf17 const} {\cf17 auto} &subOption : matchedOption.subParams)\par
00361                         \{\par
00362                             {\cf19 if} (subOption.param == nextArg || subOption.sparam == nextArg)\par
00363                             \{\par
00364                                 isSubParam = {\cf17 true};\par
00365 \par
00366                                 {\cf19 break};\par
00367                             \}\par
00368                         \}\par
00369 \par
00370                         {\cf19 if} (isSubParam) ++i; {\cf20 // Get the sub-parameter}\par
00371                         {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams) {\cf19 return} {\cf17 false};\par
00372                     \}\par
00373 \par
00374                     {\cf19 else} {\cf19 if} (hasSubParams || hasAnySubParams) {\cf19 return} {\cf17 false};\par
00375                 \}\par
00376             \}\par
00377         \}\par
00378 \par
00379         {\cf19 return} {\cf17 true};\par
00380     \}\par
00381 \par
00382     std::vector<std::string> Argx::getMainArgs(){\cf17  const}\par
00383 {\cf17     }\{ {\cf19 return} *this->mainArgs; \}\par
00384 \par
00385     {\cf18 int} Argx::getArgc(){\cf17  const}\par
00386 {\cf17     }\{ {\cf19 return} this->mainArgc; \}\par
00387 \par
00388     std::vector<ARGXOptions> Argx::getOptions(){\cf17  const}\par
00389 {\cf17     }\{ {\cf19 return} this->options; \}\par
00390 \par
00391     std::string Argx::getID(){\cf17  const}\par
00392 {\cf17     }\{ {\cf19 return} this->id; \}\par
00393 \}\par
00394 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/ARGXAddError.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/ARGXAddError.cpp}
{\xe \v src/ARGXAddError.cpp}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <utility>}\par
{\f2 #include <string>}\par
{\f2 #include "../inc/ARGXAddError.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b argx}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ARGXAddError.cpp\par \pard\plain 
{\tc\tcl2 \v src/ARGXAddError.cpp}
{\xe \v src/ARGXAddError.cpp}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include <utility>}\par
00002 {\cf21 #include <string>}\par
00003 \par
00004 {\cf21 #include "../inc/ARGXAddError.hpp"}\par
00005 \par
00006 {\cf17 namespace }argx\par
00007 \{\par
00008     ARGXAddError::ARGXAddError({\cf17 const} std::string &msg, {\cf17 const} std::string &help)\par
00009         : msg(msg), help(help)\par
00010     \{ \}\par
00011 \par
00012     std::pair<{\cf17 const} {\cf18 char}* {\cf20 /*Error*/}, {\cf17 const} {\cf18 char}* {\cf20 /*Help*/}> ARGXAddError::what() const noexcept\par
00013     \{ {\cf19 return} \{ this->msg.c_str(), this->help.c_str() \}; \}\par
00014 \}\par
00015 \par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
