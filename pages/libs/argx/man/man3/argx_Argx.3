.TH "argx::Argx" 3 "Version 1.1.0-build" "Argx" \" -*- nroff -*-
.ad l
.nh
.SH NAME
argx::Argx
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Argx\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBArgx\fP ()"
.br
.ti -1c
.RI "\fBArgx\fP (const std::string &\fBid\fP, int argc, char *argv[])"
.br
.RI "Create \fBArgx\fP with the specific \fRid\fP, \fRargc\fP and \fRargv\fP "
.ti -1c
.RI "\fB~Argx\fP ()"
.br
.ti -1c
.RI "void \fBadd\fP (\fBARGXOptions\fP option) const"
.br
.RI "Add param options\&. "
.ti -1c
.RI "bool \fBcompareArgs\fP (std::vector< \fBARGXOptions\fP > \fBoptions\fP, std::vector< std::string > argv)"
.br
.RI "Compare if \fRoptions\fP contains the required \fRid\fP, if the ID does not exist, return false\&. "
.ti -1c
.RI "std::string \fBcreateDocs\fP (\fBARGXStyle\fP style, const std::string &title, const std::string &mainInfo)"
.br
.RI "Create documentation for the parameters with the specific style, title and main information\&. "
.ti -1c
.RI "int \fBfindParam\fP (const std::string &\fBid\fP)"
.br
.RI "Find parameter index\&. "
.ti -1c
.RI "int \fBgetArgc\fP () const"
.br
.RI "Get the main options from the \fRmain()\fP function as argc\&. "
.ti -1c
.RI "int \fBgetArgPos\fP (const std::string &arg)"
.br
.RI "Get argument position with specified \fRarg\fP "
.ti -1c
.RI "std::string \fBgetID\fP () const"
.br
.RI "Get \fBArgx\fP ID\&. "
.ti -1c
.RI "std::vector< std::string > \fBgetMainArgs\fP () const"
.br
.RI "Get main arguments from \fRmain()\fP function \fRargv\fP "
.ti -1c
.RI "std::vector< \fBARGXOptions\fP > \fBgetOptions\fP () const"
.br
.RI "Get main set options as \fBARGXOptions\fP\&. "
.ti -1c
.RI "\fBARGXParam\fP \fBgetParam\fP (const std::string &\fBid\fP)"
.br
.RI "Get the param from \fRid\fP "
.ti -1c
.RI "bool \fBgetSubParam\fP (const \fBargx::ARGXParam\fP &param, const std::string &\fBid\fP)"
.br
.RI "Get the sub-param from \fRid\fP "
.ti -1c
.RI "bool \fBparamExists\fP (const std::string &\fBid\fP)"
.br
.RI "Get if param exists in the param options\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::string \fBid\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static unsigned int \fBmainArgc\fP"
.br
.ti -1c
.RI "static std::vector< std::string > * \fBmainArgs\fP = nullptr"
.br
.ti -1c
.RI "static std::vector< \fBARGXOptions\fP > \fBoptions\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB17\fP of file \fBArgx\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "argx::Argx::Argx (const std::string & id, int argc, char * argv[])"

.PP
Create \fBArgx\fP with the specific \fRid\fP, \fRargc\fP and \fRargv\fP 
.PP
\fBParameters\fP
.RS 4
\fIid\fP Set the ID of the \fBArgx\fP 
.br
\fIargc\fP Set the \fRargc\fP of the \fRmain()\fP function 
.br
\fIargv\fP Set the \fRargv\fP of the \fRmain()\fP function 
.RE
.PP

.PP
Definition at line \fB34\fP of file \fBArgx\&.cpp\fP\&.
.nf
35         : id(id)
36     {
37         this\->mainArgs = new std::vector<std::string>(argv, argv + argc);
38         this\->mainArgc = argc;
39     }
.PP
.fi

.PP
References \fBArgx()\fP, \fBid\fP, \fBmainArgc\fP, and \fBmainArgs\fP\&.
.PP
Referenced by \fBArgx()\fP\&.
.SS "argx::Argx::Argx ()"

.PP
Definition at line \fB42\fP of file \fBArgx\&.cpp\fP\&.
.nf
43     { }
.PP
.fi

.SS "argx::Argx::~Argx ()"

.PP
Definition at line \fB45\fP of file \fBArgx\&.cpp\fP\&.
.nf
46     {
47         delete this\->mainArgs; this\->mainArgs = nullptr;
48     }
.PP
.fi

.PP
References \fBmainArgs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void argx::Argx::add (\fBARGXOptions\fP option) const"

.PP
Add param options\&. 
.PP
\fBParameters\fP
.RS 4
\fIoption\fP Add the option to the main params 
.RE
.PP

.PP
Definition at line \fB64\fP of file \fBArgx\&.cpp\fP\&.
.nf
65     {
66         ARGXError error;
67         error\&.type = "success";
68         error\&.code = 0;
69 
70         this\->options\&.emplace_back(option);
71     }
.PP
.fi

.PP
References \fBargx::ARGXError::code\fP, \fBoptions\fP, and \fBargx::ARGXError::type\fP\&.
.SS "bool argx::Argx::compareArgs (std::vector< \fBARGXOptions\fP > options, std::vector< std::string > argv)"

.PP
Compare if \fRoptions\fP contains the required \fRid\fP, if the ID does not exist, return false\&. 
.PP
\fBParameters\fP
.RS 4
\fIoptions\fP Return \fBARGXOptions\fP vector 
.br
\fIid\fP ID to find 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB319\fP of file \fBArgx\&.cpp\fP\&.
.nf
320     {
321         for (size_t i = 1; i < argv\&.size(); ++i)
322         {
323             const std::string &arg = argv[i];
324 
325             bool found = false;
326             bool hasSubParams = false;
327             bool hasAnySubParams = false;
328 
329             ARGXOptions matchedOption;
330 
331             // Find the matching option
332             for (const auto &option : options)
333             {
334                 if (option\&.sparam == arg || option\&.param == arg)
335                 {
336                     found = true;
337                     hasSubParams = option\&.hasSubParams;
338                     hasAnySubParams = option\&.hasAnySubParams;
339                     matchedOption = option;
340 
341                     break;
342                 }
343             }
344 
345             if (!found) return false;
346 
347             if (hasSubParams || hasAnySubParams)
348             {
349                 // Check if there's a next argument
350                 if (i + 1 < argv\&.size())
351                 {
352                     const std::string &nextArg = argv[i + 1];
353 
354                     // Check if next argument is a sub\-parameter
355                     bool isSubParam = false;
356 
357                     if (!nextArg\&.empty() && nextArg[0] != '\-')
358                     {
359                         // Validate if it's a valid sub\-parameter
360                         for (const auto &subOption : matchedOption\&.subParams)
361                         {
362                             if (subOption\&.param == nextArg || subOption\&.sparam == nextArg)
363                             {
364                                 isSubParam = true;
365 
366                                 break;
367                             }
368                         }
369 
370                         if (isSubParam) ++i; // Get the sub\-parameter
371                         else if (hasSubParams || hasAnySubParams) return false;
372                     }
373 
374                     else if (hasSubParams || hasAnySubParams) return false;
375                 }
376             }
377         }
378 
379         return true;
380     }
.PP
.fi

.PP
References \fBoptions\fP, and \fBargx::ARGXOptions::subParams\fP\&.
.SS "std::string argx::Argx::createDocs (\fBARGXStyle\fP style, const std::string & title, const std::string & mainInfo)"

.PP
Create documentation for the parameters with the specific style, title and main information\&. 
.PP
\fBParameters\fP
.RS 4
\fIstyle\fP Set the style using \fBARGXStyle\fP 
.br
\fItitle\fP Title for docs 
.br
\fIMain\fP information 
.RE
.PP
\fBReturns\fP
.RS 4
std::string Documentation as a string 
.RE
.PP

.PP
Definition at line \fB250\fP of file \fBArgx\&.cpp\fP\&.
.nf
251     {
252         std::string contentStr;
253 
254         if (style == ARGXStyle::Professional)
255         {
256             for (const auto &x : this\->options)
257             {
258                 // Main option header line
259                 contentStr += "ID: " + x\&.id + "\\n";
260                 contentStr += "[ " + x\&.sparam + " | " + x\&.param;
261 
262                 if (x\&.hasSubParams && !x\&.subParams\&.empty())
263                 {
264                     contentStr += " [ ";
265 
266                     for (size_t i = 0; i < x\&.subParams\&.size(); ++i)
267                     {
268                         const auto &sub = x\&.subParams[i];
269 
270                         contentStr += sub\&.param;
271 
272                         if (i < x\&.subParams\&.size() \- 1) contentStr += " | ";
273                         else if (i <= x\&.subParams\&.size()) contentStr += ' ';
274                     }
275 
276                     contentStr += "] ] ";
277                 }
278 
279                 else contentStr += " ] ";
280 
281                 contentStr += x\&.info + "\\n";
282 
283                 // Print all sub\-options with sparam and param, aligned with ideographic spaces if there are
284                 if (x\&.hasSubParams && !x\&.subParams\&.empty())
285                 {
286                     for (const auto &sub : x\&.subParams)
287                     {
288                         // Create ideographic spaces matching the length of main param for alignment
289                         std::wstring wideSpaces(x\&.param\&.size(), L'\\u3000');
290                         std::wstring_convert<std::codecvt_utf8<wchar_t>> converter;
291                         std::string spacing = converter\&.to_bytes(wideSpaces);
292 
293                         contentStr += spacing + "  [ " + sub\&.sparam + " | " + sub\&.param + " ] " + sub\&.info + "\\n";
294                     }
295                 }
296             }
297         }
298 
299         else if (style == ARGXStyle::Simple)
300         {
301             for (const auto &x : this\->options)
302             {
303                 contentStr += x\&.sparam + ", " + x\&.param + " \- " + x\&.info + "\\n";
304 
305                 if (x\&.hasSubParams && !x\&.subParams\&.empty())
306                 {
307                     for (const auto &sub : x\&.subParams)
308                     {
309                         contentStr += "  " + sub\&.sparam + ", " + sub\&.param + " \- " + sub\&.info + "\\n";
310                     }
311                 }
312             }
313         } // ARGXStyle
314 
315         return title + "\\n" + mainInfo + "\\n" + contentStr;
316     }
.PP
.fi

.PP
References \fBoptions\fP, \fBargx::Professional\fP, and \fBargx::Simple\fP\&.
.SS "int argx::Argx::findParam (const std::string & id)"

.PP
Find parameter index\&. 
.PP
Definition at line \fB73\fP of file \fBArgx\&.cpp\fP\&.
.nf
74     {
75         // First check if it's a main parameter
76         for (size_t i = 0; i < this\->options\&.size(); i++)
77         {
78             if (this\->options[i]\&.id == id)
79             {
80                 // Check if this main parameter exists in arguments
81                 for (const std::string &arg : *this\->mainArgs)
82                 {
83                     if (arg == this\->options[i]\&.param || arg == this\->options[i]\&.sparam)
84                     {
85                         return static_cast<int>(i);
86                     }
87                 }
88             }
89         }
90 
91         // Then look for sub\-parameters
92         for (const auto &opt : this\->options)
93         {
94             // Check if the parent option exists in the arguments
95             bool parentExists = false;
96 
97             for (const std::string &arg : *this\->mainArgs)
98             {
99                 if (arg == opt\&.param || arg == opt\&.sparam)
100                 {
101                     parentExists = true;
102                     break;
103                 }
104             }
105 
106             if (parentExists)
107             {
108                 // Find the index of the requested sub\-parameter
109                 for (size_t i = 0; i < opt\&.subParams\&.size(); i++)
110                 {
111                     if (opt\&.subParams[i]\&.id == id) return static_cast<int>(i);
112                 }
113             }
114         }
115 
116         return \-1; // Not found
117     }
.PP
.fi

.PP
References \fBmainArgs\fP, and \fBoptions\fP\&.
.PP
Referenced by \fBgetSubParam()\fP, and \fBparamExists()\fP\&.
.SS "int argx::Argx::getArgc () const"

.PP
Get the main options from the \fRmain()\fP function as argc\&. 
.PP
\fBReturns\fP
.RS 4
int Number of params including the executable param 
.RE
.PP

.PP
Definition at line \fB385\fP of file \fBArgx\&.cpp\fP\&.
.nf
386     { return this\->mainArgc; }
.PP
.fi

.PP
References \fBmainArgc\fP\&.
.SS "int argx::Argx::getArgPos (const std::string & arg)"

.PP
Get argument position with specified \fRarg\fP 
.PP
\fBParameters\fP
.RS 4
\fIarg\fP Find argument 
.RE
.PP
\fBReturns\fP
.RS 4
int Return position of found \fRarg\fP from the options 
.RE
.PP

.PP
Definition at line \fB50\fP of file \fBArgx\&.cpp\fP\&.
.nf
51     {
52         if (!this\->mainArgs)
53             return \-1;
54 
55         for (size_t i = 0; i < this\->mainArgs\->size(); ++i)
56         {
57             if (this\->mainArgs\->at(i) == arg)
58                 return static_cast<int>(i);
59         }
60 
61         return \-1;
62     }
.PP
.fi

.PP
References \fBmainArgs\fP\&.
.SS "std::string argx::Argx::getID () const"

.PP
Get \fBArgx\fP ID\&. 
.PP
\fBReturns\fP
.RS 4
std::string \fBArgx\fP ID 
.RE
.PP

.PP
Definition at line \fB391\fP of file \fBArgx\&.cpp\fP\&.
.nf
392     { return this\->id; }
.PP
.fi

.SS "std::vector< std::string > argx::Argx::getMainArgs () const"

.PP
Get main arguments from \fRmain()\fP function \fRargv\fP 
.PP
\fBReturns\fP
.RS 4
std::vector<std::string> Vector of strings for main arguments from \fRargv\fP 
.RE
.PP

.PP
Definition at line \fB382\fP of file \fBArgx\&.cpp\fP\&.
.nf
383     { return *this\->mainArgs; }
.PP
.fi

.PP
References \fBmainArgs\fP\&.
.SS "std::vector< \fBARGXOptions\fP > argx::Argx::getOptions () const"

.PP
Get main set options as \fBARGXOptions\fP\&. 
.PP
\fBReturns\fP
.RS 4
std::vector<ARGXOptions> Options to return 
.RE
.PP

.PP
Definition at line \fB388\fP of file \fBArgx\&.cpp\fP\&.
.nf
389     { return this\->options; }
.PP
.fi

.PP
References \fBoptions\fP\&.
.SS "\fBARGXParam\fP argx::Argx::getParam (const std::string & id)"

.PP
Get the param from \fRid\fP 
.PP
\fBParameters\fP
.RS 4
\fIid\fP The ID to get 
.RE
.PP
\fBReturns\fP
.RS 4
\fBARGXParam\fP Returnted parameter to get 
.RE
.PP

.PP
Definition at line \fB128\fP of file \fBArgx\&.cpp\fP\&.
.nf
129     {
130         if (this\->mainArgc <= 1) return {};
131 
132         ARGXParam result;
133 
134         // First, check if this is a top\-level option
135         for (const auto &opt : this\->options)
136         {
137             if (opt\&.id == id)
138             {
139                 // Find the position of the main option in arguments
140                 int mainOptionPos = \-1;
141 
142                 for (size_t i = 0; i < this\->mainArgs\->size(); ++i)
143                 {
144                     if ((*this\->mainArgs)[i] == opt\&.param || (*this\->mainArgs)[i] == opt\&.sparam)
145                     {
146                         result\&.exists = true;
147                         mainOptionPos = i;
148                         break;
149                     }
150                 }
151 
152                 if (result\&.exists)
153                 {
154                     if (opt\&.hasSubParams || opt\&.hasAnySubParams)
155                     {
156                         // Check each sub\-parameter
157                         for (const auto &sub : opt\&.subParams)
158                         {
159                             bool subMatched = false;
160 
161                             // Look for sub\-parameters after the main option
162                             for (size_t i = mainOptionPos + 1; i < this\->mainArgs\->size(); ++i)
163                             {
164                                 if ((*this\->mainArgs)[i] == sub\&.param || (*this\->mainArgs)[i] == sub\&.sparam)
165                                 {
166                                     subMatched = true;
167                                     break;
168                                 }
169                             }
170 
171                             result\&.subExists\&.push_back(subMatched);
172                         }
173                     }
174 
175                     return result;
176                 }
177             }
178         }
179 
180         // If not found as top\-level, check if it's a sub\-parameter
181         for (const auto &opt : this\->options)
182         {
183             // Find if the parent option exists and get its position
184             size_t parentPos = \-1;
185 
186             for (size_t i = 0; i < this\->mainArgs\->size(); ++i)
187             {
188                 if ((*this\->mainArgs)[i] == opt\&.param || (*this\->mainArgs)[i] == opt\&.sparam)
189                 {
190                     parentPos = i;
191                     break;
192                 }
193             }
194 
195             if (parentPos > \-1 && (opt\&.hasSubParams || opt\&.hasAnySubParams))
196             {
197                 // Check if the requested sub\-parameter exists after the parent
198                 for (const auto &sub : opt\&.subParams)
199                 {
200                     if (sub\&.id == id)
201                     {
202                         for (size_t i = parentPos + 1; i < this\->mainArgs\->size(); ++i)
203                         {
204                             if ((*this\->mainArgs)[i] == sub\&.param || (*this\->mainArgs)[i] == sub\&.sparam)
205                             {
206                                 result\&.exists = true;
207                                 break;
208                             }
209                         }
210 
211                         if (!result\&.exists && parentPos + 1 < this\->mainArgs\->size())
212                         {
213                             std::string nextArg = (*this\->mainArgs)[parentPos + 1];
214 
215                             if (nextArg == sub\&.param || nextArg == sub\&.sparam) result\&.exists = true;
216                         }
217 
218                         // Handle any sub\-sub\-parameters if they exist
219                         if (result\&.exists && (sub\&.hasSubParams || sub\&.hasAnySubParams))
220                         {
221                             for (const auto &subsub : sub\&.subParams)
222                             {
223                                 bool subsubMatched = false;
224 
225                                 for (size_t i = 0; i < this\->mainArgs\->size(); ++i)
226                                 {
227                                     if ((*this\->mainArgs)[i] == subsub\&.param || (*this\->mainArgs)[i] == subsub\&.sparam)
228                                     {
229                                         subsubMatched = true;
230                                         break;
231                                     }
232                                 }
233 
234                                 result\&.subExists\&.push_back(subsubMatched);
235                             }
236                         }
237 
238                         return result;
239                     }
240                 }
241             }
242         }
243 
244         return result;
245     }
.PP
.fi

.PP
References \fBargx::ARGXParam::exists\fP, \fBmainArgc\fP, \fBmainArgs\fP, \fBoptions\fP, and \fBargx::ARGXParam::subExists\fP\&.
.SS "bool argx::Argx::getSubParam (const \fBargx::ARGXParam\fP & param, const std::string & id)"

.PP
Get the sub-param from \fRid\fP 
.PP
\fBParameters\fP
.RS 4
\fIparam\fP Original param 
.br
\fIid\fP The ID to get 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB247\fP of file \fBArgx\&.cpp\fP\&.
.nf
248     { return this\->paramExists(id) && param\&.subExists[this\->findParam(id)]; }
.PP
.fi

.PP
References \fBfindParam()\fP, \fBparamExists()\fP, and \fBargx::ARGXParam::subExists\fP\&.
.SS "bool argx::Argx::paramExists (const std::string & id)"

.PP
Get if param exists in the param options\&. 
.PP
\fBParameters\fP
.RS 4
\fIid\fP ID to get 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP

.PP
Definition at line \fB119\fP of file \fBArgx\&.cpp\fP\&.
.nf
120     {
121         if (this\->findParam(id) >= 0) return true;;
122 
123         return false;
124     }
.PP
.fi

.PP
References \fBfindParam()\fP\&.
.PP
Referenced by \fBgetSubParam()\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "std::string argx::Argx::id\fR [private]\fP"

.PP
Definition at line \fB20\fP of file \fBArgx\&.hpp\fP\&.
.PP
Referenced by \fBArgx()\fP\&.
.SS "unsigned int argx::Argx::mainArgc\fR [static]\fP, \fR [private]\fP"

.PP
Definition at line \fB25\fP of file \fBArgx\&.hpp\fP\&.
.PP
Referenced by \fBArgx()\fP, \fBgetArgc()\fP, and \fBgetParam()\fP\&.
.SS "std::vector< std::string > * argx::Argx::mainArgs = nullptr\fR [static]\fP, \fR [private]\fP"

.PP
Definition at line \fB23\fP of file \fBArgx\&.hpp\fP\&.
.PP
Referenced by \fBArgx()\fP, \fB~Argx()\fP, \fBfindParam()\fP, \fBgetArgPos()\fP, \fBgetMainArgs()\fP, and \fBgetParam()\fP\&.
.SS "std::vector< \fBARGXOptions\fP > argx::Argx::options\fR [static]\fP, \fR [private]\fP"

.PP
Definition at line \fB22\fP of file \fBArgx\&.hpp\fP\&.
.PP
Referenced by \fBadd()\fP, \fBcompareArgs()\fP, \fBcreateDocs()\fP, \fBfindParam()\fP, \fBgetOptions()\fP, and \fBgetParam()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Argx from the source code\&.
